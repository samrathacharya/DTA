/* 
 * Generated by Overcast UTC 2022-02-10 10:41:52Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class SalesOrderDetailHeaderTest {
    @istest
    private static void testSalesOrderDetailHeader() {
        SalesOrderDetailHeader actual = new SalesOrderDetailHeader();
        system.assertNotEquals(null, actual.VBAK);
    }

    @istest
    private static void testVBAK() {
        SalesOrderDetailHeaderVBAK actual = new SalesOrderDetailHeaderVBAK();

        actual.MANDT = 'a';
        actual.VBELN = 'a';
        actual.ERDAT = Date.newInstance(2000,1,1);
        actual.ERZET = 'a';
        actual.ERNAM = 'a';
        actual.ANGDT = Date.newInstance(2000,1,1);
        actual.BNDDT = Date.newInstance(2000,1,1);
        actual.AUDAT = Date.newInstance(2000,1,1);
        actual.VBTYP = 'a';
        actual.TRVOG = 'a';
        actual.AUART = 'a';
        actual.AUGRU = 'a';
        actual.LIFSK = 'a';
        actual.FAKSK = 'a';
        actual.WAERK = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.VKGRP = 'a';
        actual.VKBUR = 'a';
        actual.GUEBG = Date.newInstance(2000,1,1);
        actual.GUEEN = Date.newInstance(2000,1,1);
        actual.VSBED = 'a';
        actual.BSTNK = 'a';
        actual.BSTDK = Date.newInstance(2000,1,1);
        actual.IHREZ = 'a';
        actual.KUNNR = 'a';
        actual.KOSTL = 'a';
        actual.AUFNR = 'a';
        actual.FSSTK = 'a';
        actual.GBSTK = 'a';
        actual.LFSTK = 'a';
        actual.LSSTK = 'a';
        actual.WBSTK = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.VBELN);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERZET);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ANGDT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BNDDT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.AUDAT);
        system.assertEquals('a', actual.VBTYP);
        system.assertEquals('a', actual.TRVOG);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.AUGRU);
        system.assertEquals('a', actual.LIFSK);
        system.assertEquals('a', actual.FAKSK);
        system.assertEquals('a', actual.WAERK);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.VKGRP);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GUEBG);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GUEEN);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.BSTNK);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BSTDK);
        system.assertEquals('a', actual.IHREZ);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.KOSTL);
        system.assertEquals('a', actual.AUFNR);
        system.assertEquals('a', actual.FSSTK);
        system.assertEquals('a', actual.GBSTK);
        system.assertEquals('a', actual.LFSTK);
        system.assertEquals('a', actual.LSSTK);
        system.assertEquals('a', actual.WBSTK);
    }
    @istest
    private static void testrunQuery() {
        SalesOrderDetailHeader request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        SalesOrderDetailHeader response = request.runQuery(query1);
        system.assertEquals('a', response.VBAK[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static SalesOrderDetailHeader testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('SalesOrderDetailHeader');
        SalesOrderDetailHeader request = new SalesOrderDetailHeader();
        SalesOrderDetailHeaderVBAK value1 = new SalesOrderDetailHeaderVBAK();
        value1.MANDT = 'a';
        request.VBAK.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        SalesOrderDetailHeader input = new SalesOrderDetailHeader();
        SalesOrderDetailHeaderVBAK value1 = new SalesOrderDetailHeaderVBAK();
        value1.MANDT = 'a';
        input.VBAK.add(value1);
        SalesOrderDetailHeader actual = (SalesOrderDetailHeader)JSON.deserialize(input.serialize(), SalesOrderDetailHeader.class);
        system.assertEquals('a', actual.VBAK[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        SalesOrderDetailHeader output = new SalesOrderDetailHeader();
        SalesOrderDetailHeaderVBAK value1 = new SalesOrderDetailHeaderVBAK();
        value1.MANDT = 'a';
        output.VBAK.add(value1);

        string s = output.serialize();
        SalesOrderDetailHeader actual = SalesOrderDetailHeader.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.VBAK[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            SalesOrderDetailHeader actual = SalesOrderDetailHeader.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (SalesOrderDetailHeader.SalesOrderDetailHeaderException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        SalesOrderDetailHeader output = new SalesOrderDetailHeader();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        SalesOrderDetailHeader output = new SalesOrderDetailHeader();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        SalesOrderDetailHeader output2 = new SalesOrderDetailHeader();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        SalesOrderDetailHeader output = new SalesOrderDetailHeader();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('VBAK'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('VBAK', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('SalesOrderDetailHeader');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        SalesOrderDetailHeader.Parameters params = new SalesOrderDetailHeader.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new SalesOrderDetailHeader()) + '}';
        List<SalesOrderDetailHeader.Parameters> paramList = new List<SalesOrderDetailHeader.Parameters>{ params };

        Test.startTest();
        List<SalesOrderDetailHeader.Result> results = SalesOrderDetailHeader.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}