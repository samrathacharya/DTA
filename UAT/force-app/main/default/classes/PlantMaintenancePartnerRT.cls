global class PlantMaintenancePartnerRT extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Queryable {
/* 
 * Generated by Overcast UTC 2021-12-21 04:25:02Z.
 * This class belongs to the PlantMaintenancePartnerRT Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class PlantMaintenancePartnerRTException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global PlantMaintenancePartnerRT() {
        this.IHPA = new list<PlantMaintenancePartnerRT.IHPA>();
    }

    public class IHPA {
        @AuraEnabled public String MANDT { get; set; }
        @AuraEnabled public String OBJNR { get; set; }
        @AuraEnabled public String PARVW { get; set; }
        @AuraEnabled public String COUNTER { get; set; }
        @AuraEnabled public String OBTYP { get; set; }
        @AuraEnabled public String PARNR { get; set; }
        @AuraEnabled public String INHER { get; set; }
        @AuraEnabled public Date ERDAT { get; set; }
        @AuraEnabled public String ERZEIT { get; set; }
        @AuraEnabled public String ERNAM { get; set; }
        @AuraEnabled public Date AEDAT { get; set; }
        @AuraEnabled public String AEZEIT { get; set; }
        @AuraEnabled public String AENAM { get; set; }
        @AuraEnabled public String KZLOESCH { get; set; }
        @AuraEnabled public String ADRNR { get; set; }
        @AuraEnabled public String TZONSP { get; set; }

        public IHPA() {}

        public IHPA(String pMANDT, String pOBJNR, String pPARVW, String pCOUNTER, String pOBTYP, String pPARNR, String pINHER, Date pERDAT, String pERZEIT, String pERNAM, Date pAEDAT, String pAEZEIT, String pAENAM, String pKZLOESCH, String pADRNR, String pTZONSP) {
            this.MANDT = pMANDT;
            this.OBJNR = pOBJNR;
            this.PARVW = pPARVW;
            this.COUNTER = pCOUNTER;
            this.OBTYP = pOBTYP;
            this.PARNR = pPARNR;
            this.INHER = pINHER;
            this.ERDAT = pERDAT;
            this.ERZEIT = pERZEIT;
            this.ERNAM = pERNAM;
            this.AEDAT = pAEDAT;
            this.AEZEIT = pAEZEIT;
            this.AENAM = pAENAM;
            this.KZLOESCH = pKZLOESCH;
            this.ADRNR = pADRNR;
            this.TZONSP = pTZONSP;
        }
    }

    @AuraEnabled public list<PlantMaintenancePartnerRT.IHPA> IHPA { get; set; }

    public string inputSetName { get; set; }

    public PlantMaintenancePartnerRT runQuery(overcast.Query query) {
        overcast.Logger logger1 = createLogger();
        try {
            PlantMaintenancePartnerRT response = this.runQuery(query, logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public PlantMaintenancePartnerRT runQuery(overcast.Query query, overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential);
    }

    public string runQueryAsync(overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential, con);
    }

    public static PlantMaintenancePartnerRT getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return PlantMaintenancePartnerRT.deserialize(response.getBody());
    }

    private overcast.SynchronousHandler setup(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('PlantMaintenancePartnerRT');
        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
        sh.Operation = operation;

        if (query != null) {
            sh.Condition = query.where_x;
            sh.OrderBy = query.orderBy;
            sh.Fields = query.fields;
            sh.Limit_x = query.limit_x;
            sh.Offset = query.offset;
        }
        return sh;
    }
    
    private PlantMaintenancePartnerRT run(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return PlantMaintenancePartnerRT.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return PlantMaintenancePartnerRT.deserialize(sh.Response);
    }

    private string runAsync(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();

        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }
        

    private static overcast.Logger createLogger() {
        return new overcast.Logger('PlantMaintenancePartnerRT');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static PlantMaintenancePartnerRT deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            PlantMaintenancePartnerRT obj = new PlantMaintenancePartnerRT();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new PlantMaintenancePartnerRT();
        }
        PlantMaintenancePartnerRT obj = (PlantMaintenancePartnerRT)JSON.deserialize(outputData, PlantMaintenancePartnerRT.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new PlantMaintenancePartnerRTException('Response null for PlantMaintenancePartnerRT request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                PlantMaintenancePartnerRTException ex = new PlantMaintenancePartnerRTException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new PlantMaintenancePartnerRTException('Malformed response for PlantMaintenancePartnerRT request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new PlantMaintenancePartnerRTException('Response null for PlantMaintenancePartnerRT request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new PlantMaintenancePartnerRTException(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'IHPA';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(PlantMaintenancePartnerRTMeta0.metadata);
        }
        return metadata;
    }

}