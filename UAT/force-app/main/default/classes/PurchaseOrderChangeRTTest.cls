/* 
 * Generated by Overcast UTC 2022-03-02 10:33:33Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class PurchaseOrderChangeRTTest {
    @istest
    private static void testPurchaseOrderChangeRT() {
        PurchaseOrderChangeRT actual = new PurchaseOrderChangeRT();
        system.assertNotEquals(null, actual.BAPI_PO_CHANGE);
        system.assertNotEquals(null, actual.EXPHEADER);
        system.assertNotEquals(null, actual.POHEADER);
        system.assertNotEquals(null, actual.POHEADERX);
        system.assertNotEquals(null, actual.POADDRDELIVERY);
        system.assertNotEquals(null, actual.POITEM);
        system.assertNotEquals(null, actual.POITEMX);
        system.assertNotEquals(null, actual.POSCHEDULE);
        system.assertNotEquals(null, actual.POSCHEDULEX);
        system.assertNotEquals(null, actual.RETURN_x);
    }

    @istest
    private static void testBAPI_PO_CHANGE() {
        PurchaseOrderChangeRT.BAPI_PO_CHANGE actual = new PurchaseOrderChangeRT.BAPI_PO_CHANGE('a','a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.MEMORY_COMPLETE);
        system.assertEquals('a', actual.MEMORY_UNCOMPLETE);
        system.assertEquals('a', actual.NO_AUTHORITY);
        system.assertEquals('a', actual.NO_MESSAGE_REQ);
        system.assertEquals('a', actual.NO_MESSAGING);
        system.assertEquals('a', actual.NO_PRICE_FROM_PO);
        system.assertEquals('a', actual.PARK_COMPLETE);
        system.assertEquals('a', actual.PARK_UNCOMPLETE);
        system.assertEquals('a', actual.PURCHASEORDER);
        system.assertEquals('a', actual.TESTRUN);

        PurchaseOrderChangeRT.BAPI_PO_CHANGE actual0 = new PurchaseOrderChangeRT.BAPI_PO_CHANGE();
    }
    @istest
    private static void testEXPHEADER() {
        PurchaseOrderChangeRT.EXPHEADER actual = new PurchaseOrderChangeRT.EXPHEADER('a','a','a','a','a',Date.newInstance(2000,1,1),'a','a','a','a','a','a',0,0,0,0,0,'a','a','a','a',0,'a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a','a','a');

        actual.SUPPL_VEND = 'a';
        actual.CUSTOMER = 'a';
        actual.AGREEMENT = 'a';
        actual.GR_MESSAGE = 'a';
        actual.SUPPL_PLNT = 'a';
        actual.INCOTERMS1 = 'a';
        actual.INCOTERMS2 = 'a';
        actual.COLLECT_NO = 'a';
        actual.DIFF_INV = 'a';
        actual.OUR_REF = 'a';
        actual.LOGSYSTEM = 'a';
        actual.SUBITEMINT = 'a';
        actual.PO_REL_IND = 'a';
        actual.REL_STATUS = 'a';
        actual.VAT_CNTRY = 'a';
        actual.VAT_CNTRY_ISO = 'a';
        actual.REASON_CANCEL = 'a';
        actual.REASON_CODE = 'a';
        actual.RETENTION_TYPE = 'a';
        actual.RETENTION_PERCENTAGE = 0;
        actual.DOWNPAY_TYPE = 'a';
        actual.DOWNPAY_AMOUNT = 0;
        actual.DOWNPAY_PERCENT = 0;
        actual.DOWNPAY_DUEDATE = Date.newInstance(2000,1,1);
        actual.MEMORY = 'a';
        actual.MEMORYTYPE = 'a';
        actual.SHIPTYPE = 'a';
        actual.HANDOVERLOC = 'a';
        actual.SHIPCOND = 'a';
        actual.INCOTERMSV = 'a';
        actual.INCOTERMS2L = 'a';
        actual.INCOTERMS3L = 'a';
        actual.EXT_SYS = 'a';
        actual.EXT_REF = 'a';
        actual.INTRASTAT_REL = 'a';
        actual.INTRASTAT_EXCL = 'a';
        actual.EXT_REV_TMSTMP = 0;
        system.assertEquals('a', actual.PO_NUMBER);
        system.assertEquals('a', actual.COMP_CODE);
        system.assertEquals('a', actual.DOC_TYPE);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.STATUS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CREAT_DATE);
        system.assertEquals('a', actual.CREATED_BY);
        system.assertEquals('a', actual.ITEM_INTVL);
        system.assertEquals('a', actual.VENDOR);
        system.assertEquals('a', actual.LANGU);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.PMNTTRMS);
        system.assertEquals(0, actual.DSCNT1_TO);
        system.assertEquals(0, actual.DSCNT2_TO);
        system.assertEquals(0, actual.DSCNT3_TO);
        system.assertEquals(0, actual.DSCT_PCT1);
        system.assertEquals(0, actual.DSCT_PCT2);
        system.assertEquals('a', actual.PURCH_ORG);
        system.assertEquals('a', actual.PUR_GROUP);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.CURRENCY_ISO);
        system.assertEquals(0, actual.EXCH_RATE);
        system.assertEquals('a', actual.EX_RATE_FX);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOC_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VPER_START);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VPER_END);
        system.assertEquals(Date.newInstance(2000,1,1), actual.WARRANTY);
        system.assertEquals('a', actual.QUOTATION);
        system.assertEquals(Date.newInstance(2000,1,1), actual.QUOT_DATE);
        system.assertEquals('a', actual.REF_1);
        system.assertEquals('a', actual.SALES_PERS);
        system.assertEquals('a', actual.TELEPHONE);
        system.assertEquals('a', actual.SUPPL_VEND);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.AGREEMENT);
        system.assertEquals('a', actual.GR_MESSAGE);
        system.assertEquals('a', actual.SUPPL_PLNT);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.COLLECT_NO);
        system.assertEquals('a', actual.DIFF_INV);
        system.assertEquals('a', actual.OUR_REF);
        system.assertEquals('a', actual.LOGSYSTEM);
        system.assertEquals('a', actual.SUBITEMINT);
        system.assertEquals('a', actual.PO_REL_IND);
        system.assertEquals('a', actual.REL_STATUS);
        system.assertEquals('a', actual.VAT_CNTRY);
        system.assertEquals('a', actual.VAT_CNTRY_ISO);
        system.assertEquals('a', actual.REASON_CANCEL);
        system.assertEquals('a', actual.REASON_CODE);
        system.assertEquals('a', actual.RETENTION_TYPE);
        system.assertEquals(0, actual.RETENTION_PERCENTAGE);
        system.assertEquals('a', actual.DOWNPAY_TYPE);
        system.assertEquals(0, actual.DOWNPAY_AMOUNT);
        system.assertEquals(0, actual.DOWNPAY_PERCENT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOWNPAY_DUEDATE);
        system.assertEquals('a', actual.MEMORY);
        system.assertEquals('a', actual.MEMORYTYPE);
        system.assertEquals('a', actual.SHIPTYPE);
        system.assertEquals('a', actual.HANDOVERLOC);
        system.assertEquals('a', actual.SHIPCOND);
        system.assertEquals('a', actual.INCOTERMSV);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.EXT_SYS);
        system.assertEquals('a', actual.EXT_REF);
        system.assertEquals('a', actual.INTRASTAT_REL);
        system.assertEquals('a', actual.INTRASTAT_EXCL);
        system.assertEquals(0, actual.EXT_REV_TMSTMP);

        PurchaseOrderChangeRT.EXPHEADER actual0 = new PurchaseOrderChangeRT.EXPHEADER();
    }
    @istest
    private static void testPOHEADER() {
        PurchaseOrderChangeRT.POHEADER actual = new PurchaseOrderChangeRT.POHEADER('a','a','a','a','a',Date.newInstance(2000,1,1),'a','a','a','a','a','a',0,0,0,0,0,'a','a','a','a',0,'a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a','a','a');

        actual.SUPPL_VEND = 'a';
        actual.CUSTOMER = 'a';
        actual.AGREEMENT = 'a';
        actual.GR_MESSAGE = 'a';
        actual.SUPPL_PLNT = 'a';
        actual.INCOTERMS1 = 'a';
        actual.INCOTERMS2 = 'a';
        actual.COLLECT_NO = 'a';
        actual.DIFF_INV = 'a';
        actual.OUR_REF = 'a';
        actual.LOGSYSTEM = 'a';
        actual.SUBITEMINT = 'a';
        actual.PO_REL_IND = 'a';
        actual.REL_STATUS = 'a';
        actual.VAT_CNTRY = 'a';
        actual.VAT_CNTRY_ISO = 'a';
        actual.REASON_CANCEL = 'a';
        actual.REASON_CODE = 'a';
        actual.RETENTION_TYPE = 'a';
        actual.RETENTION_PERCENTAGE = 0;
        actual.DOWNPAY_TYPE = 'a';
        actual.DOWNPAY_AMOUNT = 0;
        actual.DOWNPAY_PERCENT = 0;
        actual.DOWNPAY_DUEDATE = Date.newInstance(2000,1,1);
        actual.MEMORY = 'a';
        actual.MEMORYTYPE = 'a';
        actual.SHIPTYPE = 'a';
        actual.HANDOVERLOC = 'a';
        actual.SHIPCOND = 'a';
        actual.INCOTERMSV = 'a';
        actual.INCOTERMS2L = 'a';
        actual.INCOTERMS3L = 'a';
        actual.EXT_SYS = 'a';
        actual.EXT_REF = 'a';
        actual.INTRASTAT_REL = 'a';
        actual.INTRASTAT_EXCL = 'a';
        actual.EXT_REV_TMSTMP = 0;
        system.assertEquals('a', actual.PO_NUMBER);
        system.assertEquals('a', actual.COMP_CODE);
        system.assertEquals('a', actual.DOC_TYPE);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.STATUS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CREAT_DATE);
        system.assertEquals('a', actual.CREATED_BY);
        system.assertEquals('a', actual.ITEM_INTVL);
        system.assertEquals('a', actual.VENDOR);
        system.assertEquals('a', actual.LANGU);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.PMNTTRMS);
        system.assertEquals(0, actual.DSCNT1_TO);
        system.assertEquals(0, actual.DSCNT2_TO);
        system.assertEquals(0, actual.DSCNT3_TO);
        system.assertEquals(0, actual.DSCT_PCT1);
        system.assertEquals(0, actual.DSCT_PCT2);
        system.assertEquals('a', actual.PURCH_ORG);
        system.assertEquals('a', actual.PUR_GROUP);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.CURRENCY_ISO);
        system.assertEquals(0, actual.EXCH_RATE);
        system.assertEquals('a', actual.EX_RATE_FX);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOC_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VPER_START);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VPER_END);
        system.assertEquals(Date.newInstance(2000,1,1), actual.WARRANTY);
        system.assertEquals('a', actual.QUOTATION);
        system.assertEquals(Date.newInstance(2000,1,1), actual.QUOT_DATE);
        system.assertEquals('a', actual.REF_1);
        system.assertEquals('a', actual.SALES_PERS);
        system.assertEquals('a', actual.TELEPHONE);
        system.assertEquals('a', actual.SUPPL_VEND);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.AGREEMENT);
        system.assertEquals('a', actual.GR_MESSAGE);
        system.assertEquals('a', actual.SUPPL_PLNT);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.COLLECT_NO);
        system.assertEquals('a', actual.DIFF_INV);
        system.assertEquals('a', actual.OUR_REF);
        system.assertEquals('a', actual.LOGSYSTEM);
        system.assertEquals('a', actual.SUBITEMINT);
        system.assertEquals('a', actual.PO_REL_IND);
        system.assertEquals('a', actual.REL_STATUS);
        system.assertEquals('a', actual.VAT_CNTRY);
        system.assertEquals('a', actual.VAT_CNTRY_ISO);
        system.assertEquals('a', actual.REASON_CANCEL);
        system.assertEquals('a', actual.REASON_CODE);
        system.assertEquals('a', actual.RETENTION_TYPE);
        system.assertEquals(0, actual.RETENTION_PERCENTAGE);
        system.assertEquals('a', actual.DOWNPAY_TYPE);
        system.assertEquals(0, actual.DOWNPAY_AMOUNT);
        system.assertEquals(0, actual.DOWNPAY_PERCENT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOWNPAY_DUEDATE);
        system.assertEquals('a', actual.MEMORY);
        system.assertEquals('a', actual.MEMORYTYPE);
        system.assertEquals('a', actual.SHIPTYPE);
        system.assertEquals('a', actual.HANDOVERLOC);
        system.assertEquals('a', actual.SHIPCOND);
        system.assertEquals('a', actual.INCOTERMSV);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.EXT_SYS);
        system.assertEquals('a', actual.EXT_REF);
        system.assertEquals('a', actual.INTRASTAT_REL);
        system.assertEquals('a', actual.INTRASTAT_EXCL);
        system.assertEquals(0, actual.EXT_REV_TMSTMP);

        PurchaseOrderChangeRT.POHEADER actual0 = new PurchaseOrderChangeRT.POHEADER();
    }
    @istest
    private static void testPOHEADERX() {
        PurchaseOrderChangeRT.POHEADERX actual = new PurchaseOrderChangeRT.POHEADERX('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        actual.SUPPL_VEND = 'a';
        actual.CUSTOMER = 'a';
        actual.AGREEMENT = 'a';
        actual.GR_MESSAGE = 'a';
        actual.SUPPL_PLNT = 'a';
        actual.INCOTERMS1 = 'a';
        actual.INCOTERMS2 = 'a';
        actual.COLLECT_NO = 'a';
        actual.DIFF_INV = 'a';
        actual.OUR_REF = 'a';
        actual.LOGSYSTEM = 'a';
        actual.SUBITEMINT = 'a';
        actual.PO_REL_IND = 'a';
        actual.REL_STATUS = 'a';
        actual.VAT_CNTRY = 'a';
        actual.VAT_CNTRY_ISO = 'a';
        actual.REASON_CANCEL = 'a';
        actual.REASON_CODE = 'a';
        actual.RETENTION_TYPE = 'a';
        actual.RETENTION_PERCENTAGE = 'a';
        actual.DOWNPAY_TYPE = 'a';
        actual.DOWNPAY_AMOUNT = 'a';
        actual.DOWNPAY_PERCENT = 'a';
        actual.DOWNPAY_DUEDATE = 'a';
        actual.MEMORY = 'a';
        actual.MEMORYTYPE = 'a';
        actual.SHIPTYPE = 'a';
        actual.HANDOVERLOC = 'a';
        actual.SHIPCOND = 'a';
        actual.INCOTERMSV = 'a';
        actual.INCOTERMS2L = 'a';
        actual.INCOTERMS3L = 'a';
        actual.EXT_SYS = 'a';
        actual.EXT_REF = 'a';
        actual.INTRASTAT_REL = 'a';
        actual.INTRASTAT_EXCL = 'a';
        actual.EXT_REV_TMSTMP = 'a';
        system.assertEquals('a', actual.PO_NUMBER);
        system.assertEquals('a', actual.COMP_CODE);
        system.assertEquals('a', actual.DOC_TYPE);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.STATUS);
        system.assertEquals('a', actual.CREAT_DATE);
        system.assertEquals('a', actual.CREATED_BY);
        system.assertEquals('a', actual.ITEM_INTVL);
        system.assertEquals('a', actual.VENDOR);
        system.assertEquals('a', actual.LANGU);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.PMNTTRMS);
        system.assertEquals('a', actual.DSCNT1_TO);
        system.assertEquals('a', actual.DSCNT2_TO);
        system.assertEquals('a', actual.DSCNT3_TO);
        system.assertEquals('a', actual.DSCT_PCT1);
        system.assertEquals('a', actual.DSCT_PCT2);
        system.assertEquals('a', actual.PURCH_ORG);
        system.assertEquals('a', actual.PUR_GROUP);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.CURRENCY_ISO);
        system.assertEquals('a', actual.EXCH_RATE);
        system.assertEquals('a', actual.EX_RATE_FX);
        system.assertEquals('a', actual.DOC_DATE);
        system.assertEquals('a', actual.VPER_START);
        system.assertEquals('a', actual.VPER_END);
        system.assertEquals('a', actual.WARRANTY);
        system.assertEquals('a', actual.QUOTATION);
        system.assertEquals('a', actual.QUOT_DATE);
        system.assertEquals('a', actual.REF_1);
        system.assertEquals('a', actual.SALES_PERS);
        system.assertEquals('a', actual.TELEPHONE);
        system.assertEquals('a', actual.SUPPL_VEND);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.AGREEMENT);
        system.assertEquals('a', actual.GR_MESSAGE);
        system.assertEquals('a', actual.SUPPL_PLNT);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.COLLECT_NO);
        system.assertEquals('a', actual.DIFF_INV);
        system.assertEquals('a', actual.OUR_REF);
        system.assertEquals('a', actual.LOGSYSTEM);
        system.assertEquals('a', actual.SUBITEMINT);
        system.assertEquals('a', actual.PO_REL_IND);
        system.assertEquals('a', actual.REL_STATUS);
        system.assertEquals('a', actual.VAT_CNTRY);
        system.assertEquals('a', actual.VAT_CNTRY_ISO);
        system.assertEquals('a', actual.REASON_CANCEL);
        system.assertEquals('a', actual.REASON_CODE);
        system.assertEquals('a', actual.RETENTION_TYPE);
        system.assertEquals('a', actual.RETENTION_PERCENTAGE);
        system.assertEquals('a', actual.DOWNPAY_TYPE);
        system.assertEquals('a', actual.DOWNPAY_AMOUNT);
        system.assertEquals('a', actual.DOWNPAY_PERCENT);
        system.assertEquals('a', actual.DOWNPAY_DUEDATE);
        system.assertEquals('a', actual.MEMORY);
        system.assertEquals('a', actual.MEMORYTYPE);
        system.assertEquals('a', actual.SHIPTYPE);
        system.assertEquals('a', actual.HANDOVERLOC);
        system.assertEquals('a', actual.SHIPCOND);
        system.assertEquals('a', actual.INCOTERMSV);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.EXT_SYS);
        system.assertEquals('a', actual.EXT_REF);
        system.assertEquals('a', actual.INTRASTAT_REL);
        system.assertEquals('a', actual.INTRASTAT_EXCL);
        system.assertEquals('a', actual.EXT_REV_TMSTMP);

        PurchaseOrderChangeRT.POHEADERX actual0 = new PurchaseOrderChangeRT.POHEADERX();
    }
    @istest
    private static void testPOADDRDELIVERY() {
        PurchaseOrderChangeRT.POADDRDELIVERY actual = new PurchaseOrderChangeRT.POADDRDELIVERY('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        actual.TIME_ZONE = 'a';
        actual.TAXJURCODE = 'a';
        actual.ADR_NOTES = 'a';
        actual.COMM_TYPE = 'a';
        actual.TEL1_NUMBR = 'a';
        actual.TEL1_EXT = 'a';
        actual.FAX_NUMBER = 'a';
        actual.FAX_EXTENS = 'a';
        actual.STREET_LNG = 'a';
        actual.DISTRCT_NO = 'a';
        actual.CHCKSTATUS = 'a';
        actual.PBOXCIT_NO = 'a';
        actual.TRANSPZONE = 'a';
        actual.HOUSE_NO2 = 'a';
        actual.E_MAIL = 'a';
        actual.STR_SUPPL3 = 'a';
        actual.TITLE = 'a';
        actual.COUNTRYISO = 'a';
        actual.LANGU_ISO = 'a';
        actual.BUILD_LONG = 'a';
        actual.REGIOGROUP = 'a';
        actual.SUPP_VENDOR = 'a';
        actual.CUSTOMER = 'a';
        actual.SC_VENDOR = 'a';
        system.assertEquals('a', actual.PO_ITEM);
        system.assertEquals('a', actual.ADDR_NO);
        system.assertEquals('a', actual.FORMOFADDR);
        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.NAME_2);
        system.assertEquals('a', actual.NAME_3);
        system.assertEquals('a', actual.NAME_4);
        system.assertEquals('a', actual.C_O_NAME);
        system.assertEquals('a', actual.CITY);
        system.assertEquals('a', actual.DISTRICT);
        system.assertEquals('a', actual.CITY_NO);
        system.assertEquals('a', actual.POSTL_COD1);
        system.assertEquals('a', actual.POSTL_COD2);
        system.assertEquals('a', actual.POSTL_COD3);
        system.assertEquals('a', actual.PO_BOX);
        system.assertEquals('a', actual.PO_BOX_CIT);
        system.assertEquals('a', actual.DELIV_DIS);
        system.assertEquals('a', actual.STREET);
        system.assertEquals('a', actual.STREET_NO);
        system.assertEquals('a', actual.STR_ABBR);
        system.assertEquals('a', actual.HOUSE_NO);
        system.assertEquals('a', actual.STR_SUPPL1);
        system.assertEquals('a', actual.STR_SUPPL2);
        system.assertEquals('a', actual.LOCATION);
        system.assertEquals('a', actual.BUILDING);
        system.assertEquals('a', actual.FLOOR);
        system.assertEquals('a', actual.ROOM_NO);
        system.assertEquals('a', actual.COUNTRY);
        system.assertEquals('a', actual.LANGU);
        system.assertEquals('a', actual.REGION);
        system.assertEquals('a', actual.SORT1);
        system.assertEquals('a', actual.SORT2);
        system.assertEquals('a', actual.TIME_ZONE);
        system.assertEquals('a', actual.TAXJURCODE);
        system.assertEquals('a', actual.ADR_NOTES);
        system.assertEquals('a', actual.COMM_TYPE);
        system.assertEquals('a', actual.TEL1_NUMBR);
        system.assertEquals('a', actual.TEL1_EXT);
        system.assertEquals('a', actual.FAX_NUMBER);
        system.assertEquals('a', actual.FAX_EXTENS);
        system.assertEquals('a', actual.STREET_LNG);
        system.assertEquals('a', actual.DISTRCT_NO);
        system.assertEquals('a', actual.CHCKSTATUS);
        system.assertEquals('a', actual.PBOXCIT_NO);
        system.assertEquals('a', actual.TRANSPZONE);
        system.assertEquals('a', actual.HOUSE_NO2);
        system.assertEquals('a', actual.E_MAIL);
        system.assertEquals('a', actual.STR_SUPPL3);
        system.assertEquals('a', actual.TITLE);
        system.assertEquals('a', actual.COUNTRYISO);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.BUILD_LONG);
        system.assertEquals('a', actual.REGIOGROUP);
        system.assertEquals('a', actual.SUPP_VENDOR);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.SC_VENDOR);

        PurchaseOrderChangeRT.POADDRDELIVERY actual0 = new PurchaseOrderChangeRT.POADDRDELIVERY();
    }
    @istest
    private static void testPOITEM() {
        PurchaseOrderChangeRT.POITEM actual = new PurchaseOrderChangeRT.POITEM('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',0,'a','a','a','a',0,0,0,0,0,'a','a','a','a','a');

        actual.EST_PRICE = 'a';
        actual.REMINDER1 = 0;
        actual.REMINDER2 = 0;
        actual.REMINDER3 = 0;
        actual.OVER_DLV_TOL = 0;
        actual.UNLIMITED_DLV = 'a';
        actual.UNDER_DLV_TOL = 0;
        actual.VAL_TYPE = 'a';
        actual.NO_MORE_GR = 'a';
        actual.FINAL_INV = 'a';
        actual.ITEM_CAT = 'a';
        actual.ACCTASSCAT = 'a';
        actual.DISTRIB = 'a';
        actual.PART_INV = 'a';
        actual.GR_IND = 'a';
        actual.GR_NON_VAL = 'a';
        actual.IR_IND = 'a';
        actual.FREE_ITEM = 'a';
        actual.GR_BASEDIV = 'a';
        actual.ACKN_REQD = 'a';
        actual.ACKNOWL_NO = 'a';
        actual.AGREEMENT = 'a';
        actual.AGMT_ITEM = 'a';
        actual.SHIPPING = 'a';
        actual.CUSTOMER = 'a';
        actual.COND_GROUP = 'a';
        actual.NO_DISCT = 'a';
        actual.PLAN_DEL = 0;
        actual.NET_WEIGHT = 0;
        actual.WEIGHTUNIT = 'a';
        actual.WEIGHTUNIT_ISO = 'a';
        actual.TAXJURCODE = 'a';
        actual.CTRL_KEY = 'a';
        actual.CONF_CTRL = 'a';
        actual.REV_LEV = 'a';
        actual.FUND = 'a';
        actual.FUNDS_CTR = 'a';
        actual.CMMT_ITEM = 'a';
        actual.PRICEDATE = 'a';
        actual.PRICE_DATE = Date.newInstance(2000,1,1);
        actual.GROSS_WT = 0;
        actual.VOLUME = 0;
        actual.VOLUMEUNIT = 'a';
        actual.VOLUMEUNIT_ISO = 'a';
        actual.INCOTERMS1 = 'a';
        actual.INCOTERMS2 = 'a';
        actual.PRE_VENDOR = 'a';
        actual.VEND_PART = 'a';
        actual.HL_ITEM = 'a';
        actual.GR_TO_DATE = Date.newInstance(2000,1,1);
        actual.SUPP_VENDOR = 'a';
        actual.SC_VENDOR = 'a';
        actual.KANBAN_IND = 'a';
        actual.ERS = 'a';
        actual.R_PROMO = 'a';
        actual.POINTS = 0;
        actual.POINT_UNIT = 'a';
        actual.POINT_UNIT_ISO = 'a';
        actual.SEASON = 'a';
        actual.SEASON_YR = 'a';
        actual.BON_GRP2 = 'a';
        actual.BON_GRP3 = 'a';
        actual.SETT_ITEM = 'a';
        actual.MINREMLIFE = 0;
        actual.RFQ_NO = 'a';
        actual.RFQ_ITEM = 'a';
        actual.PREQ_NO = 'a';
        actual.PREQ_ITEM = 'a';
        actual.REF_DOC = 'a';
        actual.REF_ITEM = 'a';
        actual.SI_CAT = 'a';
        actual.RET_ITEM = 'a';
        actual.AT_RELEV = 'a';
        actual.ORDER_REASON = 'a';
        actual.BRAS_NBM = 'a';
        actual.MATL_USAGE = 'a';
        actual.MAT_ORIGIN = 'a';
        actual.IN_HOUSE = 'a';
        actual.INDUS3 = 'a';
        actual.INF_INDEX = 'a';
        actual.UNTIL_DATE = Date.newInstance(2000,1,1);
        actual.DELIV_COMPL = 'a';
        actual.PART_DELIV = 'a';
        actual.SHIP_BLOCKED = 'a';
        actual.PREQ_NAME = 'a';
        actual.PERIOD_IND_EXPIRATION_DATE = 'a';
        actual.INT_OBJ_NO = 'a';
        actual.PCKG_NO = 'a';
        actual.BATCH = 'a';
        actual.VENDRBATCH = 'a';
        actual.CALCTYPE = 'a';
        actual.GRANT_NBR = 'a';
        actual.CMMT_ITEM_LONG = 'a';
        actual.FUNC_AREA_LONG = 'a';
        actual.NO_ROUNDING = 'a';
        actual.PO_PRICE = 'a';
        actual.SUPPL_STLOC = 'a';
        actual.SRV_BASED_IV = 'a';
        actual.FUNDS_RES = 'a';
        actual.RES_ITEM = 'a';
        actual.ORIG_ACCEPT = 'a';
        actual.ALLOC_TBL = 'a';
        actual.ALLOC_TBL_ITEM = 'a';
        actual.SRC_STOCK_TYPE = 'a';
        actual.REASON_REJ = 'a';
        actual.CRM_SALES_ORDER_NO = 'a';
        actual.CRM_SALES_ORDER_ITEM_NO = 'a';
        actual.CRM_REF_SALES_ORDER_NO = 'a';
        actual.CRM_REF_SO_ITEM_NO = 'a';
        actual.PRIO_URGENCY = 'a';
        actual.PRIO_REQUIREMENT = 'a';
        actual.REASON_CODE = 'a';
        actual.FUND_LONG = 'a';
        actual.LONG_ITEM_NUMBER = 'a';
        actual.EXTERNAL_SORT_NUMBER = 'a';
        actual.EXTERNAL_HIERARCHY_TYPE = 'a';
        actual.RETENTION_PERCENTAGE = 0;
        actual.DOWNPAY_TYPE = 'a';
        actual.DOWNPAY_AMOUNT = 0;
        actual.DOWNPAY_PERCENT = 0;
        actual.DOWNPAY_DUEDATE = Date.newInstance(2000,1,1);
        actual.EXT_RFX_NUMBER = 'a';
        actual.EXT_RFX_ITEM = 'a';
        actual.EXT_RFX_SYSTEM = 'a';
        actual.SRM_CONTRACT_ID = 'a';
        actual.SRM_CONTRACT_ITM = 'a';
        actual.BUDGET_PERIOD = 'a';
        actual.BLOCK_REASON_ID = 'a';
        actual.BLOCK_REASON_TEXT = 'a';
        actual.SPE_CRM_FKREL = 'a';
        actual.DATE_QTY_FIXED = 'a';
        actual.GI_BASED_GR = 'a';
        actual.SHIPTYPE = 'a';
        actual.HANDOVERLOC = 'a';
        actual.TC_AUT_DET = 'a';
        actual.MANUAL_TC_REASON = 'a';
        actual.FISCAL_INCENTIVE = 'a';
        actual.FISCAL_INCENTIVE_ID = 'a';
        actual.TAX_SUBJECT_ST = 'a';
        actual.REQ_SEGMENT = 'a';
        actual.STK_SEGMENT = 'a';
        actual.SF_TXJCD = 'a';
        actual.INCOTERMS2L = 'a';
        actual.INCOTERMS3L = 'a';
        actual.MATERIAL_LONG = 'a';
        actual.EMATERIAL_LONG = 'a';
        actual.SERVICEPERFORMER = 'a';
        actual.PRODUCTTYPE = 'a';
        actual.STARTDATE = Date.newInstance(2000,1,1);
        actual.ENDDATE = Date.newInstance(2000,1,1);
        actual.REQ_SEG_LONG = 'a';
        actual.STK_SEG_LONG = 'a';
        actual.EXPECTED_VALUE = 0;
        actual.LIMIT_AMOUNT = 0;
        actual.EXT_REF = 'a';
        actual.GL_ACCOUNT = 'a';
        actual.COSTCENTER = 'a';
        actual.WBS_ELEMENT = 'a';
        actual.COMMODITY_CODE = 'a';
        actual.INTRASTAT_SERVICE_CODE = 'a';
        actual.CONTRACT_FOR_LIMIT = 'a';
        actual.TAXCALCDATE = Date.newInstance(2000,1,1);
        actual.TAXCOUNTRY = 'a';
        system.assertEquals('a', actual.PO_ITEM);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.SHORT_TEXT);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.MATERIAL_EXTERNAL);
        system.assertEquals('a', actual.MATERIAL_GUID);
        system.assertEquals('a', actual.MATERIAL_VERSION);
        system.assertEquals('a', actual.EMATERIAL);
        system.assertEquals('a', actual.EMATERIAL_EXTERNAL);
        system.assertEquals('a', actual.EMATERIAL_GUID);
        system.assertEquals('a', actual.EMATERIAL_VERSION);
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.STGE_LOC);
        system.assertEquals('a', actual.TRACKINGNO);
        system.assertEquals('a', actual.MATL_GROUP);
        system.assertEquals('a', actual.INFO_REC);
        system.assertEquals('a', actual.VEND_MAT);
        system.assertEquals(0, actual.QUANTITY);
        system.assertEquals('a', actual.PO_UNIT);
        system.assertEquals('a', actual.PO_UNIT_ISO);
        system.assertEquals('a', actual.ORDERPR_UN);
        system.assertEquals('a', actual.ORDERPR_UN_ISO);
        system.assertEquals(0, actual.CONV_NUM1);
        system.assertEquals(0, actual.CONV_DEN1);
        system.assertEquals(0, actual.NET_PRICE);
        system.assertEquals(0, actual.PRICE_UNIT);
        system.assertEquals(0, actual.GR_PR_TIME);
        system.assertEquals('a', actual.TAX_CODE);
        system.assertEquals('a', actual.BON_GRP1);
        system.assertEquals('a', actual.QUAL_INSP);
        system.assertEquals('a', actual.INFO_UPD);
        system.assertEquals('a', actual.PRNT_PRICE);
        system.assertEquals('a', actual.EST_PRICE);
        system.assertEquals(0, actual.REMINDER1);
        system.assertEquals(0, actual.REMINDER2);
        system.assertEquals(0, actual.REMINDER3);
        system.assertEquals(0, actual.OVER_DLV_TOL);
        system.assertEquals('a', actual.UNLIMITED_DLV);
        system.assertEquals(0, actual.UNDER_DLV_TOL);
        system.assertEquals('a', actual.VAL_TYPE);
        system.assertEquals('a', actual.NO_MORE_GR);
        system.assertEquals('a', actual.FINAL_INV);
        system.assertEquals('a', actual.ITEM_CAT);
        system.assertEquals('a', actual.ACCTASSCAT);
        system.assertEquals('a', actual.DISTRIB);
        system.assertEquals('a', actual.PART_INV);
        system.assertEquals('a', actual.GR_IND);
        system.assertEquals('a', actual.GR_NON_VAL);
        system.assertEquals('a', actual.IR_IND);
        system.assertEquals('a', actual.FREE_ITEM);
        system.assertEquals('a', actual.GR_BASEDIV);
        system.assertEquals('a', actual.ACKN_REQD);
        system.assertEquals('a', actual.ACKNOWL_NO);
        system.assertEquals('a', actual.AGREEMENT);
        system.assertEquals('a', actual.AGMT_ITEM);
        system.assertEquals('a', actual.SHIPPING);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.COND_GROUP);
        system.assertEquals('a', actual.NO_DISCT);
        system.assertEquals(0, actual.PLAN_DEL);
        system.assertEquals(0, actual.NET_WEIGHT);
        system.assertEquals('a', actual.WEIGHTUNIT);
        system.assertEquals('a', actual.WEIGHTUNIT_ISO);
        system.assertEquals('a', actual.TAXJURCODE);
        system.assertEquals('a', actual.CTRL_KEY);
        system.assertEquals('a', actual.CONF_CTRL);
        system.assertEquals('a', actual.REV_LEV);
        system.assertEquals('a', actual.FUND);
        system.assertEquals('a', actual.FUNDS_CTR);
        system.assertEquals('a', actual.CMMT_ITEM);
        system.assertEquals('a', actual.PRICEDATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.PRICE_DATE);
        system.assertEquals(0, actual.GROSS_WT);
        system.assertEquals(0, actual.VOLUME);
        system.assertEquals('a', actual.VOLUMEUNIT);
        system.assertEquals('a', actual.VOLUMEUNIT_ISO);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.PRE_VENDOR);
        system.assertEquals('a', actual.VEND_PART);
        system.assertEquals('a', actual.HL_ITEM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GR_TO_DATE);
        system.assertEquals('a', actual.SUPP_VENDOR);
        system.assertEquals('a', actual.SC_VENDOR);
        system.assertEquals('a', actual.KANBAN_IND);
        system.assertEquals('a', actual.ERS);
        system.assertEquals('a', actual.R_PROMO);
        system.assertEquals(0, actual.POINTS);
        system.assertEquals('a', actual.POINT_UNIT);
        system.assertEquals('a', actual.POINT_UNIT_ISO);
        system.assertEquals('a', actual.SEASON);
        system.assertEquals('a', actual.SEASON_YR);
        system.assertEquals('a', actual.BON_GRP2);
        system.assertEquals('a', actual.BON_GRP3);
        system.assertEquals('a', actual.SETT_ITEM);
        system.assertEquals(0, actual.MINREMLIFE);
        system.assertEquals('a', actual.RFQ_NO);
        system.assertEquals('a', actual.RFQ_ITEM);
        system.assertEquals('a', actual.PREQ_NO);
        system.assertEquals('a', actual.PREQ_ITEM);
        system.assertEquals('a', actual.REF_DOC);
        system.assertEquals('a', actual.REF_ITEM);
        system.assertEquals('a', actual.SI_CAT);
        system.assertEquals('a', actual.RET_ITEM);
        system.assertEquals('a', actual.AT_RELEV);
        system.assertEquals('a', actual.ORDER_REASON);
        system.assertEquals('a', actual.BRAS_NBM);
        system.assertEquals('a', actual.MATL_USAGE);
        system.assertEquals('a', actual.MAT_ORIGIN);
        system.assertEquals('a', actual.IN_HOUSE);
        system.assertEquals('a', actual.INDUS3);
        system.assertEquals('a', actual.INF_INDEX);
        system.assertEquals(Date.newInstance(2000,1,1), actual.UNTIL_DATE);
        system.assertEquals('a', actual.DELIV_COMPL);
        system.assertEquals('a', actual.PART_DELIV);
        system.assertEquals('a', actual.SHIP_BLOCKED);
        system.assertEquals('a', actual.PREQ_NAME);
        system.assertEquals('a', actual.PERIOD_IND_EXPIRATION_DATE);
        system.assertEquals('a', actual.INT_OBJ_NO);
        system.assertEquals('a', actual.PCKG_NO);
        system.assertEquals('a', actual.BATCH);
        system.assertEquals('a', actual.VENDRBATCH);
        system.assertEquals('a', actual.CALCTYPE);
        system.assertEquals('a', actual.GRANT_NBR);
        system.assertEquals('a', actual.CMMT_ITEM_LONG);
        system.assertEquals('a', actual.FUNC_AREA_LONG);
        system.assertEquals('a', actual.NO_ROUNDING);
        system.assertEquals('a', actual.PO_PRICE);
        system.assertEquals('a', actual.SUPPL_STLOC);
        system.assertEquals('a', actual.SRV_BASED_IV);
        system.assertEquals('a', actual.FUNDS_RES);
        system.assertEquals('a', actual.RES_ITEM);
        system.assertEquals('a', actual.ORIG_ACCEPT);
        system.assertEquals('a', actual.ALLOC_TBL);
        system.assertEquals('a', actual.ALLOC_TBL_ITEM);
        system.assertEquals('a', actual.SRC_STOCK_TYPE);
        system.assertEquals('a', actual.REASON_REJ);
        system.assertEquals('a', actual.CRM_SALES_ORDER_NO);
        system.assertEquals('a', actual.CRM_SALES_ORDER_ITEM_NO);
        system.assertEquals('a', actual.CRM_REF_SALES_ORDER_NO);
        system.assertEquals('a', actual.CRM_REF_SO_ITEM_NO);
        system.assertEquals('a', actual.PRIO_URGENCY);
        system.assertEquals('a', actual.PRIO_REQUIREMENT);
        system.assertEquals('a', actual.REASON_CODE);
        system.assertEquals('a', actual.FUND_LONG);
        system.assertEquals('a', actual.LONG_ITEM_NUMBER);
        system.assertEquals('a', actual.EXTERNAL_SORT_NUMBER);
        system.assertEquals('a', actual.EXTERNAL_HIERARCHY_TYPE);
        system.assertEquals(0, actual.RETENTION_PERCENTAGE);
        system.assertEquals('a', actual.DOWNPAY_TYPE);
        system.assertEquals(0, actual.DOWNPAY_AMOUNT);
        system.assertEquals(0, actual.DOWNPAY_PERCENT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOWNPAY_DUEDATE);
        system.assertEquals('a', actual.EXT_RFX_NUMBER);
        system.assertEquals('a', actual.EXT_RFX_ITEM);
        system.assertEquals('a', actual.EXT_RFX_SYSTEM);
        system.assertEquals('a', actual.SRM_CONTRACT_ID);
        system.assertEquals('a', actual.SRM_CONTRACT_ITM);
        system.assertEquals('a', actual.BUDGET_PERIOD);
        system.assertEquals('a', actual.BLOCK_REASON_ID);
        system.assertEquals('a', actual.BLOCK_REASON_TEXT);
        system.assertEquals('a', actual.SPE_CRM_FKREL);
        system.assertEquals('a', actual.DATE_QTY_FIXED);
        system.assertEquals('a', actual.GI_BASED_GR);
        system.assertEquals('a', actual.SHIPTYPE);
        system.assertEquals('a', actual.HANDOVERLOC);
        system.assertEquals('a', actual.TC_AUT_DET);
        system.assertEquals('a', actual.MANUAL_TC_REASON);
        system.assertEquals('a', actual.FISCAL_INCENTIVE);
        system.assertEquals('a', actual.FISCAL_INCENTIVE_ID);
        system.assertEquals('a', actual.TAX_SUBJECT_ST);
        system.assertEquals('a', actual.REQ_SEGMENT);
        system.assertEquals('a', actual.STK_SEGMENT);
        system.assertEquals('a', actual.SF_TXJCD);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.MATERIAL_LONG);
        system.assertEquals('a', actual.EMATERIAL_LONG);
        system.assertEquals('a', actual.SERVICEPERFORMER);
        system.assertEquals('a', actual.PRODUCTTYPE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.STARTDATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ENDDATE);
        system.assertEquals('a', actual.REQ_SEG_LONG);
        system.assertEquals('a', actual.STK_SEG_LONG);
        system.assertEquals(0, actual.EXPECTED_VALUE);
        system.assertEquals(0, actual.LIMIT_AMOUNT);
        system.assertEquals('a', actual.EXT_REF);
        system.assertEquals('a', actual.GL_ACCOUNT);
        system.assertEquals('a', actual.COSTCENTER);
        system.assertEquals('a', actual.WBS_ELEMENT);
        system.assertEquals('a', actual.COMMODITY_CODE);
        system.assertEquals('a', actual.INTRASTAT_SERVICE_CODE);
        system.assertEquals('a', actual.CONTRACT_FOR_LIMIT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.TAXCALCDATE);
        system.assertEquals('a', actual.TAXCOUNTRY);

        PurchaseOrderChangeRT.POITEM actual0 = new PurchaseOrderChangeRT.POITEM();
    }
    @istest
    private static void testPOITEMX() {
        PurchaseOrderChangeRT.POITEMX actual = new PurchaseOrderChangeRT.POITEMX('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        actual.PRNT_PRICE = 'a';
        actual.EST_PRICE = 'a';
        actual.REMINDER1 = 'a';
        actual.REMINDER2 = 'a';
        actual.REMINDER3 = 'a';
        actual.OVER_DLV_TOL = 'a';
        actual.UNLIMITED_DLV = 'a';
        actual.UNDER_DLV_TOL = 'a';
        actual.VAL_TYPE = 'a';
        actual.NO_MORE_GR = 'a';
        actual.FINAL_INV = 'a';
        actual.ITEM_CAT = 'a';
        actual.ACCTASSCAT = 'a';
        actual.DISTRIB = 'a';
        actual.PART_INV = 'a';
        actual.GR_IND = 'a';
        actual.GR_NON_VAL = 'a';
        actual.IR_IND = 'a';
        actual.FREE_ITEM = 'a';
        actual.GR_BASEDIV = 'a';
        actual.ACKN_REQD = 'a';
        actual.ACKNOWL_NO = 'a';
        actual.AGREEMENT = 'a';
        actual.AGMT_ITEM = 'a';
        actual.SHIPPING = 'a';
        actual.CUSTOMER = 'a';
        actual.COND_GROUP = 'a';
        actual.NO_DISCT = 'a';
        actual.PLAN_DEL = 'a';
        actual.NET_WEIGHT = 'a';
        actual.WEIGHTUNIT = 'a';
        actual.WEIGHTUNIT_ISO = 'a';
        actual.TAXJURCODE = 'a';
        actual.CTRL_KEY = 'a';
        actual.CONF_CTRL = 'a';
        actual.REV_LEV = 'a';
        actual.FUND = 'a';
        actual.FUNDS_CTR = 'a';
        actual.CMMT_ITEM = 'a';
        actual.PRICEDATE = 'a';
        actual.PRICE_DATE = 'a';
        actual.GROSS_WT = 'a';
        actual.VOLUME = 'a';
        actual.VOLUMEUNIT = 'a';
        actual.VOLUMEUNIT_ISO = 'a';
        actual.INCOTERMS1 = 'a';
        actual.INCOTERMS2 = 'a';
        actual.PRE_VENDOR = 'a';
        actual.VEND_PART = 'a';
        actual.HL_ITEM = 'a';
        actual.GR_TO_DATE = 'a';
        actual.SUPP_VENDOR = 'a';
        actual.SC_VENDOR = 'a';
        actual.KANBAN_IND = 'a';
        actual.ERS = 'a';
        actual.R_PROMO = 'a';
        actual.POINTS = 'a';
        actual.POINT_UNIT = 'a';
        actual.POINT_UNIT_ISO = 'a';
        actual.SEASON = 'a';
        actual.SEASON_YR = 'a';
        actual.BON_GRP2 = 'a';
        actual.BON_GRP3 = 'a';
        actual.SETT_ITEM = 'a';
        actual.MINREMLIFE = 'a';
        actual.RFQ_NO = 'a';
        actual.RFQ_ITEM = 'a';
        actual.PREQ_NO = 'a';
        actual.PREQ_ITEM = 'a';
        actual.REF_DOC = 'a';
        actual.REF_ITEM = 'a';
        actual.SI_CAT = 'a';
        actual.RET_ITEM = 'a';
        actual.AT_RELEV = 'a';
        actual.ORDER_REASON = 'a';
        actual.BRAS_NBM = 'a';
        actual.MATL_USAGE = 'a';
        actual.MAT_ORIGIN = 'a';
        actual.IN_HOUSE = 'a';
        actual.INDUS3 = 'a';
        actual.INF_INDEX = 'a';
        actual.UNTIL_DATE = 'a';
        actual.DELIV_COMPL = 'a';
        actual.PART_DELIV = 'a';
        actual.SHIP_BLOCKED = 'a';
        actual.PREQ_NAME = 'a';
        actual.PERIOD_IND_EXPIRATION_DATE = 'a';
        actual.INT_OBJ_NO = 'a';
        actual.PCKG_NO = 'a';
        actual.BATCH = 'a';
        actual.VENDRBATCH = 'a';
        actual.CALCTYPE = 'a';
        actual.NO_ROUNDING = 'a';
        actual.PO_PRICE = 'a';
        actual.SUPPL_STLOC = 'a';
        actual.SRV_BASED_IV = 'a';
        actual.FUNDS_RES = 'a';
        actual.RES_ITEM = 'a';
        actual.GRANT_NBR = 'a';
        actual.FUNC_AREA_LONG = 'a';
        actual.ORIG_ACCEPT = 'a';
        actual.ALLOC_TBL = 'a';
        actual.ALLOC_TBL_ITEM = 'a';
        actual.SRC_STOCK_TYPE = 'a';
        actual.REASON_REJ = 'a';
        actual.CRM_SALES_ORDER_NO = 'a';
        actual.CRM_SALES_ORDER_ITEM_NO = 'a';
        actual.CRM_REF_SALES_ORDER_NO = 'a';
        actual.CRM_REF_SO_ITEM_NO = 'a';
        actual.PRIO_URGENCY = 'a';
        actual.PRIO_REQUIREMENT = 'a';
        actual.REASON_CODE = 'a';
        actual.LONG_ITEM_NUMBER = 'a';
        actual.EXTERNAL_SORT_NUMBER = 'a';
        actual.EXTERNAL_HIERARCHY_TYPE = 'a';
        actual.RETENTION_PERCENTAGE = 'a';
        actual.DOWNPAY_TYPE = 'a';
        actual.DOWNPAY_AMOUNT = 'a';
        actual.DOWNPAY_PERCENT = 'a';
        actual.DOWNPAY_DUEDATE = 'a';
        actual.EXT_RFX_NUMBER = 'a';
        actual.EXT_RFX_ITEM = 'a';
        actual.EXT_RFX_SYSTEM = 'a';
        actual.SRM_CONTRACT_ID = 'a';
        actual.SRM_CONTRACT_ITM = 'a';
        actual.BUDGET_PERIOD = 'a';
        actual.BLOCK_REASON_ID = 'a';
        actual.BLOCK_REASON_TEXT = 'a';
        actual.SPE_CRM_FKREL = 'a';
        actual.DATE_QTY_FIXED = 'a';
        actual.GI_BASED_GR = 'a';
        actual.SHIPTYPE = 'a';
        actual.HANDOVERLOC = 'a';
        actual.TC_AUT_DET = 'a';
        actual.MANUAL_TC_REASON = 'a';
        actual.FISCAL_INCENTIVE = 'a';
        actual.FISCAL_INCENTIVE_ID = 'a';
        actual.TAX_SUBJECT_ST = 'a';
        actual.REQ_SEGMENT = 'a';
        actual.STK_SEGMENT = 'a';
        actual.SF_TXJCD = 'a';
        actual.INCOTERMS2L = 'a';
        actual.INCOTERMS3L = 'a';
        actual.MATERIAL_LONG = 'a';
        actual.EMATERIAL_LONG = 'a';
        actual.SERVICEPERFORMER = 'a';
        actual.PRODUCTTYPE = 'a';
        actual.STARTDATE = 'a';
        actual.ENDDATE = 'a';
        actual.REQ_SEG_LONG = 'a';
        actual.STK_SEG_LONG = 'a';
        actual.EXPECTED_VALUE = 'a';
        actual.LIMIT_AMOUNT = 'a';
        actual.EXT_REF = 'a';
        actual.GL_ACCOUNT = 'a';
        actual.COSTCENTER = 'a';
        actual.WBS_ELEMENT = 'a';
        actual.COMMODITY_CODE = 'a';
        actual.INTRASTAT_SERVICE_CODE = 'a';
        actual.CONTRACT_FOR_LIMIT = 'a';
        actual.TAXCALCDATE = 'a';
        actual.TAXCOUNTRY = 'a';
        system.assertEquals('a', actual.PO_ITEM);
        system.assertEquals('a', actual.PO_ITEMX);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.SHORT_TEXT);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.MATERIAL_EXTERNAL);
        system.assertEquals('a', actual.MATERIAL_GUID);
        system.assertEquals('a', actual.MATERIAL_VERSION);
        system.assertEquals('a', actual.EMATERIAL);
        system.assertEquals('a', actual.EMATERIAL_EXTERNAL);
        system.assertEquals('a', actual.EMATERIAL_GUID);
        system.assertEquals('a', actual.EMATERIAL_VERSION);
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.STGE_LOC);
        system.assertEquals('a', actual.TRACKINGNO);
        system.assertEquals('a', actual.MATL_GROUP);
        system.assertEquals('a', actual.INFO_REC);
        system.assertEquals('a', actual.VEND_MAT);
        system.assertEquals('a', actual.QUANTITY);
        system.assertEquals('a', actual.PO_UNIT);
        system.assertEquals('a', actual.PO_UNIT_ISO);
        system.assertEquals('a', actual.ORDERPR_UN);
        system.assertEquals('a', actual.ORDERPR_UN_ISO);
        system.assertEquals('a', actual.CONV_NUM1);
        system.assertEquals('a', actual.CONV_DEN1);
        system.assertEquals('a', actual.NET_PRICE);
        system.assertEquals('a', actual.PRICE_UNIT);
        system.assertEquals('a', actual.GR_PR_TIME);
        system.assertEquals('a', actual.TAX_CODE);
        system.assertEquals('a', actual.BON_GRP1);
        system.assertEquals('a', actual.QUAL_INSP);
        system.assertEquals('a', actual.INFO_UPD);
        system.assertEquals('a', actual.PRNT_PRICE);
        system.assertEquals('a', actual.EST_PRICE);
        system.assertEquals('a', actual.REMINDER1);
        system.assertEquals('a', actual.REMINDER2);
        system.assertEquals('a', actual.REMINDER3);
        system.assertEquals('a', actual.OVER_DLV_TOL);
        system.assertEquals('a', actual.UNLIMITED_DLV);
        system.assertEquals('a', actual.UNDER_DLV_TOL);
        system.assertEquals('a', actual.VAL_TYPE);
        system.assertEquals('a', actual.NO_MORE_GR);
        system.assertEquals('a', actual.FINAL_INV);
        system.assertEquals('a', actual.ITEM_CAT);
        system.assertEquals('a', actual.ACCTASSCAT);
        system.assertEquals('a', actual.DISTRIB);
        system.assertEquals('a', actual.PART_INV);
        system.assertEquals('a', actual.GR_IND);
        system.assertEquals('a', actual.GR_NON_VAL);
        system.assertEquals('a', actual.IR_IND);
        system.assertEquals('a', actual.FREE_ITEM);
        system.assertEquals('a', actual.GR_BASEDIV);
        system.assertEquals('a', actual.ACKN_REQD);
        system.assertEquals('a', actual.ACKNOWL_NO);
        system.assertEquals('a', actual.AGREEMENT);
        system.assertEquals('a', actual.AGMT_ITEM);
        system.assertEquals('a', actual.SHIPPING);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.COND_GROUP);
        system.assertEquals('a', actual.NO_DISCT);
        system.assertEquals('a', actual.PLAN_DEL);
        system.assertEquals('a', actual.NET_WEIGHT);
        system.assertEquals('a', actual.WEIGHTUNIT);
        system.assertEquals('a', actual.WEIGHTUNIT_ISO);
        system.assertEquals('a', actual.TAXJURCODE);
        system.assertEquals('a', actual.CTRL_KEY);
        system.assertEquals('a', actual.CONF_CTRL);
        system.assertEquals('a', actual.REV_LEV);
        system.assertEquals('a', actual.FUND);
        system.assertEquals('a', actual.FUNDS_CTR);
        system.assertEquals('a', actual.CMMT_ITEM);
        system.assertEquals('a', actual.PRICEDATE);
        system.assertEquals('a', actual.PRICE_DATE);
        system.assertEquals('a', actual.GROSS_WT);
        system.assertEquals('a', actual.VOLUME);
        system.assertEquals('a', actual.VOLUMEUNIT);
        system.assertEquals('a', actual.VOLUMEUNIT_ISO);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.PRE_VENDOR);
        system.assertEquals('a', actual.VEND_PART);
        system.assertEquals('a', actual.HL_ITEM);
        system.assertEquals('a', actual.GR_TO_DATE);
        system.assertEquals('a', actual.SUPP_VENDOR);
        system.assertEquals('a', actual.SC_VENDOR);
        system.assertEquals('a', actual.KANBAN_IND);
        system.assertEquals('a', actual.ERS);
        system.assertEquals('a', actual.R_PROMO);
        system.assertEquals('a', actual.POINTS);
        system.assertEquals('a', actual.POINT_UNIT);
        system.assertEquals('a', actual.POINT_UNIT_ISO);
        system.assertEquals('a', actual.SEASON);
        system.assertEquals('a', actual.SEASON_YR);
        system.assertEquals('a', actual.BON_GRP2);
        system.assertEquals('a', actual.BON_GRP3);
        system.assertEquals('a', actual.SETT_ITEM);
        system.assertEquals('a', actual.MINREMLIFE);
        system.assertEquals('a', actual.RFQ_NO);
        system.assertEquals('a', actual.RFQ_ITEM);
        system.assertEquals('a', actual.PREQ_NO);
        system.assertEquals('a', actual.PREQ_ITEM);
        system.assertEquals('a', actual.REF_DOC);
        system.assertEquals('a', actual.REF_ITEM);
        system.assertEquals('a', actual.SI_CAT);
        system.assertEquals('a', actual.RET_ITEM);
        system.assertEquals('a', actual.AT_RELEV);
        system.assertEquals('a', actual.ORDER_REASON);
        system.assertEquals('a', actual.BRAS_NBM);
        system.assertEquals('a', actual.MATL_USAGE);
        system.assertEquals('a', actual.MAT_ORIGIN);
        system.assertEquals('a', actual.IN_HOUSE);
        system.assertEquals('a', actual.INDUS3);
        system.assertEquals('a', actual.INF_INDEX);
        system.assertEquals('a', actual.UNTIL_DATE);
        system.assertEquals('a', actual.DELIV_COMPL);
        system.assertEquals('a', actual.PART_DELIV);
        system.assertEquals('a', actual.SHIP_BLOCKED);
        system.assertEquals('a', actual.PREQ_NAME);
        system.assertEquals('a', actual.PERIOD_IND_EXPIRATION_DATE);
        system.assertEquals('a', actual.INT_OBJ_NO);
        system.assertEquals('a', actual.PCKG_NO);
        system.assertEquals('a', actual.BATCH);
        system.assertEquals('a', actual.VENDRBATCH);
        system.assertEquals('a', actual.CALCTYPE);
        system.assertEquals('a', actual.NO_ROUNDING);
        system.assertEquals('a', actual.PO_PRICE);
        system.assertEquals('a', actual.SUPPL_STLOC);
        system.assertEquals('a', actual.SRV_BASED_IV);
        system.assertEquals('a', actual.FUNDS_RES);
        system.assertEquals('a', actual.RES_ITEM);
        system.assertEquals('a', actual.GRANT_NBR);
        system.assertEquals('a', actual.FUNC_AREA_LONG);
        system.assertEquals('a', actual.ORIG_ACCEPT);
        system.assertEquals('a', actual.ALLOC_TBL);
        system.assertEquals('a', actual.ALLOC_TBL_ITEM);
        system.assertEquals('a', actual.SRC_STOCK_TYPE);
        system.assertEquals('a', actual.REASON_REJ);
        system.assertEquals('a', actual.CRM_SALES_ORDER_NO);
        system.assertEquals('a', actual.CRM_SALES_ORDER_ITEM_NO);
        system.assertEquals('a', actual.CRM_REF_SALES_ORDER_NO);
        system.assertEquals('a', actual.CRM_REF_SO_ITEM_NO);
        system.assertEquals('a', actual.PRIO_URGENCY);
        system.assertEquals('a', actual.PRIO_REQUIREMENT);
        system.assertEquals('a', actual.REASON_CODE);
        system.assertEquals('a', actual.LONG_ITEM_NUMBER);
        system.assertEquals('a', actual.EXTERNAL_SORT_NUMBER);
        system.assertEquals('a', actual.EXTERNAL_HIERARCHY_TYPE);
        system.assertEquals('a', actual.RETENTION_PERCENTAGE);
        system.assertEquals('a', actual.DOWNPAY_TYPE);
        system.assertEquals('a', actual.DOWNPAY_AMOUNT);
        system.assertEquals('a', actual.DOWNPAY_PERCENT);
        system.assertEquals('a', actual.DOWNPAY_DUEDATE);
        system.assertEquals('a', actual.EXT_RFX_NUMBER);
        system.assertEquals('a', actual.EXT_RFX_ITEM);
        system.assertEquals('a', actual.EXT_RFX_SYSTEM);
        system.assertEquals('a', actual.SRM_CONTRACT_ID);
        system.assertEquals('a', actual.SRM_CONTRACT_ITM);
        system.assertEquals('a', actual.BUDGET_PERIOD);
        system.assertEquals('a', actual.BLOCK_REASON_ID);
        system.assertEquals('a', actual.BLOCK_REASON_TEXT);
        system.assertEquals('a', actual.SPE_CRM_FKREL);
        system.assertEquals('a', actual.DATE_QTY_FIXED);
        system.assertEquals('a', actual.GI_BASED_GR);
        system.assertEquals('a', actual.SHIPTYPE);
        system.assertEquals('a', actual.HANDOVERLOC);
        system.assertEquals('a', actual.TC_AUT_DET);
        system.assertEquals('a', actual.MANUAL_TC_REASON);
        system.assertEquals('a', actual.FISCAL_INCENTIVE);
        system.assertEquals('a', actual.FISCAL_INCENTIVE_ID);
        system.assertEquals('a', actual.TAX_SUBJECT_ST);
        system.assertEquals('a', actual.REQ_SEGMENT);
        system.assertEquals('a', actual.STK_SEGMENT);
        system.assertEquals('a', actual.SF_TXJCD);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.MATERIAL_LONG);
        system.assertEquals('a', actual.EMATERIAL_LONG);
        system.assertEquals('a', actual.SERVICEPERFORMER);
        system.assertEquals('a', actual.PRODUCTTYPE);
        system.assertEquals('a', actual.STARTDATE);
        system.assertEquals('a', actual.ENDDATE);
        system.assertEquals('a', actual.REQ_SEG_LONG);
        system.assertEquals('a', actual.STK_SEG_LONG);
        system.assertEquals('a', actual.EXPECTED_VALUE);
        system.assertEquals('a', actual.LIMIT_AMOUNT);
        system.assertEquals('a', actual.EXT_REF);
        system.assertEquals('a', actual.GL_ACCOUNT);
        system.assertEquals('a', actual.COSTCENTER);
        system.assertEquals('a', actual.WBS_ELEMENT);
        system.assertEquals('a', actual.COMMODITY_CODE);
        system.assertEquals('a', actual.INTRASTAT_SERVICE_CODE);
        system.assertEquals('a', actual.CONTRACT_FOR_LIMIT);
        system.assertEquals('a', actual.TAXCALCDATE);
        system.assertEquals('a', actual.TAXCOUNTRY);

        PurchaseOrderChangeRT.POITEMX actual0 = new PurchaseOrderChangeRT.POITEMX();
    }
    @istest
    private static void testPOSCHEDULE() {
        PurchaseOrderChangeRT.POSCHEDULE actual = new PurchaseOrderChangeRT.POSCHEDULE('a','a','a','a',0,'a',Date.newInstance(2000,1,1),'a','a',Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a','a','a',Date.newInstance(2000,1,1),'a',0,Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a');

        system.assertEquals('a', actual.PO_ITEM);
        system.assertEquals('a', actual.SCHED_LINE);
        system.assertEquals('a', actual.DEL_DATCAT_EXT);
        system.assertEquals('a', actual.DELIVERY_DATE);
        system.assertEquals(0, actual.QUANTITY);
        system.assertEquals('a', actual.DELIV_TIME);
        system.assertEquals(Date.newInstance(2000,1,1), actual.STAT_DATE);
        system.assertEquals('a', actual.PREQ_NO);
        system.assertEquals('a', actual.PREQ_ITEM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.PO_DATE);
        system.assertEquals('a', actual.ROUTESCHED);
        system.assertEquals(Date.newInstance(2000,1,1), actual.MS_DATE);
        system.assertEquals('a', actual.MS_TIME);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LOAD_DATE);
        system.assertEquals('a', actual.LOAD_TIME);
        system.assertEquals(Date.newInstance(2000,1,1), actual.TP_DATE);
        system.assertEquals('a', actual.TP_TIME);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GI_DATE);
        system.assertEquals('a', actual.GI_TIME);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.REQ_CLOSED);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GR_END_DATE);
        system.assertEquals('a', actual.GR_END_TIME);
        system.assertEquals(0, actual.COM_QTY);
        system.assertEquals(Date.newInstance(2000,1,1), actual.COM_DATE);
        system.assertEquals('a', actual.GEO_ROUTE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.HANDOVERDATE);
        system.assertEquals('a', actual.HANDOVERTIME);

        PurchaseOrderChangeRT.POSCHEDULE actual0 = new PurchaseOrderChangeRT.POSCHEDULE();
    }
    @istest
    private static void testPOSCHEDULEX() {
        PurchaseOrderChangeRT.POSCHEDULEX actual = new PurchaseOrderChangeRT.POSCHEDULEX('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.PO_ITEM);
        system.assertEquals('a', actual.SCHED_LINE);
        system.assertEquals('a', actual.PO_ITEMX);
        system.assertEquals('a', actual.SCHED_LINEX);
        system.assertEquals('a', actual.DEL_DATCAT_EXT);
        system.assertEquals('a', actual.DELIVERY_DATE);
        system.assertEquals('a', actual.QUANTITY);
        system.assertEquals('a', actual.DELIV_TIME);
        system.assertEquals('a', actual.STAT_DATE);
        system.assertEquals('a', actual.PREQ_NO);
        system.assertEquals('a', actual.PREQ_ITEM);
        system.assertEquals('a', actual.PO_DATE);
        system.assertEquals('a', actual.ROUTESCHED);
        system.assertEquals('a', actual.MS_DATE);
        system.assertEquals('a', actual.MS_TIME);
        system.assertEquals('a', actual.LOAD_DATE);
        system.assertEquals('a', actual.LOAD_TIME);
        system.assertEquals('a', actual.TP_DATE);
        system.assertEquals('a', actual.TP_TIME);
        system.assertEquals('a', actual.GI_DATE);
        system.assertEquals('a', actual.GI_TIME);
        system.assertEquals('a', actual.DELETE_IND);
        system.assertEquals('a', actual.REQ_CLOSED);
        system.assertEquals('a', actual.GR_END_DATE);
        system.assertEquals('a', actual.GR_END_TIME);
        system.assertEquals('a', actual.COM_QTY);
        system.assertEquals('a', actual.COM_DATE);
        system.assertEquals('a', actual.GEO_ROUTE);
        system.assertEquals('a', actual.HANDOVERDATE);
        system.assertEquals('a', actual.HANDOVERTIME);

        PurchaseOrderChangeRT.POSCHEDULEX actual0 = new PurchaseOrderChangeRT.POSCHEDULEX();
    }
    @istest
    private static void testRETURN_x() {
        PurchaseOrderChangeRT.RETURN_x actual = new PurchaseOrderChangeRT.RETURN_x('a','a','a','a','a','a','a','a','a','a','a',0,'a','a');

        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);

        PurchaseOrderChangeRT.RETURN_x actual0 = new PurchaseOrderChangeRT.RETURN_x();
    }

    @istest
    private static void testRun() {
        PurchaseOrderChangeRT request = testSetup();
        PurchaseOrderChangeRT response = request.run();
        system.assertEquals('a', response.BAPI_PO_CHANGE.MEMORY_COMPLETE);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static PurchaseOrderChangeRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('PurchaseOrderChangeRT');
        PurchaseOrderChangeRT request = new PurchaseOrderChangeRT();
        request.BAPI_PO_CHANGE.MEMORY_COMPLETE = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        PurchaseOrderChangeRT input = new PurchaseOrderChangeRT();
        input.BAPI_PO_CHANGE.MEMORY_COMPLETE = 'a';
        PurchaseOrderChangeRT actual = (PurchaseOrderChangeRT)JSON.deserialize(input.serialize(), PurchaseOrderChangeRT.class);
        system.assertEquals('a', actual.BAPI_PO_CHANGE.MEMORY_COMPLETE);
    }

    @istest
    private static void testDeserialize() {
        PurchaseOrderChangeRT output = new PurchaseOrderChangeRT();
        output.BAPI_PO_CHANGE.MEMORY_COMPLETE = 'a';

        string s = output.serialize();
        PurchaseOrderChangeRT actual = PurchaseOrderChangeRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_PO_CHANGE.MEMORY_COMPLETE);
    }

    @istest
    private static void testDeserializeError() {
        try {
            PurchaseOrderChangeRT actual = PurchaseOrderChangeRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (PurchaseOrderChangeRT.PurchaseOrderChangeRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        PurchaseOrderChangeRT output = new PurchaseOrderChangeRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        PurchaseOrderChangeRT output = new PurchaseOrderChangeRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        PurchaseOrderChangeRT output2 = new PurchaseOrderChangeRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        PurchaseOrderChangeRT output = new PurchaseOrderChangeRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_PO_CHANGE'));
        system.assert(keys.contains('EXPHEADER'));
        system.assert(keys.contains('POHEADER'));
        system.assert(keys.contains('POHEADERX'));
        system.assert(keys.contains('POADDRDELIVERY'));
        system.assert(keys.contains('POITEM'));
        system.assert(keys.contains('POITEMX'));
        system.assert(keys.contains('POSCHEDULE'));
        system.assert(keys.contains('POSCHEDULEX'));
        system.assert(keys.contains('RETURN_x'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_PO_CHANGE', first.name);
    }

}