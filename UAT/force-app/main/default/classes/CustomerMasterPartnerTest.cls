/* 
 * Generated by Overcast UTC 2022-01-14 01:10:52Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class CustomerMasterPartnerTest {
    @istest
    private static void testCustomerMasterPartner() {
        CustomerMasterPartner actual = new CustomerMasterPartner();
        system.assertNotEquals(null, actual.KNVP);
    }

    @istest
    private static void testKNVP() {
        CustomerMasterPartnerKNVP actual = new CustomerMasterPartnerKNVP();

        actual.MANDT = 'a';
        actual.KUNNR = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.PARVW = 'a';
        actual.PARZA = 'a';
        actual.KUNN2 = 'a';
        actual.LIFNR = 'a';
        actual.PERNR = 'a';
        actual.PARNR = 'a';
        actual.KNREF = 'a';
        actual.DEFPA = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.PARVW);
        system.assertEquals('a', actual.PARZA);
        system.assertEquals('a', actual.KUNN2);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.PERNR);
        system.assertEquals('a', actual.PARNR);
        system.assertEquals('a', actual.KNREF);
        system.assertEquals('a', actual.DEFPA);
    }
    @istest
    private static void testrunQuery() {
        CustomerMasterPartner request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        CustomerMasterPartner response = request.runQuery(query1);
        system.assertEquals('a', response.KNVP[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static CustomerMasterPartner testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('CustomerMasterPartner');
        CustomerMasterPartner request = new CustomerMasterPartner();
        CustomerMasterPartnerKNVP value1 = new CustomerMasterPartnerKNVP();
        value1.MANDT = 'a';
        request.KNVP.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        CustomerMasterPartner input = new CustomerMasterPartner();
        CustomerMasterPartnerKNVP value1 = new CustomerMasterPartnerKNVP();
        value1.MANDT = 'a';
        input.KNVP.add(value1);
        CustomerMasterPartner actual = (CustomerMasterPartner)JSON.deserialize(input.serialize(), CustomerMasterPartner.class);
        system.assertEquals('a', actual.KNVP[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        CustomerMasterPartner output = new CustomerMasterPartner();
        CustomerMasterPartnerKNVP value1 = new CustomerMasterPartnerKNVP();
        value1.MANDT = 'a';
        output.KNVP.add(value1);

        string s = output.serialize();
        CustomerMasterPartner actual = CustomerMasterPartner.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.KNVP[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            CustomerMasterPartner actual = CustomerMasterPartner.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (CustomerMasterPartner.CustomerMasterPartnerException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        CustomerMasterPartner output = new CustomerMasterPartner();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        CustomerMasterPartner output = new CustomerMasterPartner();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        CustomerMasterPartner output2 = new CustomerMasterPartner();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        CustomerMasterPartner output = new CustomerMasterPartner();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('KNVP'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('KNVP', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('CustomerMasterPartner');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        CustomerMasterPartner.Parameters params = new CustomerMasterPartner.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new CustomerMasterPartner()) + '}';
        List<CustomerMasterPartner.Parameters> paramList = new List<CustomerMasterPartner.Parameters>{ params };

        Test.startTest();
        List<CustomerMasterPartner.Result> results = CustomerMasterPartner.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}