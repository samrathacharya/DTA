/* 
 * Generated by Overcast UTC 2022-02-03 00:45:02Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class sapInvoiceDetailTest {
    @istest
    private static void testsapInvoiceDetail() {
        sapInvoiceDetail actual = new sapInvoiceDetail();
        system.assertNotEquals(null, actual.BAPI_WEBINVOICE_GETDETAIL);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.WEBINVOICEDOCUMENT);
        system.assertNotEquals(null, actual.WEBINVOICEITEMS);
        system.assertNotEquals(null, actual.WEBINVOICEPARTNERS);
    }

    @istest
    private static void testBAPI_WEBINVOICE_GETDETAIL() {
        sapInvoiceDetail.BAPI_WEBINVOICE_GETDETAIL actual = new sapInvoiceDetail.BAPI_WEBINVOICE_GETDETAIL('a','a','a','a');

        system.assertEquals('a', actual.BILLINGDOC);
        system.assertEquals('a', actual.LANGU);
        system.assertEquals('a', actual.PARTNER_NUMBER);
        system.assertEquals('a', actual.PARTNER_ROLE);

        sapInvoiceDetail.BAPI_WEBINVOICE_GETDETAIL actual0 = new sapInvoiceDetail.BAPI_WEBINVOICE_GETDETAIL();
    }
    @istest
    private static void testRETURN_x() {
        sapInvoiceDetail.RETURN_x actual = new sapInvoiceDetail.RETURN_x('a','a','a','a','a','a','a','a','a','a','a',0,'a','a');

        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);

        sapInvoiceDetail.RETURN_x actual0 = new sapInvoiceDetail.RETURN_x();
    }
    @istest
    private static void testWEBINVOICEDOCUMENT() {
        sapInvoiceDetail.WEBINVOICEDOCUMENT actual = new sapInvoiceDetail.WEBINVOICEDOCUMENT('a','a','a','a','a','a','a','a','a',0,'a','a',0,'a',Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),0,0,'a','a','a');

        actual.SD_DOC_CAT_LONG = 'a';
        actual.INCOTERMSV_TEXT = 'a';
        system.assertEquals('a', actual.BILLINGDOC);
        system.assertEquals('a', actual.BILL_TYPE);
        system.assertEquals('a', actual.BILL_TYPE_TEXT);
        system.assertEquals('a', actual.BILLCATEG);
        system.assertEquals('a', actual.BILLCATEG_TEXT);
        system.assertEquals('a', actual.SD_DOC_CAT);
        system.assertEquals('a', actual.SD_DOC_CAT_TEXT);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.CURRENCY_ISO);
        system.assertEquals(0, actual.NET_VALUE);
        system.assertEquals('a', actual.SOLD_TO);
        system.assertEquals('a', actual.PAYER);
        system.assertEquals(0, actual.TAX_AMOUNT);
        system.assertEquals('a', actual.CANCELLED);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BILL_DATE);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS1_TEXT);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.PMNTTRMS);
        system.assertEquals('a', actual.PMNTTRMS_TEXT);
        system.assertEquals('a', actual.COMP_CODE);
        system.assertEquals('a', actual.COMP_NAME);
        system.assertEquals('a', actual.REFERENCE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BLINE_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DSCT_DATE1);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DSCT_DATE2);
        system.assertEquals(Date.newInstance(2000,1,1), actual.NET_DATE);
        system.assertEquals(0, actual.DSCT_PCT1);
        system.assertEquals(0, actual.DSCT_PCT2);
        system.assertEquals('a', actual.INCOTERMSV);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.SD_DOC_CAT_LONG);
        system.assertEquals('a', actual.INCOTERMSV_TEXT);

        sapInvoiceDetail.WEBINVOICEDOCUMENT actual0 = new sapInvoiceDetail.WEBINVOICEDOCUMENT();
    }
    @istest
    private static void testWEBINVOICEITEMS() {
        sapInvoiceDetail.WEBINVOICEITEMS actual = new sapInvoiceDetail.WEBINVOICEITEMS('a','a','a',0,'a','a',0,'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',0,'a','a','a',0);

        actual.ITEM_TEXT = 'a';
        actual.BRVAL_INV = 0;
        actual.STVAL_INV = 0;
        actual.COND_SUBTOTAL1 = 0;
        actual.COND_SUBTOTAL2 = 0;
        actual.COND_SUBTOTAL3 = 0;
        actual.COND_SUBTOTAL4 = 0;
        actual.COND_SUBTOTAL5 = 0;
        actual.COND_SUBTOTAL6 = 0;
        actual.REF_DOC_CAT_LONG = 'a';
        actual.SD_DOC_CAT_LONG = 'a';
        actual.MATERIAL_LONG = 'a';
        system.assertEquals('a', actual.BILLINGDOC);
        system.assertEquals('a', actual.ITEM_NUMBER);
        system.assertEquals('a', actual.HG_LV_ITEM);
        system.assertEquals(0, actual.INV_QTY);
        system.assertEquals('a', actual.SALES_UNIT);
        system.assertEquals('a', actual.SALES_UNIT_ISO);
        system.assertEquals(0, actual.NETVAL_INV);
        system.assertEquals('a', actual.REF_DOC_NUMBER);
        system.assertEquals('a', actual.REF_DOC_ITEM);
        system.assertEquals('a', actual.REF_DOC_CAT);
        system.assertEquals('a', actual.REF_DOC_CAT_TEXT);
        system.assertEquals('a', actual.SD_DOC_NUMBER);
        system.assertEquals('a', actual.SD_DOC_ITEM);
        system.assertEquals('a', actual.SD_DOC_REF);
        system.assertEquals('a', actual.SD_DOC_CAT);
        system.assertEquals('a', actual.SD_DOC_CAT_TEXT);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.SHORT_TEXT);
        system.assertEquals('a', actual.ITEM_TYPE);
        system.assertEquals('a', actual.ITEM_TYPE_TEXT);
        system.assertEquals('a', actual.ITEM_CATEG);
        system.assertEquals('a', actual.ITEM_CATEG_TEXT);
        system.assertEquals('a', actual.DIVISION);
        system.assertEquals('a', actual.DIVISION_TEXT);
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.PLANT_NAME);
        system.assertEquals('a', actual.CASH_DISC);
        system.assertEquals(0, actual.CSHDISCBAS);
        system.assertEquals('a', actual.RETURNS);
        system.assertEquals('a', actual.EAN_UPC);
        system.assertEquals('a', actual.TAXJURCODE);
        system.assertEquals(0, actual.TAX_AMOUNT);
        system.assertEquals('a', actual.ITEM_TEXT);
        system.assertEquals(0, actual.BRVAL_INV);
        system.assertEquals(0, actual.STVAL_INV);
        system.assertEquals(0, actual.COND_SUBTOTAL1);
        system.assertEquals(0, actual.COND_SUBTOTAL2);
        system.assertEquals(0, actual.COND_SUBTOTAL3);
        system.assertEquals(0, actual.COND_SUBTOTAL4);
        system.assertEquals(0, actual.COND_SUBTOTAL5);
        system.assertEquals(0, actual.COND_SUBTOTAL6);
        system.assertEquals('a', actual.REF_DOC_CAT_LONG);
        system.assertEquals('a', actual.SD_DOC_CAT_LONG);
        system.assertEquals('a', actual.MATERIAL_LONG);

        sapInvoiceDetail.WEBINVOICEITEMS actual0 = new sapInvoiceDetail.WEBINVOICEITEMS();
    }
    @istest
    private static void testWEBINVOICEPARTNERS() {
        sapInvoiceDetail.WEBINVOICEPARTNERS actual = new sapInvoiceDetail.WEBINVOICEPARTNERS('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        actual.GENDER = 'a';
        actual.GENDER_TEXT = 'a';
        actual.NAME_LIST = 'a';
        system.assertEquals('a', actual.PARTN_ROLE);
        system.assertEquals('a', actual.PARTN_ROLE_TEXT);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.FORMOFADDR);
        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.NAME_2);
        system.assertEquals('a', actual.NAME_3);
        system.assertEquals('a', actual.NAME_4);
        system.assertEquals('a', actual.STREET);
        system.assertEquals('a', actual.COUNTRY);
        system.assertEquals('a', actual.COUNTRY_ISO);
        system.assertEquals('a', actual.POSTL_CODE);
        system.assertEquals('a', actual.POBX_PCD);
        system.assertEquals('a', actual.POBX_CTY);
        system.assertEquals('a', actual.CITY);
        system.assertEquals('a', actual.DISTRICT);
        system.assertEquals('a', actual.REGION);
        system.assertEquals('a', actual.REGION_TEXT);
        system.assertEquals('a', actual.CITY_CODE);
        system.assertEquals('a', actual.CITY_CODE_TEXT);
        system.assertEquals('a', actual.COUNTRY_CDE);
        system.assertEquals('a', actual.COUNTRY_CDE_TEXT);
        system.assertEquals('a', actual.PO_BOX);
        system.assertEquals('a', actual.TELEPHONE);
        system.assertEquals('a', actual.TELEPHONE2);
        system.assertEquals('a', actual.TELEBOX);
        system.assertEquals('a', actual.FAX_NUMBER);
        system.assertEquals('a', actual.TELETEX);
        system.assertEquals('a', actual.TELEX);
        system.assertEquals('a', actual.TRANSPZONE);
        system.assertEquals('a', actual.TRANSPZONE_TEXT);
        system.assertEquals('a', actual.HOUSE_NO);
        system.assertEquals('a', actual.GENDER);
        system.assertEquals('a', actual.GENDER_TEXT);
        system.assertEquals('a', actual.NAME_LIST);

        sapInvoiceDetail.WEBINVOICEPARTNERS actual0 = new sapInvoiceDetail.WEBINVOICEPARTNERS();
    }

    @istest
    private static void testRun() {
        sapInvoiceDetail request = testSetup();
        sapInvoiceDetail response = request.run();
        system.assertEquals('a', response.BAPI_WEBINVOICE_GETDETAIL.BILLINGDOC);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static sapInvoiceDetail testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('sapInvoiceDetail');
        sapInvoiceDetail request = new sapInvoiceDetail();
        request.BAPI_WEBINVOICE_GETDETAIL.BILLINGDOC = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        sapInvoiceDetail input = new sapInvoiceDetail();
        input.BAPI_WEBINVOICE_GETDETAIL.BILLINGDOC = 'a';
        sapInvoiceDetail actual = (sapInvoiceDetail)JSON.deserialize(input.serialize(), sapInvoiceDetail.class);
        system.assertEquals('a', actual.BAPI_WEBINVOICE_GETDETAIL.BILLINGDOC);
    }

    @istest
    private static void testDeserialize() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.BAPI_WEBINVOICE_GETDETAIL.BILLINGDOC = 'a';

        string s = output.serialize();
        sapInvoiceDetail actual = sapInvoiceDetail.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_WEBINVOICE_GETDETAIL.BILLINGDOC);
    }

    @istest
    private static void testDeserializeError() {
        try {
            sapInvoiceDetail actual = sapInvoiceDetail.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        sapInvoiceDetail output2 = new sapInvoiceDetail();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_WEBINVOICE_GETDETAIL'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('WEBINVOICEDOCUMENT'));
        system.assert(keys.contains('WEBINVOICEITEMS'));
        system.assert(keys.contains('WEBINVOICEPARTNERS'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_WEBINVOICE_GETDETAIL', first.name);
    }

}