/* 
 * Generated by Overcast UTC 2022-02-07 10:14:08Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class salesOrderStorageLocationTest {
    @istest
    private static void testsalesOrderStorageLocation() {
        salesOrderStorageLocation actual = new salesOrderStorageLocation();
        system.assertNotEquals(null, actual.Location);
    }

    @istest
    private static void testLocation() {
        salesOrderStorageLocation.Location actual = new salesOrderStorageLocation.Location('a','a','a','a','a','a','a');

        system.assertEquals('a', actual.Id);
        system.assertEquals('a', actual.Name);
        system.assertEquals('a', actual.Description);
        system.assertEquals('a', actual.ovcPlant_c);
        system.assertEquals('a', actual.ovcStorage_Location_Code_c);
        system.assertEquals('a', actual.ovcStorage_Location_Key_c);
        system.assertEquals('a', actual.Plant_Code_c);

        salesOrderStorageLocation.Location actual0 = new salesOrderStorageLocation.Location();
    }
    @istest
    private static void testrunQuery() {
        salesOrderStorageLocation request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        salesOrderStorageLocation response = request.runQuery(query1);
        system.assertEquals('a', response.Location[0].Id);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        salesOrderStorageLocation request = testSetup();
        salesOrderStorageLocation response = request.runInsert();
        system.assertEquals('a', response.Location[0].Id);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        salesOrderStorageLocation request = testSetup();
        salesOrderStorageLocation response = request.runUpdate();
        system.assertEquals('a', response.Location[0].Id);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        salesOrderStorageLocation request = testSetup();
        salesOrderStorageLocation response = request.runDelete();
        system.assertEquals('a', response.Location[0].Id);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static salesOrderStorageLocation testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('salesOrderStorageLocation');
        salesOrderStorageLocation request = new salesOrderStorageLocation();
        salesOrderStorageLocation.Location value1 = new salesOrderStorageLocation.Location();
        value1.Id = 'a';
        request.Location.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        salesOrderStorageLocation input = new salesOrderStorageLocation();
        salesOrderStorageLocation.Location value1 = new salesOrderStorageLocation.Location();
        value1.Id = 'a';
        input.Location.add(value1);
        salesOrderStorageLocation actual = (salesOrderStorageLocation)JSON.deserialize(input.serialize(), salesOrderStorageLocation.class);
        system.assertEquals('a', actual.Location[0].Id);
    }

    @istest
    private static void testDeserialize() {
        salesOrderStorageLocation output = new salesOrderStorageLocation();
        salesOrderStorageLocation.Location value1 = new salesOrderStorageLocation.Location();
        value1.Id = 'a';
        output.Location.add(value1);

        string s = output.serialize();
        salesOrderStorageLocation actual = salesOrderStorageLocation.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.Location[0].Id);
    }

    @istest
    private static void testDeserializeError() {
        try {
            salesOrderStorageLocation actual = salesOrderStorageLocation.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (salesOrderStorageLocation.salesOrderStorageLocationException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        salesOrderStorageLocation output = new salesOrderStorageLocation();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        salesOrderStorageLocation output = new salesOrderStorageLocation();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        salesOrderStorageLocation output2 = new salesOrderStorageLocation();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        salesOrderStorageLocation output = new salesOrderStorageLocation();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('Location'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('Location', first.name);
    }

}