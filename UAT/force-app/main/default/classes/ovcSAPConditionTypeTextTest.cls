/* 
 * Generated by Overcast UTC 2021-12-21 04:25:03Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcSAPConditionTypeTextTest {
    @istest
    private static void testovcSAPConditionTypeText() {
        ovcSAPConditionTypeText actual = new ovcSAPConditionTypeText();
        system.assertNotEquals(null, actual.T683T);
    }

    @istest
    private static void testT683T() {
        ovcSAPConditionTypeText.T683T actual = new ovcSAPConditionTypeText.T683T('a','a','a','a','a','a','a');

        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.KVEWE);
        system.assertEquals('a', actual.KAPPL);
        system.assertEquals('a', actual.KALSM);
        system.assertEquals('a', actual.STUNR);
        system.assertEquals('a', actual.ZAEHK);
        system.assertEquals('a', actual.VTEXT);

        ovcSAPConditionTypeText.T683T actual0 = new ovcSAPConditionTypeText.T683T();
    }
    @istest
    private static void testrunQuery() {
        ovcSAPConditionTypeText request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ovcSAPConditionTypeText response = request.runQuery(query1);
        system.assertEquals('a', response.T683T[0].SPRAS);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ovcSAPConditionTypeText testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcSAPConditionTypeText');
        ovcSAPConditionTypeText request = new ovcSAPConditionTypeText();
        ovcSAPConditionTypeText.T683T value1 = new ovcSAPConditionTypeText.T683T();
        value1.SPRAS = 'a';
        request.T683T.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcSAPConditionTypeText input = new ovcSAPConditionTypeText();
        ovcSAPConditionTypeText.T683T value1 = new ovcSAPConditionTypeText.T683T();
        value1.SPRAS = 'a';
        input.T683T.add(value1);
        ovcSAPConditionTypeText actual = (ovcSAPConditionTypeText)JSON.deserialize(input.serialize(), ovcSAPConditionTypeText.class);
        system.assertEquals('a', actual.T683T[0].SPRAS);
    }

    @istest
    private static void testDeserialize() {
        ovcSAPConditionTypeText output = new ovcSAPConditionTypeText();
        ovcSAPConditionTypeText.T683T value1 = new ovcSAPConditionTypeText.T683T();
        value1.SPRAS = 'a';
        output.T683T.add(value1);

        string s = output.serialize();
        ovcSAPConditionTypeText actual = ovcSAPConditionTypeText.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.T683T[0].SPRAS);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcSAPConditionTypeText actual = ovcSAPConditionTypeText.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ovcSAPConditionTypeText.ovcSAPConditionTypeTextException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcSAPConditionTypeText output = new ovcSAPConditionTypeText();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcSAPConditionTypeText output = new ovcSAPConditionTypeText();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcSAPConditionTypeText output2 = new ovcSAPConditionTypeText();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcSAPConditionTypeText output = new ovcSAPConditionTypeText();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('T683T'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('T683T', first.name);
    }

}