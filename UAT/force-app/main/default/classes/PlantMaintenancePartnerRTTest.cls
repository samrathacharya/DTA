/* 
 * Generated by Overcast UTC 2021-12-21 04:25:02Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class PlantMaintenancePartnerRTTest {
    @istest
    private static void testPlantMaintenancePartnerRT() {
        PlantMaintenancePartnerRT actual = new PlantMaintenancePartnerRT();
        system.assertNotEquals(null, actual.IHPA);
    }

    @istest
    private static void testIHPA() {
        PlantMaintenancePartnerRT.IHPA actual = new PlantMaintenancePartnerRT.IHPA('a','a','a','a','a','a','a',Date.newInstance(2000,1,1),'a','a',Date.newInstance(2000,1,1),'a','a','a','a','a');

        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.OBJNR);
        system.assertEquals('a', actual.PARVW);
        system.assertEquals('a', actual.COUNTER);
        system.assertEquals('a', actual.OBTYP);
        system.assertEquals('a', actual.PARNR);
        system.assertEquals('a', actual.INHER);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERZEIT);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.AEDAT);
        system.assertEquals('a', actual.AEZEIT);
        system.assertEquals('a', actual.AENAM);
        system.assertEquals('a', actual.KZLOESCH);
        system.assertEquals('a', actual.ADRNR);
        system.assertEquals('a', actual.TZONSP);

        PlantMaintenancePartnerRT.IHPA actual0 = new PlantMaintenancePartnerRT.IHPA();
    }
    @istest
    private static void testrunQuery() {
        PlantMaintenancePartnerRT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        PlantMaintenancePartnerRT response = request.runQuery(query1);
        system.assertEquals('a', response.IHPA[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static PlantMaintenancePartnerRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('PlantMaintenancePartnerRT');
        PlantMaintenancePartnerRT request = new PlantMaintenancePartnerRT();
        PlantMaintenancePartnerRT.IHPA value1 = new PlantMaintenancePartnerRT.IHPA();
        value1.MANDT = 'a';
        request.IHPA.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        PlantMaintenancePartnerRT input = new PlantMaintenancePartnerRT();
        PlantMaintenancePartnerRT.IHPA value1 = new PlantMaintenancePartnerRT.IHPA();
        value1.MANDT = 'a';
        input.IHPA.add(value1);
        PlantMaintenancePartnerRT actual = (PlantMaintenancePartnerRT)JSON.deserialize(input.serialize(), PlantMaintenancePartnerRT.class);
        system.assertEquals('a', actual.IHPA[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        PlantMaintenancePartnerRT output = new PlantMaintenancePartnerRT();
        PlantMaintenancePartnerRT.IHPA value1 = new PlantMaintenancePartnerRT.IHPA();
        value1.MANDT = 'a';
        output.IHPA.add(value1);

        string s = output.serialize();
        PlantMaintenancePartnerRT actual = PlantMaintenancePartnerRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.IHPA[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            PlantMaintenancePartnerRT actual = PlantMaintenancePartnerRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (PlantMaintenancePartnerRT.PlantMaintenancePartnerRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        PlantMaintenancePartnerRT output = new PlantMaintenancePartnerRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        PlantMaintenancePartnerRT output = new PlantMaintenancePartnerRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        PlantMaintenancePartnerRT output2 = new PlantMaintenancePartnerRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        PlantMaintenancePartnerRT output = new PlantMaintenancePartnerRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('IHPA'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('IHPA', first.name);
    }

}