/* 
 * Generated by Overcast UTC 2022-01-26 09:54:36Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class MaterialPlantRTTest {
    @istest
    private static void testMaterialPlantRT() {
        MaterialPlantRT actual = new MaterialPlantRT();
        system.assertNotEquals(null, actual.MARC);
    }

    @istest
    private static void testMARC() {
        MaterialPlantRT.MARC actual = new MaterialPlantRT.MARC('a','a','a','a',Date.newInstance(2000,1,1),'a');

        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.LVORM);
        system.assertEquals('a', actual.MMSTA);
        system.assertEquals(Date.newInstance(2000,1,1), actual.MMSTD);
        system.assertEquals('a', actual.EKGRP);

        MaterialPlantRT.MARC actual0 = new MaterialPlantRT.MARC();
    }
    @istest
    private static void testrunQuery() {
        MaterialPlantRT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        MaterialPlantRT response = request.runQuery(query1);
        system.assertEquals('a', response.MARC[0].MATNR);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static MaterialPlantRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('MaterialPlantRT');
        MaterialPlantRT request = new MaterialPlantRT();
        MaterialPlantRT.MARC value1 = new MaterialPlantRT.MARC();
        value1.MATNR = 'a';
        request.MARC.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        MaterialPlantRT input = new MaterialPlantRT();
        MaterialPlantRT.MARC value1 = new MaterialPlantRT.MARC();
        value1.MATNR = 'a';
        input.MARC.add(value1);
        MaterialPlantRT actual = (MaterialPlantRT)JSON.deserialize(input.serialize(), MaterialPlantRT.class);
        system.assertEquals('a', actual.MARC[0].MATNR);
    }

    @istest
    private static void testDeserialize() {
        MaterialPlantRT output = new MaterialPlantRT();
        MaterialPlantRT.MARC value1 = new MaterialPlantRT.MARC();
        value1.MATNR = 'a';
        output.MARC.add(value1);

        string s = output.serialize();
        MaterialPlantRT actual = MaterialPlantRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.MARC[0].MATNR);
    }

    @istest
    private static void testDeserializeError() {
        try {
            MaterialPlantRT actual = MaterialPlantRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (MaterialPlantRT.MaterialPlantRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        MaterialPlantRT output = new MaterialPlantRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        MaterialPlantRT output = new MaterialPlantRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        MaterialPlantRT output2 = new MaterialPlantRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        MaterialPlantRT output = new MaterialPlantRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('MARC'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('MARC', first.name);
    }

}