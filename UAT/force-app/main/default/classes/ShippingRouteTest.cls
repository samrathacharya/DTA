/* 
 * Generated by Overcast UTC 2022-01-14 01:10:52Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ShippingRouteTest {
    @istest
    private static void testShippingRoute() {
        ShippingRoute actual = new ShippingRoute();
        system.assertNotEquals(null, actual.TROLZ);
    }

    @istest
    private static void testTROLZ() {
        ShippingRoute.TROLZ actual = new ShippingRoute.TROLZ('a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.ALAND);
        system.assertEquals('a', actual.AZONE);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.TRAGR);
        system.assertEquals('a', actual.LLAND);
        system.assertEquals('a', actual.LZONE);
        system.assertEquals('a', actual.GRULG);
        system.assertEquals('a', actual.ROUTE);

        ShippingRoute.TROLZ actual0 = new ShippingRoute.TROLZ();
    }
    @istest
    private static void testrunQuery() {
        ShippingRoute request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ShippingRoute response = request.runQuery(query1);
        system.assertEquals('a', response.TROLZ[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ShippingRoute testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ShippingRoute');
        ShippingRoute request = new ShippingRoute();
        ShippingRoute.TROLZ value1 = new ShippingRoute.TROLZ();
        value1.MANDT = 'a';
        request.TROLZ.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ShippingRoute input = new ShippingRoute();
        ShippingRoute.TROLZ value1 = new ShippingRoute.TROLZ();
        value1.MANDT = 'a';
        input.TROLZ.add(value1);
        ShippingRoute actual = (ShippingRoute)JSON.deserialize(input.serialize(), ShippingRoute.class);
        system.assertEquals('a', actual.TROLZ[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ShippingRoute output = new ShippingRoute();
        ShippingRoute.TROLZ value1 = new ShippingRoute.TROLZ();
        value1.MANDT = 'a';
        output.TROLZ.add(value1);

        string s = output.serialize();
        ShippingRoute actual = ShippingRoute.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.TROLZ[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ShippingRoute actual = ShippingRoute.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ShippingRoute.ShippingRouteException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        ShippingRoute output = new ShippingRoute();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ShippingRoute output = new ShippingRoute();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ShippingRoute output2 = new ShippingRoute();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ShippingRoute output = new ShippingRoute();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('TROLZ'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('TROLZ', first.name);
    }

}