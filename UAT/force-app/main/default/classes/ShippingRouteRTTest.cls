/* 
 * Generated by Overcast UTC 2022-01-14 01:10:52Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ShippingRouteRTTest {
    @istest
    private static void testShippingRouteRT() {
        ShippingRouteRT actual = new ShippingRouteRT();
        system.assertNotEquals(null, actual.TROLZ);
    }

    @istest
    private static void testTROLZ() {
        ShippingRouteRTTROLZ actual = new ShippingRouteRTTROLZ();

        actual.MANDT = 'a';
        actual.ALAND = 'a';
        actual.AZONE = 'a';
        actual.VSBED = 'a';
        actual.TRAGR = 'a';
        actual.LLAND = 'a';
        actual.LZONE = 'a';
        actual.GRULG = 'a';
        actual.ROUTE = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.ALAND);
        system.assertEquals('a', actual.AZONE);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.TRAGR);
        system.assertEquals('a', actual.LLAND);
        system.assertEquals('a', actual.LZONE);
        system.assertEquals('a', actual.GRULG);
        system.assertEquals('a', actual.ROUTE);
    }
    @istest
    private static void testrunQuery() {
        ShippingRouteRT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ShippingRouteRT response = request.runQuery(query1);
        system.assertEquals('a', response.TROLZ[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ShippingRouteRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ShippingRouteRT');
        ShippingRouteRT request = new ShippingRouteRT();
        ShippingRouteRTTROLZ value1 = new ShippingRouteRTTROLZ();
        value1.MANDT = 'a';
        request.TROLZ.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ShippingRouteRT input = new ShippingRouteRT();
        ShippingRouteRTTROLZ value1 = new ShippingRouteRTTROLZ();
        value1.MANDT = 'a';
        input.TROLZ.add(value1);
        ShippingRouteRT actual = (ShippingRouteRT)JSON.deserialize(input.serialize(), ShippingRouteRT.class);
        system.assertEquals('a', actual.TROLZ[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ShippingRouteRT output = new ShippingRouteRT();
        ShippingRouteRTTROLZ value1 = new ShippingRouteRTTROLZ();
        value1.MANDT = 'a';
        output.TROLZ.add(value1);

        string s = output.serialize();
        ShippingRouteRT actual = ShippingRouteRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.TROLZ[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ShippingRouteRT actual = ShippingRouteRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ShippingRouteRT.ShippingRouteRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        ShippingRouteRT output = new ShippingRouteRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ShippingRouteRT output = new ShippingRouteRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ShippingRouteRT output2 = new ShippingRouteRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ShippingRouteRT output = new ShippingRouteRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('TROLZ'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('TROLZ', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('ShippingRouteRT');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        ShippingRouteRT.Parameters params = new ShippingRouteRT.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new ShippingRouteRT()) + '}';
        List<ShippingRouteRT.Parameters> paramList = new List<ShippingRouteRT.Parameters>{ params };

        Test.startTest();
        List<ShippingRouteRT.Result> results = ShippingRouteRT.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}