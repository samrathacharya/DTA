/* 
 * Generated by Overcast UTC 2022-01-11 05:39:07Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcS4BPPartnerFunctionsTest {
    @istest
    private static void testovcS4BPPartnerFunctions() {
        ovcS4BPPartnerFunctions actual = new ovcS4BPPartnerFunctions();
        system.assertNotEquals(null, actual.A_CustSalesPartnerFunc);
    }

    @istest
    private static void testA_CustSalesPartnerFunc() {
        ovcS4BPPartnerFunctionsACustSalesPartner actual = new ovcS4BPPartnerFunctionsACustSalesPartner();

        actual.Customer = 'a';
        actual.SalesOrganization = 'a';
        actual.DistributionChannel = 'a';
        actual.Division = 'a';
        actual.PartnerCounter = 'a';
        actual.PartnerFunction = 'a';
        actual.BPCustomerNumber = 'a';
        actual.CustomerPartnerDescription = 'a';
        actual.DefaultPartner = true;
        actual.Supplier = 'a';
        actual.PersonnelNumber = 'a';
        actual.ContactPerson = 'a';
        actual.AuthorizationGroup = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.PartnerCounter);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.BPCustomerNumber);
        system.assertEquals('a', actual.CustomerPartnerDescription);
        system.assertEquals(true, actual.DefaultPartner);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.PersonnelNumber);
        system.assertEquals('a', actual.ContactPerson);
        system.assertEquals('a', actual.AuthorizationGroup);
    }
    @istest
    private static void testrunQuery() {
        ovcS4BPPartnerFunctions request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ovcS4BPPartnerFunctions response = request.runQuery(query1);
        system.assertEquals('a', response.A_CustSalesPartnerFunc[0].Customer);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        ovcS4BPPartnerFunctions request = testSetup();
        ovcS4BPPartnerFunctions response = request.runInsert();
        system.assertEquals('a', response.A_CustSalesPartnerFunc[0].Customer);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        ovcS4BPPartnerFunctions request = testSetup();
        ovcS4BPPartnerFunctions response = request.runUpdate();
        system.assertEquals('a', response.A_CustSalesPartnerFunc[0].Customer);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        ovcS4BPPartnerFunctions request = testSetup();
        ovcS4BPPartnerFunctions response = request.runDelete();
        system.assertEquals('a', response.A_CustSalesPartnerFunc[0].Customer);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static ovcS4BPPartnerFunctions testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcS4BPPartnerFunctions');
        ovcS4BPPartnerFunctions request = new ovcS4BPPartnerFunctions();
        ovcS4BPPartnerFunctionsACustSalesPartner value1 = new ovcS4BPPartnerFunctionsACustSalesPartner();
        value1.Customer = 'a';
        request.A_CustSalesPartnerFunc.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcS4BPPartnerFunctions input = new ovcS4BPPartnerFunctions();
        ovcS4BPPartnerFunctionsACustSalesPartner value1 = new ovcS4BPPartnerFunctionsACustSalesPartner();
        value1.Customer = 'a';
        input.A_CustSalesPartnerFunc.add(value1);
        ovcS4BPPartnerFunctions actual = (ovcS4BPPartnerFunctions)JSON.deserialize(input.serialize(), ovcS4BPPartnerFunctions.class);
        system.assertEquals('a', actual.A_CustSalesPartnerFunc[0].Customer);
    }

    @istest
    private static void testDeserialize() {
        ovcS4BPPartnerFunctions output = new ovcS4BPPartnerFunctions();
        ovcS4BPPartnerFunctionsACustSalesPartner value1 = new ovcS4BPPartnerFunctionsACustSalesPartner();
        value1.Customer = 'a';
        output.A_CustSalesPartnerFunc.add(value1);

        string s = output.serialize();
        ovcS4BPPartnerFunctions actual = ovcS4BPPartnerFunctions.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.A_CustSalesPartnerFunc[0].Customer);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcS4BPPartnerFunctions actual = ovcS4BPPartnerFunctions.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ovcS4BPPartnerFunctions.ovcS4BPPartnerFunctionsException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcS4BPPartnerFunctions output = new ovcS4BPPartnerFunctions();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcS4BPPartnerFunctions output = new ovcS4BPPartnerFunctions();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcS4BPPartnerFunctions output2 = new ovcS4BPPartnerFunctions();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcS4BPPartnerFunctions output = new ovcS4BPPartnerFunctions();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('A_CustSalesPartnerFunc'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('A_CustSalesPartnerFunc', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('ovcS4BPPartnerFunctions');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        ovcS4BPPartnerFunctions.Parameters params = new ovcS4BPPartnerFunctions.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.requestData = new ovcS4BPPartnerFunctions();
        params.operation = 'Query';
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new ovcS4BPPartnerFunctions()) + '}';
        List<ovcS4BPPartnerFunctions.Parameters> paramList = new List<ovcS4BPPartnerFunctions.Parameters>{ params };

        Test.startTest();
        List<ovcS4BPPartnerFunctions.Result> results = ovcS4BPPartnerFunctions.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}