global class zjcBP extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Updatable {
/* 
 * Generated by Overcast UTC 2021-12-16 00:57:11Z.
 * This class belongs to the zjcBP Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class zjcBPException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global class Parameters {
        @InvocableVariable(label='Flow Interview GUID' required=true)
        global String flowInterviewGuid;
        @InvocableVariable(label='Request Query' required=false)
        global overcast__.Query query;
        @InvocableVariable(label='Request Data' required=false)
        global zjcBP requestData;
        @InvocableVariable(label='Operation (Query,Insert,Update,Delete)' required=true)
        global String operation;
        @InvocableVariable(label='Logger' required=false)
        global overcast__.Logger logger;
        @InvocableVariable(label='Do not Commit Logs' required=false)
        global Boolean doNotCommitLogs;

        @testVisible
        private String testResponse;
    }

    global class Result {
        @InvocableVariable(label='New Run ID' description='The ID for the new Run record.')
        global Id newRunId;
        @InvocableVariable(label='Response Data' required=false)
        global zjcBP response;
        @InvocableVariable(label='Logger' required=false)
        global overcast__.Logger logger;
    }

    @InvocableMethod(label='Run Scenario zjcBP' category='Overcast')
    public static List<Result> runInvocableMethod(List<Parameters> paramList) {
        List<Result> results = new List<Result>();
        List<overcast__.Logger> loggersToCommit = new List<overcast__.Logger>();

        for (Parameters p : paramList) {
            overcast__.Logger logger1 = p.logger;
            if (logger1 == null) {
                logger1 = createLogger();
            }
            Result result1 = new Result();
            zjcBP request = p.requestData != null ? p.requestData : new zjcBP();
            if (Test.isRunningTest()) {
                request.testResponse = p.testResponse;
            }
            switch on p.operation {
                when 'Query' {
                    result1.response = request.runQuery(p.query, logger1, null);
                } 
                when 'Insert' {
                    result1.response = request.runInsert(logger1, null);
                }
                when 'Update' {
                    result1.response = request.runUpdate(logger1, null);
                }
                when 'Delete' {
                    result1.response = request.runDelete(logger1, null);
                }
            }
            result1.logger = logger1;
            if (p.doNotCommitLogs != true) {
                loggersToCommit.add(logger1);
            }
            results.add(result1);
        }

        if (!loggersToCommit.isEmpty()) {
            overcast__.Logger.commitToDatabase(loggersToCommit);
        }

        return results;
    }

    global zjcBP() {
        this.A_BusinessPartner = new list<zjcBPA_BusinessPartner>();
        this.A_BusinessPartnerAddress = new list<zjcBPA_BusinessPartnerAddress>();
        this.A_Customer = new list<zjcBPA_Customer>();
        this.A_CustomerCompany = new list<zjcBPA_CustomerCompany>();
        this.A_CustomerSalesArea = new list<zjcBPA_CustomerSalesArea>();
        this.A_CustSalesPartnerFunc = new list<zjcBPA_CustSalesPartnerFunc>();
    }

    @AuraEnabled public list<zjcBPA_BusinessPartner> A_BusinessPartner { get; set; }
    @AuraEnabled public list<zjcBPA_BusinessPartnerAddress> A_BusinessPartnerAddress { get; set; }
    @AuraEnabled public list<zjcBPA_Customer> A_Customer { get; set; }
    @AuraEnabled public list<zjcBPA_CustomerCompany> A_CustomerCompany { get; set; }
    @AuraEnabled public list<zjcBPA_CustomerSalesArea> A_CustomerSalesArea { get; set; }
    @AuraEnabled public list<zjcBPA_CustSalesPartnerFunc> A_CustSalesPartnerFunc { get; set; }

    public string inputSetName { get; set; }

    public zjcBP runQuery(overcast.Query query) {
        overcast.Logger logger1 = createLogger();
        try {
            zjcBP response = this.runQuery(query, logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public zjcBP runQuery(overcast.Query query, overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential);
    }

    public string runQueryAsync(overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential, con);
    }

    public zjcBP runInsert() {
        overcast.Logger logger1 = createLogger();
        try {
            zjcBP response = this.runInsert(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public zjcBP runInsert(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwCreate, null, logger, namedCredential);
    }
    
    public string runInsertAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwCreate, null, logger, namedCredential, con);
    }

    public zjcBP runUpdate() {
        overcast.Logger logger1 = createLogger();
        try {
            zjcBP response = this.runUpdate(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public zjcBP runUpdate(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwUpdate, null, logger, namedCredential);
    }
    
    public string runUpdateAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwUpdate, null, logger, namedCredential, con);
    }

    public zjcBP runDelete() {
        overcast.Logger logger1 = createLogger();
        try {
            zjcBP response = this.runDelete(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public zjcBP runDelete(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwDelete, null, logger, namedCredential);
    }
    
    public string runDeleteAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwDelete, null, logger, namedCredential, con);
    }

    public static zjcBP getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return zjcBP.deserialize(response.getBody());
    }

    private overcast.SynchronousHandler setup(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('zjcBP');
        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
        sh.Operation = operation;

        if (query != null) {
            sh.Condition = query.where_x;
            sh.OrderBy = query.orderBy;
            sh.Fields = query.fields;
            sh.Limit_x = query.limit_x;
            sh.Offset = query.offset;
        }
        return sh;
    }
    
    private zjcBP run(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return zjcBP.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return zjcBP.deserialize(sh.Response);
    }

    private string runAsync(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();

        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }
        

    private static overcast.Logger createLogger() {
        return new overcast.Logger('zjcBP');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static zjcBP deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            zjcBP obj = new zjcBP();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new zjcBP();
        }
        zjcBP obj = (zjcBP)JSON.deserialize(outputData, zjcBP.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new zjcBPException('Response null for zjcBP request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                zjcBPException ex = new zjcBPException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new zjcBPException('Malformed response for zjcBP request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new zjcBPException('Response null for zjcBP request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new zjcBPException(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'A_BusinessPartner';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(zjcBPMeta0.metadata);
        }
        return metadata;
    }

}