global class sapSalesOrderDetail extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Runnable {
/* 
 * Generated by Overcast UTC 2022-03-24 04:08:35Z.
 * This class belongs to the sapSalesOrderDetail Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class sapSalesOrderDetailException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global class Parameters {
        @InvocableVariable(label='Flow Interview GUID' required=true)
        global String flowInterviewGuid;
        @InvocableVariable(label='Request Data' required=true)
        global sapSalesOrderDetail requestData;
        @InvocableVariable(label='Logger' required=false)
        global overcast__.Logger logger;
        @InvocableVariable(label='Do not Commit Logs' required=false)
        global Boolean doNotCommitLogs;

        @testVisible
        private String testResponse;
    }

    global class Result {
        @InvocableVariable(label='New Run ID' description='The ID for the new Run record.')
        global Id newRunId;
        @InvocableVariable(label='Response Data' required=false)
        global sapSalesOrderDetail response;
        @InvocableVariable(label='Logger' required=false)
        global overcast__.Logger logger;
    }

    @InvocableMethod(label='Run Scenario sapSalesOrderDetail' category='Overcast')
    public static List<Result> runInvocableMethod(List<Parameters> paramList) {
        List<Result> results = new List<Result>();
        List<overcast__.Logger> loggersToCommit = new List<overcast__.Logger>();

        for (Parameters p : paramList) {
            overcast__.Logger logger1 = p.logger;
            if (logger1 == null) {
                logger1 = createLogger();
            }
            Result result1 = new Result();
            sapSalesOrderDetail request = p.requestData;
            if (Test.isRunningTest()) {
                request.testResponse = p.testResponse;
            }
            result1.response = request.run(logger1, null);
            result1.logger = logger1;
            if (p.doNotCommitLogs != true) {
                loggersToCommit.add(logger1);
            }
            results.add(result1);
        }

        if (!loggersToCommit.isEmpty()) {
            overcast__.Logger.commitToDatabase(loggersToCommit);
        }

        return results;
    }

    global sapSalesOrderDetail() {
        this.BAPISDORDER_GETDETAILEDLIST = new sapSalesOrderDetailBAPISDORDERGETDETAILE();
        this.I_BAPI_VIEW = new sapSalesOrderDetailI_BAPI_VIEW();
        this.EXTENSIONOUT = new list<sapSalesOrderDetailEXTENSIONOUT>();
        this.ORDER_ADDRESS_OUT = new list<sapSalesOrderDetailORDER_ADDRESS_OUT>();
        this.ORDER_BILLINGDATES_OUT = new list<sapSalesOrderDetailORDERBILLINGDATESOUT>();
        this.ORDER_BILLINGPLANS_OUT = new list<sapSalesOrderDetailORDERBILLINGPLANSOUT>();
        this.ORDER_BUSINESS_OUT = new list<sapSalesOrderDetailORDER_BUSINESS_OUT>();
        this.ORDER_CFGS_CUBLBS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUBLBS_OUT>();
        this.ORDER_CFGS_CUCFGS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUCFGS_OUT>();
        this.ORDER_CFGS_CUINS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUINS_OUT>();
        this.ORDER_CFGS_CUPRTS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUPRTS_OUT>();
        this.ORDER_CFGS_CUREFS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUREFS_OUT>();
        this.ORDER_CFGS_CUVALS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUVALS_OUT>();
        this.ORDER_CFGS_CUVKS_OUT = new list<sapSalesOrderDetailORDER_CFGS_CUVKS_OUT>();
        this.ORDER_CONDITIONS_OUT = new list<sapSalesOrderDetailORDER_CONDITIONS_OUT>();
        this.ORDER_COND_HEAD = new list<sapSalesOrderDetailORDER_COND_HEAD>();
        this.ORDER_COND_ITEM = new list<sapSalesOrderDetailORDER_COND_ITEM>();
        this.ORDER_COND_QTY_SCALE = new list<sapSalesOrderDetailORDER_COND_QTY_SCALE>();
        this.ORDER_COND_VAL_SCALE = new list<sapSalesOrderDetailORDER_COND_VAL_SCALE>();
        this.ORDER_CONTRACTS_OUT = new list<sapSalesOrderDetailORDER_CONTRACTS_OUT>();
        this.ORDER_CREDITCARDS_OUT = new list<sapSalesOrderDetailORDER_CREDITCARDS_OUT>();
        this.ORDER_FLOWS_OUT = new list<sapSalesOrderDetailORDER_FLOWS_OUT>();
        this.ORDER_HEADERS_OUT = new list<sapSalesOrderDetailORDER_HEADERS_OUT>();
        this.ORDER_ITEMS_OUT = new list<sapSalesOrderDetailORDER_ITEMS_OUT>();
        this.ORDER_PARTNERS_OUT = new list<sapSalesOrderDetailORDER_PARTNERS_OUT>();
        this.ORDER_SCHEDULES_OUT = new list<sapSalesOrderDetailORDER_SCHEDULES_OUT>();
        this.ORDER_STATUSHEADERS_OUT = new list<sapSalesOrderDetailORDERSTATUSHEADERSOUT>();
        this.ORDER_STATUSITEMS_OUT = new list<sapSalesOrderDetailORDER_STATUSITEMS_OUT>();
        this.ORDER_TEXTHEADERS_OUT = new list<sapSalesOrderDetailORDER_TEXTHEADERS_OUT>();
        this.ORDER_TEXTLINES_OUT = new list<sapSalesOrderDetailORDER_TEXTLINES_OUT>();
        this.SALES_DOCUMENTS = new list<sapSalesOrderDetailSALES_DOCUMENTS>();
    }

    @AuraEnabled public sapSalesOrderDetailBAPISDORDERGETDETAILE BAPISDORDER_GETDETAILEDLIST { get; set; }
    @AuraEnabled public sapSalesOrderDetailI_BAPI_VIEW I_BAPI_VIEW { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailEXTENSIONOUT> EXTENSIONOUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_ADDRESS_OUT> ORDER_ADDRESS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDERBILLINGDATESOUT> ORDER_BILLINGDATES_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDERBILLINGPLANSOUT> ORDER_BILLINGPLANS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_BUSINESS_OUT> ORDER_BUSINESS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUBLBS_OUT> ORDER_CFGS_CUBLBS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUCFGS_OUT> ORDER_CFGS_CUCFGS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUINS_OUT> ORDER_CFGS_CUINS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUPRTS_OUT> ORDER_CFGS_CUPRTS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUREFS_OUT> ORDER_CFGS_CUREFS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUVALS_OUT> ORDER_CFGS_CUVALS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CFGS_CUVKS_OUT> ORDER_CFGS_CUVKS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CONDITIONS_OUT> ORDER_CONDITIONS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_COND_HEAD> ORDER_COND_HEAD { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_COND_ITEM> ORDER_COND_ITEM { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_COND_QTY_SCALE> ORDER_COND_QTY_SCALE { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_COND_VAL_SCALE> ORDER_COND_VAL_SCALE { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CONTRACTS_OUT> ORDER_CONTRACTS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_CREDITCARDS_OUT> ORDER_CREDITCARDS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_FLOWS_OUT> ORDER_FLOWS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_HEADERS_OUT> ORDER_HEADERS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_ITEMS_OUT> ORDER_ITEMS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_PARTNERS_OUT> ORDER_PARTNERS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_SCHEDULES_OUT> ORDER_SCHEDULES_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDERSTATUSHEADERSOUT> ORDER_STATUSHEADERS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_STATUSITEMS_OUT> ORDER_STATUSITEMS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_TEXTHEADERS_OUT> ORDER_TEXTHEADERS_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailORDER_TEXTLINES_OUT> ORDER_TEXTLINES_OUT { get; set; }
    @AuraEnabled public list<sapSalesOrderDetailSALES_DOCUMENTS> SALES_DOCUMENTS { get; set; }

    public string inputSetName { get; set; }

    public sapSalesOrderDetail run() {
        overcast.Logger logger1 = createLogger();
        try {
            sapSalesOrderDetail response = this.run(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public sapSalesOrderDetail run(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return sapSalesOrderDetail.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);
        
        return sapSalesOrderDetail.deserialize(sh.Response);
    }

    public string runAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }

    public static sapSalesOrderDetail handleAsyncResponse(HttpResponse resp) {
        return sapSalesOrderDetail.deserialize(resp.getBody());
    }

    public static sapSalesOrderDetail getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return handleAsyncResponse(response);
    }

    private overcast.SynchronousHandler setup(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('sapSalesOrderDetail');

        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
                sh.loadExtensions(this);

        return sh;
    }

    private static overcast.Logger createLogger() {
        return new overcast.Logger('sapSalesOrderDetail');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }

        
    public class BodyContents extends overcast.Realtime.ContentsBody {
        public sapSalesOrderDetail output { get; set; }
    }

    private static sapSalesOrderDetail.BodyContents getBodyContents(string responseData) {
        if (string.isblank(responseData)) {
            throw new sapSalesOrderDetailException('Response null for sapSalesOrderDetail request.');
        }

        sapSalesOrderDetail.BodyContents contents = (sapSalesOrderDetail.BodyContents) JSON.deserialize(responseData, sapSalesOrderDetail.BodyContents.class);
        if (contents.error != null) {
            sapSalesOrderDetailException ex = new sapSalesOrderDetailException(string.join(contents.error, ';'));
            ex.setMessages(contents.error);
            throw ex;
        }
        return contents;
    }

    public static sapSalesOrderDetail deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            sapSalesOrderDetail obj = new sapSalesOrderDetail();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        

        sapSalesOrderDetail.BodyContents contents = getBodyContents(responsedata);
        contents.output.backendMessage = contents.backendMessage;

        return contents.output;    
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new sapSalesOrderDetailException('Response null for sapSalesOrderDetail request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                sapSalesOrderDetailException ex = new sapSalesOrderDetailException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new sapSalesOrderDetailException('Malformed response for sapSalesOrderDetail request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new sapSalesOrderDetailException('Response null for sapSalesOrderDetail request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new sapSalesOrderDetailException(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'BAPISDORDER_GETDETAILEDLIST';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(sapSalesOrderDetailMeta0.metadata);
        }
        return metadata;
    }

}