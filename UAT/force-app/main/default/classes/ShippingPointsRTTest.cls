/* 
 * Generated by Overcast UTC 2021-12-21 16:22:09Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ShippingPointsRTTest {
    @istest
    private static void testShippingPointsRT() {
        ShippingPointsRT actual = new ShippingPointsRT();
        system.assertNotEquals(null, actual.TVST);
    }

    @istest
    private static void testTVST() {
        ShippingPointsRTTVST actual = new ShippingPointsRTTVST();

        actual.MANDT = 'a';
        actual.VSTEL = 'a';
        actual.FABKL = 'a';
        actual.VTRZT = 0;
        actual.ADRNR = 'a';
        actual.ALAND = 'a';
        actual.AZONE = 'a';
        actual.TXNAM_ADR = 'a';
        actual.KSCHL = 'a';
        actual.SPRAS = 'a';
        actual.ANZAL = 0;
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.VSTEL);
        system.assertEquals('a', actual.FABKL);
        system.assertEquals(0, actual.VTRZT);
        system.assertEquals('a', actual.ADRNR);
        system.assertEquals('a', actual.ALAND);
        system.assertEquals('a', actual.AZONE);
        system.assertEquals('a', actual.TXNAM_ADR);
        system.assertEquals('a', actual.KSCHL);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals(0, actual.ANZAL);
    }
    @istest
    private static void testrunQuery() {
        ShippingPointsRT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ShippingPointsRT response = request.runQuery(query1);
        system.assertEquals('a', response.TVST[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ShippingPointsRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ShippingPointsRT');
        ShippingPointsRT request = new ShippingPointsRT();
        ShippingPointsRTTVST value1 = new ShippingPointsRTTVST();
        value1.MANDT = 'a';
        request.TVST.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ShippingPointsRT input = new ShippingPointsRT();
        ShippingPointsRTTVST value1 = new ShippingPointsRTTVST();
        value1.MANDT = 'a';
        input.TVST.add(value1);
        ShippingPointsRT actual = (ShippingPointsRT)JSON.deserialize(input.serialize(), ShippingPointsRT.class);
        system.assertEquals('a', actual.TVST[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ShippingPointsRT output = new ShippingPointsRT();
        ShippingPointsRTTVST value1 = new ShippingPointsRTTVST();
        value1.MANDT = 'a';
        output.TVST.add(value1);

        string s = output.serialize();
        ShippingPointsRT actual = ShippingPointsRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.TVST[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ShippingPointsRT actual = ShippingPointsRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ShippingPointsRT.ShippingPointsRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        ShippingPointsRT output = new ShippingPointsRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ShippingPointsRT output = new ShippingPointsRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ShippingPointsRT output2 = new ShippingPointsRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ShippingPointsRT output = new ShippingPointsRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('TVST'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('TVST', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('ShippingPointsRT');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        ShippingPointsRT.Parameters params = new ShippingPointsRT.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new ShippingPointsRT()) + '}';
        List<ShippingPointsRT.Parameters> paramList = new List<ShippingPointsRT.Parameters>{ params };

        Test.startTest();
        List<ShippingPointsRT.Result> results = ShippingPointsRT.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}