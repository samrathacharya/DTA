/* 
 * Generated by Overcast UTC 2021-12-16 00:57:11Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcBPTest {
    @istest
    private static void testzjcBP() {
        zjcBP actual = new zjcBP();
        system.assertNotEquals(null, actual.A_BusinessPartner);
        system.assertNotEquals(null, actual.A_BusinessPartnerAddress);
        system.assertNotEquals(null, actual.A_Customer);
        system.assertNotEquals(null, actual.A_CustomerCompany);
        system.assertNotEquals(null, actual.A_CustomerSalesArea);
        system.assertNotEquals(null, actual.A_CustSalesPartnerFunc);
    }

    @istest
    private static void testA_BusinessPartner() {
        zjcBPA_BusinessPartner actual = new zjcBPA_BusinessPartner();

        actual.BusinessPartner = 'a';
        actual.Customer = 'a';
        actual.Supplier = 'a';
        actual.AcademicTitle = 'a';
        actual.AuthorizationGroup = 'a';
        actual.BusinessPartnerCategory = 'a';
        actual.BusinessPartnerFullName = 'a';
        actual.BusinessPartnerGrouping = 'a';
        actual.BusinessPartnerName = 'a';
        actual.BusinessPartnerUUID = 'a';
        actual.CorrespondenceLanguage = 'a';
        actual.CreatedByUser = 'a';
        actual.CreationDate = Datetime.newInstance(2000,1,1);
        actual.CreationTime = Time.newInstance(1,0,0,0);
        actual.FirstName = 'a';
        actual.FormOfAddress = 'a';
        actual.Industry = 'a';
        actual.InternationalLocationNumber1 = 'a';
        actual.InternationalLocationNumber2 = 'a';
        actual.IsFemale = true;
        actual.IsMale = true;
        actual.IsNaturalPerson = 'a';
        actual.IsSexUnknown = true;
        actual.GenderCodeName = 'a';
        actual.Language = 'a';
        actual.LastChangeDate = Datetime.newInstance(2000,1,1);
        actual.LastChangeTime = Time.newInstance(1,0,0,0);
        actual.LastChangedByUser = 'a';
        actual.LastName = 'a';
        actual.LegalForm = 'a';
        actual.OrganizationBPName1 = 'a';
        actual.OrganizationBPName2 = 'a';
        actual.OrganizationBPName3 = 'a';
        actual.OrganizationBPName4 = 'a';
        actual.OrganizationFoundationDate = Datetime.newInstance(2000,1,1);
        actual.OrganizationLiquidationDate = Datetime.newInstance(2000,1,1);
        actual.SearchTerm1 = 'a';
        actual.SearchTerm2 = 'a';
        actual.AdditionalLastName = 'a';
        actual.BirthDate = Datetime.newInstance(2000,1,1);
        actual.BusinessPartnerBirthDateStatus = 'a';
        actual.BusinessPartnerBirthplaceName = 'a';
        actual.BusinessPartnerIsBlocked = true;
        actual.BusinessPartnerType = 'a';
        actual.ETag = 'a';
        actual.GroupBusinessPartnerName1 = 'a';
        actual.GroupBusinessPartnerName2 = 'a';
        actual.IndependentAddressID = 'a';
        actual.InternationalLocationNumber3 = 'a';
        actual.MiddleName = 'a';
        actual.NameCountry = 'a';
        actual.NameFormat = 'a';
        actual.PersonFullName = 'a';
        actual.PersonNumber = 'a';
        actual.IsMarkedForArchiving = true;
        actual.BusinessPartnerIDByExtSystem = 'a';
        actual.TradingPartner = 'a';
        actual.to_BusinessPartnerAddress = 'a';
        actual.to_Customer = 'a';
        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.AcademicTitle);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BusinessPartnerCategory);
        system.assertEquals('a', actual.BusinessPartnerFullName);
        system.assertEquals('a', actual.BusinessPartnerGrouping);
        system.assertEquals('a', actual.BusinessPartnerName);
        system.assertEquals('a', actual.BusinessPartnerUUID);
        system.assertEquals('a', actual.CorrespondenceLanguage);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.CreationTime);
        system.assertEquals('a', actual.FirstName);
        system.assertEquals('a', actual.FormOfAddress);
        system.assertEquals('a', actual.Industry);
        system.assertEquals('a', actual.InternationalLocationNumber1);
        system.assertEquals('a', actual.InternationalLocationNumber2);
        system.assertEquals(true, actual.IsFemale);
        system.assertEquals(true, actual.IsMale);
        system.assertEquals('a', actual.IsNaturalPerson);
        system.assertEquals(true, actual.IsSexUnknown);
        system.assertEquals('a', actual.GenderCodeName);
        system.assertEquals('a', actual.Language);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastChangeDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.LastChangeTime);
        system.assertEquals('a', actual.LastChangedByUser);
        system.assertEquals('a', actual.LastName);
        system.assertEquals('a', actual.LegalForm);
        system.assertEquals('a', actual.OrganizationBPName1);
        system.assertEquals('a', actual.OrganizationBPName2);
        system.assertEquals('a', actual.OrganizationBPName3);
        system.assertEquals('a', actual.OrganizationBPName4);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.OrganizationFoundationDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.OrganizationLiquidationDate);
        system.assertEquals('a', actual.SearchTerm1);
        system.assertEquals('a', actual.SearchTerm2);
        system.assertEquals('a', actual.AdditionalLastName);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.BirthDate);
        system.assertEquals('a', actual.BusinessPartnerBirthDateStatus);
        system.assertEquals('a', actual.BusinessPartnerBirthplaceName);
        system.assertEquals(true, actual.BusinessPartnerIsBlocked);
        system.assertEquals('a', actual.BusinessPartnerType);
        system.assertEquals('a', actual.ETag);
        system.assertEquals('a', actual.GroupBusinessPartnerName1);
        system.assertEquals('a', actual.GroupBusinessPartnerName2);
        system.assertEquals('a', actual.IndependentAddressID);
        system.assertEquals('a', actual.InternationalLocationNumber3);
        system.assertEquals('a', actual.MiddleName);
        system.assertEquals('a', actual.NameCountry);
        system.assertEquals('a', actual.NameFormat);
        system.assertEquals('a', actual.PersonFullName);
        system.assertEquals('a', actual.PersonNumber);
        system.assertEquals(true, actual.IsMarkedForArchiving);
        system.assertEquals('a', actual.BusinessPartnerIDByExtSystem);
        system.assertEquals('a', actual.TradingPartner);
        system.assertEquals('a', actual.to_BusinessPartnerAddress);
        system.assertEquals('a', actual.to_Customer);
    }
    @istest
    private static void testA_BusinessPartnerAddress() {
        zjcBPA_BusinessPartnerAddress actual = new zjcBPA_BusinessPartnerAddress();

        actual.BusinessPartner = 'a';
        actual.AddressID = 'a';
        actual.ValidityStartDate = Datetime.newInstance(2000,1,1);
        actual.ValidityEndDate = Datetime.newInstance(2000,1,1);
        actual.AuthorizationGroup = 'a';
        actual.AddressUUID = 'a';
        actual.AdditionalStreetPrefixName = 'a';
        actual.AdditionalStreetSuffixName = 'a';
        actual.AddressTimeZone = 'a';
        actual.CareOfName = 'a';
        actual.CityCode = 'a';
        actual.CityName = 'a';
        actual.CompanyPostalCode = 'a';
        actual.Country = 'a';
        actual.County = 'a';
        actual.DeliveryServiceNumber = 'a';
        actual.DeliveryServiceTypeCode = 'a';
        actual.District = 'a';
        actual.FormOfAddress = 'a';
        actual.FullName = 'a';
        actual.HomeCityName = 'a';
        actual.HouseNumber = 'a';
        actual.HouseNumberSupplementText = 'a';
        actual.Language = 'a';
        actual.POBox = 'a';
        actual.POBoxDeviatingCityName = 'a';
        actual.POBoxDeviatingCountry = 'a';
        actual.POBoxDeviatingRegion = 'a';
        actual.POBoxIsWithoutNumber = true;
        actual.POBoxLobbyName = 'a';
        actual.POBoxPostalCode = 'a';
        actual.Person = 'a';
        actual.PostalCode = 'a';
        actual.PrfrdCommMediumType = 'a';
        actual.Region = 'a';
        actual.StreetName = 'a';
        actual.StreetPrefixName = 'a';
        actual.StreetSuffixName = 'a';
        actual.TaxJurisdiction = 'a';
        actual.TransportZone = 'a';
        actual.AddressIDByExternalSystem = 'a';
        actual.CountyCode = 'a';
        actual.TownshipCode = 'a';
        actual.TownshipName = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.AddressID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.AddressUUID);
        system.assertEquals('a', actual.AdditionalStreetPrefixName);
        system.assertEquals('a', actual.AdditionalStreetSuffixName);
        system.assertEquals('a', actual.AddressTimeZone);
        system.assertEquals('a', actual.CareOfName);
        system.assertEquals('a', actual.CityCode);
        system.assertEquals('a', actual.CityName);
        system.assertEquals('a', actual.CompanyPostalCode);
        system.assertEquals('a', actual.Country);
        system.assertEquals('a', actual.County);
        system.assertEquals('a', actual.DeliveryServiceNumber);
        system.assertEquals('a', actual.DeliveryServiceTypeCode);
        system.assertEquals('a', actual.District);
        system.assertEquals('a', actual.FormOfAddress);
        system.assertEquals('a', actual.FullName);
        system.assertEquals('a', actual.HomeCityName);
        system.assertEquals('a', actual.HouseNumber);
        system.assertEquals('a', actual.HouseNumberSupplementText);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.POBox);
        system.assertEquals('a', actual.POBoxDeviatingCityName);
        system.assertEquals('a', actual.POBoxDeviatingCountry);
        system.assertEquals('a', actual.POBoxDeviatingRegion);
        system.assertEquals(true, actual.POBoxIsWithoutNumber);
        system.assertEquals('a', actual.POBoxLobbyName);
        system.assertEquals('a', actual.POBoxPostalCode);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.PostalCode);
        system.assertEquals('a', actual.PrfrdCommMediumType);
        system.assertEquals('a', actual.Region);
        system.assertEquals('a', actual.StreetName);
        system.assertEquals('a', actual.StreetPrefixName);
        system.assertEquals('a', actual.StreetSuffixName);
        system.assertEquals('a', actual.TaxJurisdiction);
        system.assertEquals('a', actual.TransportZone);
        system.assertEquals('a', actual.AddressIDByExternalSystem);
        system.assertEquals('a', actual.CountyCode);
        system.assertEquals('a', actual.TownshipCode);
        system.assertEquals('a', actual.TownshipName);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testA_Customer() {
        zjcBPA_Customer actual = new zjcBPA_Customer();

        actual.Customer = 'a';
        actual.AuthorizationGroup = 'a';
        actual.BillingIsBlockedForCustomer = 'a';
        actual.CreatedByUser = 'a';
        actual.CreationDate = Datetime.newInstance(2000,1,1);
        actual.CustomerAccountGroup = 'a';
        actual.CustomerClassification = 'a';
        actual.CustomerFullName = 'a';
        actual.CustomerName = 'a';
        actual.DeliveryIsBlocked = 'a';
        actual.NFPartnerIsNaturalPerson = 'a';
        actual.OrderIsBlockedForCustomer = 'a';
        actual.PostingIsBlocked = true;
        actual.Supplier = 'a';
        actual.CustomerCorporateGroup = 'a';
        actual.FiscalAddress = 'a';
        actual.Industry = 'a';
        actual.IndustryCode1 = 'a';
        actual.IndustryCode2 = 'a';
        actual.IndustryCode3 = 'a';
        actual.IndustryCode4 = 'a';
        actual.IndustryCode5 = 'a';
        actual.InternationalLocationNumber1 = 'a';
        actual.NielsenRegion = 'a';
        actual.ResponsibleType = 'a';
        actual.TaxNumber1 = 'a';
        actual.TaxNumber2 = 'a';
        actual.TaxNumber3 = 'a';
        actual.TaxNumber4 = 'a';
        actual.TaxNumber5 = 'a';
        actual.TaxNumberType = 'a';
        actual.VATRegistration = 'a';
        actual.DeletionIndicator = true;
        actual.to_CustomerCompany = 'a';
        actual.to_CustomerSalesArea = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BillingIsBlockedForCustomer);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.CustomerClassification);
        system.assertEquals('a', actual.CustomerFullName);
        system.assertEquals('a', actual.CustomerName);
        system.assertEquals('a', actual.DeliveryIsBlocked);
        system.assertEquals('a', actual.NFPartnerIsNaturalPerson);
        system.assertEquals('a', actual.OrderIsBlockedForCustomer);
        system.assertEquals(true, actual.PostingIsBlocked);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CustomerCorporateGroup);
        system.assertEquals('a', actual.FiscalAddress);
        system.assertEquals('a', actual.Industry);
        system.assertEquals('a', actual.IndustryCode1);
        system.assertEquals('a', actual.IndustryCode2);
        system.assertEquals('a', actual.IndustryCode3);
        system.assertEquals('a', actual.IndustryCode4);
        system.assertEquals('a', actual.IndustryCode5);
        system.assertEquals('a', actual.InternationalLocationNumber1);
        system.assertEquals('a', actual.NielsenRegion);
        system.assertEquals('a', actual.ResponsibleType);
        system.assertEquals('a', actual.TaxNumber1);
        system.assertEquals('a', actual.TaxNumber2);
        system.assertEquals('a', actual.TaxNumber3);
        system.assertEquals('a', actual.TaxNumber4);
        system.assertEquals('a', actual.TaxNumber5);
        system.assertEquals('a', actual.TaxNumberType);
        system.assertEquals('a', actual.VATRegistration);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.to_CustomerCompany);
        system.assertEquals('a', actual.to_CustomerSalesArea);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testA_CustomerCompany() {
        zjcBPA_CustomerCompany actual = new zjcBPA_CustomerCompany();

        actual.Customer = 'a';
        actual.CompanyCode = 'a';
        actual.APARToleranceGroup = 'a';
        actual.AccountByCustomer = 'a';
        actual.AccountingClerk = 'a';
        actual.AccountingClerkFaxNumber = 'a';
        actual.AccountingClerkInternetAddress = 'a';
        actual.AccountingClerkPhoneNumber = 'a';
        actual.AlternativePayerAccount = 'a';
        actual.AuthorizationGroup = 'a';
        actual.CollectiveInvoiceVariant = 'a';
        actual.CustomerAccountNote = 'a';
        actual.CustomerHeadOffice = 'a';
        actual.CustomerSupplierClearingIsUsed = true;
        actual.HouseBank = 'a';
        actual.InterestCalculationCode = 'a';
        actual.InterestCalculationDate = Datetime.newInstance(2000,1,1);
        actual.IntrstCalcFrequencyInMonths = 'a';
        actual.IsToBeLocallyProcessed = true;
        actual.ItemIsToBePaidSeparately = true;
        actual.LayoutSortingRule = 'a';
        actual.PaymentBlockingReason = 'a';
        actual.PaymentMethodsList = 'a';
        actual.PaymentTerms = 'a';
        actual.PaytAdviceIsSentbyEDI = true;
        actual.PhysicalInventoryBlockInd = true;
        actual.ReconciliationAccount = 'a';
        actual.RecordPaymentHistoryIndicator = true;
        actual.UserAtCustomer = 'a';
        actual.DeletionIndicator = true;
        actual.CashPlanningGroup = 'a';
        actual.KnownOrNegotiatedLeave = 'a';
        actual.ValueAdjustmentKey = 'a';
        actual.CustomerAccountGroup = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.APARToleranceGroup);
        system.assertEquals('a', actual.AccountByCustomer);
        system.assertEquals('a', actual.AccountingClerk);
        system.assertEquals('a', actual.AccountingClerkFaxNumber);
        system.assertEquals('a', actual.AccountingClerkInternetAddress);
        system.assertEquals('a', actual.AccountingClerkPhoneNumber);
        system.assertEquals('a', actual.AlternativePayerAccount);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.CollectiveInvoiceVariant);
        system.assertEquals('a', actual.CustomerAccountNote);
        system.assertEquals('a', actual.CustomerHeadOffice);
        system.assertEquals(true, actual.CustomerSupplierClearingIsUsed);
        system.assertEquals('a', actual.HouseBank);
        system.assertEquals('a', actual.InterestCalculationCode);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.InterestCalculationDate);
        system.assertEquals('a', actual.IntrstCalcFrequencyInMonths);
        system.assertEquals(true, actual.IsToBeLocallyProcessed);
        system.assertEquals(true, actual.ItemIsToBePaidSeparately);
        system.assertEquals('a', actual.LayoutSortingRule);
        system.assertEquals('a', actual.PaymentBlockingReason);
        system.assertEquals('a', actual.PaymentMethodsList);
        system.assertEquals('a', actual.PaymentTerms);
        system.assertEquals(true, actual.PaytAdviceIsSentbyEDI);
        system.assertEquals(true, actual.PhysicalInventoryBlockInd);
        system.assertEquals('a', actual.ReconciliationAccount);
        system.assertEquals(true, actual.RecordPaymentHistoryIndicator);
        system.assertEquals('a', actual.UserAtCustomer);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.CashPlanningGroup);
        system.assertEquals('a', actual.KnownOrNegotiatedLeave);
        system.assertEquals('a', actual.ValueAdjustmentKey);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testA_CustomerSalesArea() {
        zjcBPA_CustomerSalesArea actual = new zjcBPA_CustomerSalesArea();

        actual.Customer = 'a';
        actual.SalesOrganization = 'a';
        actual.DistributionChannel = 'a';
        actual.Division = 'a';
        actual.AccountByCustomer = 'a';
        actual.AuthorizationGroup = 'a';
        actual.BillingIsBlockedForCustomer = 'a';
        actual.CompleteDeliveryIsDefined = true;
        actual.Currency_x = 'a';
        actual.CustomerABCClassification = 'a';
        actual.CustomerAccountAssignmentGroup = 'a';
        actual.CustomerGroup = 'a';
        actual.CustomerPaymentTerms = 'a';
        actual.CustomerPriceGroup = 'a';
        actual.CustomerPricingProcedure = 'a';
        actual.DeliveryIsBlockedForCustomer = 'a';
        actual.DeliveryPriority = 'a';
        actual.IncotermsClassification = 'a';
        actual.IncotermsLocation2 = 'a';
        actual.IncotermsVersion = 'a';
        actual.IncotermsLocation1 = 'a';
        actual.DeletionIndicator = true;
        actual.IncotermsTransferLocation = 'a';
        actual.InvoiceDate = 'a';
        actual.ItemOrderProbabilityInPercent = 'a';
        actual.OrderCombinationIsAllowed = true;
        actual.OrderIsBlockedForCustomer = 'a';
        actual.PartialDeliveryIsAllowed = 'a';
        actual.PriceListType = 'a';
        actual.SalesGroup = 'a';
        actual.SalesOffice = 'a';
        actual.ShippingCondition = 'a';
        actual.SupplyingPlant = 'a';
        actual.SalesDistrict = 'a';
        actual.InvoiceListSchedule = 'a';
        actual.ExchangeRateType = 'a';
        actual.AdditionalCustomerGroup1 = 'a';
        actual.AdditionalCustomerGroup2 = 'a';
        actual.AdditionalCustomerGroup3 = 'a';
        actual.AdditionalCustomerGroup4 = 'a';
        actual.AdditionalCustomerGroup5 = 'a';
        actual.PaymentGuaranteeProcedure = 'a';
        actual.CustomerAccountGroup = 'a';
        actual.to_PartnerFunction = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.AccountByCustomer);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BillingIsBlockedForCustomer);
        system.assertEquals(true, actual.CompleteDeliveryIsDefined);
        system.assertEquals('a', actual.Currency_x);
        system.assertEquals('a', actual.CustomerABCClassification);
        system.assertEquals('a', actual.CustomerAccountAssignmentGroup);
        system.assertEquals('a', actual.CustomerGroup);
        system.assertEquals('a', actual.CustomerPaymentTerms);
        system.assertEquals('a', actual.CustomerPriceGroup);
        system.assertEquals('a', actual.CustomerPricingProcedure);
        system.assertEquals('a', actual.DeliveryIsBlockedForCustomer);
        system.assertEquals('a', actual.DeliveryPriority);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals('a', actual.IncotermsVersion);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.InvoiceDate);
        system.assertEquals('a', actual.ItemOrderProbabilityInPercent);
        system.assertEquals(true, actual.OrderCombinationIsAllowed);
        system.assertEquals('a', actual.OrderIsBlockedForCustomer);
        system.assertEquals('a', actual.PartialDeliveryIsAllowed);
        system.assertEquals('a', actual.PriceListType);
        system.assertEquals('a', actual.SalesGroup);
        system.assertEquals('a', actual.SalesOffice);
        system.assertEquals('a', actual.ShippingCondition);
        system.assertEquals('a', actual.SupplyingPlant);
        system.assertEquals('a', actual.SalesDistrict);
        system.assertEquals('a', actual.InvoiceListSchedule);
        system.assertEquals('a', actual.ExchangeRateType);
        system.assertEquals('a', actual.AdditionalCustomerGroup1);
        system.assertEquals('a', actual.AdditionalCustomerGroup2);
        system.assertEquals('a', actual.AdditionalCustomerGroup3);
        system.assertEquals('a', actual.AdditionalCustomerGroup4);
        system.assertEquals('a', actual.AdditionalCustomerGroup5);
        system.assertEquals('a', actual.PaymentGuaranteeProcedure);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.to_PartnerFunction);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testA_CustSalesPartnerFunc() {
        zjcBPA_CustSalesPartnerFunc actual = new zjcBPA_CustSalesPartnerFunc();

        actual.Customer = 'a';
        actual.SalesOrganization = 'a';
        actual.DistributionChannel = 'a';
        actual.Division = 'a';
        actual.PartnerCounter = 'a';
        actual.PartnerFunction = 'a';
        actual.BPCustomerNumber = 'a';
        actual.CustomerPartnerDescription = 'a';
        actual.DefaultPartner = true;
        actual.Supplier = 'a';
        actual.PersonnelNumber = 'a';
        actual.ContactPerson = 'a';
        actual.AuthorizationGroup = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.PartnerCounter);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.BPCustomerNumber);
        system.assertEquals('a', actual.CustomerPartnerDescription);
        system.assertEquals(true, actual.DefaultPartner);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.PersonnelNumber);
        system.assertEquals('a', actual.ContactPerson);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testrunQuery() {
        zjcBP request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjcBP response = request.runQuery(query1);
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        zjcBP request = testSetup();
        zjcBP response = request.runInsert();
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        zjcBP request = testSetup();
        zjcBP response = request.runUpdate();
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        zjcBP request = testSetup();
        zjcBP response = request.runDelete();
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static zjcBP testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcBP');
        zjcBP request = new zjcBP();
        zjcBPA_BusinessPartner value1 = new zjcBPA_BusinessPartner();
        value1.BusinessPartner = 'a';
        request.A_BusinessPartner.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjcBP input = new zjcBP();
        zjcBPA_BusinessPartner value1 = new zjcBPA_BusinessPartner();
        value1.BusinessPartner = 'a';
        input.A_BusinessPartner.add(value1);
        zjcBP actual = (zjcBP)JSON.deserialize(input.serialize(), zjcBP.class);
        system.assertEquals('a', actual.A_BusinessPartner[0].BusinessPartner);
    }

    @istest
    private static void testDeserialize() {
        zjcBP output = new zjcBP();
        zjcBPA_BusinessPartner value1 = new zjcBPA_BusinessPartner();
        value1.BusinessPartner = 'a';
        output.A_BusinessPartner.add(value1);

        string s = output.serialize();
        zjcBP actual = zjcBP.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.A_BusinessPartner[0].BusinessPartner);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjcBP actual = zjcBP.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcBP.zjcBPException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjcBP output = new zjcBP();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjcBP output = new zjcBP();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcBP output2 = new zjcBP();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjcBP output = new zjcBP();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('A_BusinessPartner'));
        system.assert(keys.contains('A_BusinessPartnerAddress'));
        system.assert(keys.contains('A_Customer'));
        system.assert(keys.contains('A_CustomerCompany'));
        system.assert(keys.contains('A_CustomerSalesArea'));
        system.assert(keys.contains('A_CustSalesPartnerFunc'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('A_BusinessPartner', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('zjcBP');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        zjcBP.Parameters params = new zjcBP.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.requestData = new zjcBP();
        params.operation = 'Query';
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new zjcBP()) + '}';
        List<zjcBP.Parameters> paramList = new List<zjcBP.Parameters>{ params };

        Test.startTest();
        List<zjcBP.Result> results = zjcBP.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}