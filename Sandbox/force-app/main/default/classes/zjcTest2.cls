global class zjcTest2 extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Queryable {
/* 
 * Generated by Overcast UTC 2021-11-24 05:35:32Z.
 * This class belongs to the zjcTest2 Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class zjcTest2Exception extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global zjcTest2() {
        this.V_EQUI = new list<zjcTest2.V_EQUI>();
    }

    public class V_EQUI {
        @AuraEnabled public String MANDT { get; set; }
        @AuraEnabled public String EQUNR { get; set; }
        @AuraEnabled public Date ERDAT { get; set; }
        @AuraEnabled public String ERNAM { get; set; }
        @AuraEnabled public String EQASP { get; set; }
        @AuraEnabled public Date AEDAT { get; set; }
        @AuraEnabled public String AENAM { get; set; }
        @AuraEnabled public String BEGRU { get; set; }
        @AuraEnabled public String EQTYP { get; set; }
        @AuraEnabled public String EQART { get; set; }
        @AuraEnabled public String LVORM { get; set; }
        @AuraEnabled public String INVNR { get; set; }
        @AuraEnabled public Decimal BRGEW { get; set; }
        @AuraEnabled public String GEWEI { get; set; }
        @AuraEnabled public Date ANSDT { get; set; }
        @AuraEnabled public Decimal ANSWT { get; set; }
        @AuraEnabled public String WAERS { get; set; }
        @AuraEnabled public String ELIEF { get; set; }
        @AuraEnabled public Date GWLEN { get; set; }
        @AuraEnabled public Date GWLDT { get; set; }
        @AuraEnabled public String SERGE { get; set; }
        @AuraEnabled public Date GWLDV { get; set; }
        @AuraEnabled public String EQNUM { get; set; }
        @AuraEnabled public String OBJNR { get; set; }
        @AuraEnabled public String MATNR { get; set; }
        @AuraEnabled public String SERNR { get; set; }
        @AuraEnabled public String WERK { get; set; }
        @AuraEnabled public String KUNDE { get; set; }
        @AuraEnabled public String WARPL { get; set; }
        @AuraEnabled public String IMRC_POINT { get; set; }
        @AuraEnabled public String REVLV { get; set; }
        @AuraEnabled public Date DATBI { get; set; }
        @AuraEnabled public Date DATAB { get; set; }
        @AuraEnabled public String HEQUI { get; set; }
        @AuraEnabled public String SPRAS { get; set; }
        @AuraEnabled public String EQKTX { get; set; }
        @AuraEnabled public String EQKTU { get; set; }
        @AuraEnabled public String DAUFN { get; set; }
        @AuraEnabled public String AUFNR { get; set; }
        @AuraEnabled public String VKORG { get; set; }
        @AuraEnabled public String VTWEG { get; set; }
        @AuraEnabled public String SPART { get; set; }
        @AuraEnabled public String ADRNR { get; set; }

        public V_EQUI() {}

        public V_EQUI(String pMANDT, String pEQUNR, Date pERDAT, String pERNAM, String pEQASP, Date pAEDAT, String pAENAM, String pBEGRU, String pEQTYP, String pEQART, String pLVORM, String pINVNR, Decimal pBRGEW, String pGEWEI, Date pANSDT, Decimal pANSWT, String pWAERS, String pELIEF, Date pGWLEN, Date pGWLDT, String pSERGE, Date pGWLDV, String pEQNUM, String pOBJNR, String pMATNR, String pSERNR, String pWERK, String pKUNDE, String pWARPL, String pIMRC_POINT, String pREVLV, Date pDATBI) {
            this.MANDT = pMANDT;
            this.EQUNR = pEQUNR;
            this.ERDAT = pERDAT;
            this.ERNAM = pERNAM;
            this.EQASP = pEQASP;
            this.AEDAT = pAEDAT;
            this.AENAM = pAENAM;
            this.BEGRU = pBEGRU;
            this.EQTYP = pEQTYP;
            this.EQART = pEQART;
            this.LVORM = pLVORM;
            this.INVNR = pINVNR;
            this.BRGEW = pBRGEW;
            this.GEWEI = pGEWEI;
            this.ANSDT = pANSDT;
            this.ANSWT = pANSWT;
            this.WAERS = pWAERS;
            this.ELIEF = pELIEF;
            this.GWLEN = pGWLEN;
            this.GWLDT = pGWLDT;
            this.SERGE = pSERGE;
            this.GWLDV = pGWLDV;
            this.EQNUM = pEQNUM;
            this.OBJNR = pOBJNR;
            this.MATNR = pMATNR;
            this.SERNR = pSERNR;
            this.WERK = pWERK;
            this.KUNDE = pKUNDE;
            this.WARPL = pWARPL;
            this.IMRC_POINT = pIMRC_POINT;
            this.REVLV = pREVLV;
            this.DATBI = pDATBI;
        }
    }

    @AuraEnabled public list<zjcTest2.V_EQUI> V_EQUI { get; set; }

    public string inputSetName { get; set; }

    public zjcTest2 runQuery(overcast.Query query) {
        overcast.Logger logger1 = createLogger();
        try {
            zjcTest2 response = this.runQuery(query, logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public zjcTest2 runQuery(overcast.Query query, overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential);
    }

    public string runQueryAsync(overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential, con);
    }

    public static zjcTest2 getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return zjcTest2.deserialize(response.getBody());
    }

    private overcast.SynchronousHandler setup(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('zjcTest2');
        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
        sh.Operation = operation;

        if (query != null) {
            sh.Condition = query.where_x;
            sh.OrderBy = query.orderBy;
            sh.Fields = query.fields;
            sh.Limit_x = query.limit_x;
            sh.Offset = query.offset;
        }
        return sh;
    }
    
    private zjcTest2 run(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return zjcTest2.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return zjcTest2.deserialize(sh.Response);
    }

    private string runAsync(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();

        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }
        

    private static overcast.Logger createLogger() {
        return new overcast.Logger('zjcTest2');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static zjcTest2 deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            zjcTest2 obj = new zjcTest2();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new zjcTest2();
        }
        zjcTest2 obj = (zjcTest2)JSON.deserialize(outputData, zjcTest2.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new zjcTest2Exception('Response null for zjcTest2 request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                zjcTest2Exception ex = new zjcTest2Exception(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new zjcTest2Exception('Malformed response for zjcTest2 request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new zjcTest2Exception('Response null for zjcTest2 request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new zjcTest2Exception(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'V_EQUI';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(zjcTest2Meta0.metadata);
        }
        return metadata;
    }

}