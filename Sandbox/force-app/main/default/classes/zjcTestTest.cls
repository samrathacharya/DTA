/* 
 * Generated by Overcast UTC 2021-11-10 14:25:41Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcTestTest {
    @istest
    private static void testzjcTest() {
        zjcTest actual = new zjcTest();
        system.assertNotEquals(null, actual.KNA1);
    }

    @istest
    private static void TestKNA1() {
        zjcTest.KNA1 actual = new zjcTest.KNA1('a','a','a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.NAME1);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.REGIO);
        system.assertEquals('a', actual.SORTL);
        system.assertEquals('a', actual.STRAS);
        system.assertEquals('a', actual.TELF1);
        system.assertEquals('a', actual.TELFX);

        zjcTest.KNA1 actual0 = new zjcTest.KNA1();
    }
    @istest
    private static void testrunQuery() {
        zjcTest request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjcTest response = request.runQuery(query1);
        system.assertEquals('a', response.KNA1[0].KUNNR);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjcTest testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcTest');
        zjcTest request = new zjcTest();
        zjcTest.KNA1 value1 = new zjcTest.KNA1();
        value1.KUNNR = 'a';
        request.KNA1.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void TestSerialize() {
        zjcTest input = new zjcTest();
        zjcTest.KNA1 value1 = new zjcTest.KNA1();
        value1.KUNNR = 'a';
        input.KNA1.add(value1);
        zjcTest actual = (zjcTest)JSON.deserialize(input.serialize(), zjcTest.class);
        system.assertEquals('a', actual.KNA1[0].KUNNR);
    }

    @istest
    private static void TestDeserialize() {
        zjcTest output = new zjcTest();
        zjcTest.KNA1 value1 = new zjcTest.KNA1();
        value1.KUNNR = 'a';
        output.KNA1.add(value1);

        string s = output.serialize();
        zjcTest actual = zjcTest.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.KNA1[0].KUNNR);
    }

    @istest
    private static void TestDeserializeError() {
        try {
            zjcTest actual = zjcTest.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcTest.zjcTestException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void TestGetterSetter() {
        zjcTest output = new zjcTest();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void TestLoadAsyncResponse() {
        zjcTest output = new zjcTest();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcTest output2 = new zjcTest();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void TestGetMetadata() {
        zjcTest output = new zjcTest();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('KNA1'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('KNA1', first.name);
    }
}