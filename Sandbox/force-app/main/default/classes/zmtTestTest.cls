/* 
 * Generated by Overcast UTC 2021-12-02 10:21:20Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zmtTestTest {
    @istest
    private static void testzmtTest() {
        zmtTest actual = new zmtTest();
        system.assertNotEquals(null, actual.A_Customer);
    }

    @istest
    private static void testA_Customer() {
        zmtTestA_Customer actual = new zmtTestA_Customer();

        actual.Customer = 'a';
        actual.AuthorizationGroup = 'a';
        actual.BillingIsBlockedForCustomer = 'a';
        actual.CreatedByUser = 'a';
        actual.CreationDate = Datetime.newInstance(2000,1,1);
        actual.CustomerAccountGroup = 'a';
        actual.CustomerClassification = 'a';
        actual.CustomerFullName = 'a';
        actual.CustomerName = 'a';
        actual.DeliveryIsBlocked = 'a';
        actual.NFPartnerIsNaturalPerson = 'a';
        actual.OrderIsBlockedForCustomer = 'a';
        actual.PostingIsBlocked = true;
        actual.Supplier = 'a';
        actual.CustomerCorporateGroup = 'a';
        actual.FiscalAddress = 'a';
        actual.Industry = 'a';
        actual.IndustryCode1 = 'a';
        actual.IndustryCode2 = 'a';
        actual.IndustryCode3 = 'a';
        actual.IndustryCode4 = 'a';
        actual.IndustryCode5 = 'a';
        actual.InternationalLocationNumber1 = 'a';
        actual.NielsenRegion = 'a';
        actual.ResponsibleType = 'a';
        actual.TaxNumber1 = 'a';
        actual.TaxNumber2 = 'a';
        actual.TaxNumber3 = 'a';
        actual.TaxNumber4 = 'a';
        actual.TaxNumber5 = 'a';
        actual.TaxNumberType = 'a';
        actual.VATRegistration = 'a';
        actual.DeletionIndicator = true;
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BillingIsBlockedForCustomer);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.CustomerClassification);
        system.assertEquals('a', actual.CustomerFullName);
        system.assertEquals('a', actual.CustomerName);
        system.assertEquals('a', actual.DeliveryIsBlocked);
        system.assertEquals('a', actual.NFPartnerIsNaturalPerson);
        system.assertEquals('a', actual.OrderIsBlockedForCustomer);
        system.assertEquals(true, actual.PostingIsBlocked);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CustomerCorporateGroup);
        system.assertEquals('a', actual.FiscalAddress);
        system.assertEquals('a', actual.Industry);
        system.assertEquals('a', actual.IndustryCode1);
        system.assertEquals('a', actual.IndustryCode2);
        system.assertEquals('a', actual.IndustryCode3);
        system.assertEquals('a', actual.IndustryCode4);
        system.assertEquals('a', actual.IndustryCode5);
        system.assertEquals('a', actual.InternationalLocationNumber1);
        system.assertEquals('a', actual.NielsenRegion);
        system.assertEquals('a', actual.ResponsibleType);
        system.assertEquals('a', actual.TaxNumber1);
        system.assertEquals('a', actual.TaxNumber2);
        system.assertEquals('a', actual.TaxNumber3);
        system.assertEquals('a', actual.TaxNumber4);
        system.assertEquals('a', actual.TaxNumber5);
        system.assertEquals('a', actual.TaxNumberType);
        system.assertEquals('a', actual.VATRegistration);
        system.assertEquals(true, actual.DeletionIndicator);
    }
    @istest
    private static void testrunQuery() {
        zmtTest request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zmtTest response = request.runQuery(query1);
        system.assertEquals('a', response.A_Customer[0].Customer);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        zmtTest request = testSetup();
        zmtTest response = request.runInsert();
        system.assertEquals('a', response.A_Customer[0].Customer);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        zmtTest request = testSetup();
        zmtTest response = request.runUpdate();
        system.assertEquals('a', response.A_Customer[0].Customer);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        zmtTest request = testSetup();
        zmtTest response = request.runDelete();
        system.assertEquals('a', response.A_Customer[0].Customer);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static zmtTest testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zmtTest');
        zmtTest request = new zmtTest();
        zmtTestA_Customer value1 = new zmtTestA_Customer();
        value1.Customer = 'a';
        request.A_Customer.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zmtTest input = new zmtTest();
        zmtTestA_Customer value1 = new zmtTestA_Customer();
        value1.Customer = 'a';
        input.A_Customer.add(value1);
        zmtTest actual = (zmtTest)JSON.deserialize(input.serialize(), zmtTest.class);
        system.assertEquals('a', actual.A_Customer[0].Customer);
    }

    @istest
    private static void testDeserialize() {
        zmtTest output = new zmtTest();
        zmtTestA_Customer value1 = new zmtTestA_Customer();
        value1.Customer = 'a';
        output.A_Customer.add(value1);

        string s = output.serialize();
        zmtTest actual = zmtTest.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.A_Customer[0].Customer);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zmtTest actual = zmtTest.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zmtTest.zmtTestException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zmtTest output = new zmtTest();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zmtTest output = new zmtTest();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zmtTest output2 = new zmtTest();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zmtTest output = new zmtTest();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('A_Customer'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('A_Customer', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('zmtTest');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        zmtTest.Parameters params = new zmtTest.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.requestData = new zmtTest();
        params.operation = 'Query';
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new zmtTest()) + '}';
        List<zmtTest.Parameters> paramList = new List<zmtTest.Parameters>{ params };

        Test.startTest();
        List<zmtTest.Result> results = zmtTest.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}