/* 
 * Generated by Overcast UTC 2022-02-25 09:35:36Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class salesOrderReasonDescRTTest {
    @istest
    private static void testsalesOrderReasonDescRT() {
        salesOrderReasonDescRT actual = new salesOrderReasonDescRT();
        system.assertNotEquals(null, actual.TVAUT);
    }

    @istest
    private static void testTVAUT() {
        salesOrderReasonDescRT.TVAUT actual = new salesOrderReasonDescRT.TVAUT('a','a','a','a');

        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.AUGRU);
        system.assertEquals('a', actual.BEZEI);

        salesOrderReasonDescRT.TVAUT actual0 = new salesOrderReasonDescRT.TVAUT();
    }
    @istest
    private static void testrunQuery() {
        salesOrderReasonDescRT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        salesOrderReasonDescRT response = request.runQuery(query1);
        system.assertEquals('a', response.TVAUT[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static salesOrderReasonDescRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('salesOrderReasonDescRT');
        salesOrderReasonDescRT request = new salesOrderReasonDescRT();
        salesOrderReasonDescRT.TVAUT value1 = new salesOrderReasonDescRT.TVAUT();
        value1.MANDT = 'a';
        request.TVAUT.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        salesOrderReasonDescRT input = new salesOrderReasonDescRT();
        salesOrderReasonDescRT.TVAUT value1 = new salesOrderReasonDescRT.TVAUT();
        value1.MANDT = 'a';
        input.TVAUT.add(value1);
        salesOrderReasonDescRT actual = (salesOrderReasonDescRT)JSON.deserialize(input.serialize(), salesOrderReasonDescRT.class);
        system.assertEquals('a', actual.TVAUT[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        salesOrderReasonDescRT output = new salesOrderReasonDescRT();
        salesOrderReasonDescRT.TVAUT value1 = new salesOrderReasonDescRT.TVAUT();
        value1.MANDT = 'a';
        output.TVAUT.add(value1);

        string s = output.serialize();
        salesOrderReasonDescRT actual = salesOrderReasonDescRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.TVAUT[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            salesOrderReasonDescRT actual = salesOrderReasonDescRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (salesOrderReasonDescRT.salesOrderReasonDescRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        salesOrderReasonDescRT output = new salesOrderReasonDescRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        salesOrderReasonDescRT output = new salesOrderReasonDescRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        salesOrderReasonDescRT output2 = new salesOrderReasonDescRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        salesOrderReasonDescRT output = new salesOrderReasonDescRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('TVAUT'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('TVAUT', first.name);
    }

}