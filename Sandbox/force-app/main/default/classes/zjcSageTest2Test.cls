/* 
 * Generated by Overcast UTC 2021-12-05 22:39:44Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcSageTest2Test {
    @istest
    private static void testzjcSageTest2() {
        zjcSageTest2 actual = new zjcSageTest2();
        system.assertNotEquals(null, actual.fHCM2_Absence_c);
    }

    @istest
    private static void testfHCM2_Absence_c() {
        zjcSageTest2.fHCM2_Absence_c actual = new zjcSageTest2.fHCM2_Absence_c('a','a','a',Datetime.newInstance(2000,1,1),'a',Datetime.newInstance(2000,1,1),'a',Datetime.newInstance(2000,1,1),Date.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a',true,Date.newInstance(2000,1,1),true,Date.newInstance(2000,1,1),true,Date.newInstance(2000,1,1),0,Date.newInstance(2000,1,1),true,0,0,0,0,0,0,Date.newInstance(2000,1,1),'a',true);

        actual.fHCM2_Months_Since_End_c = 0;
        actual.fHCM2_Notes_c = 'a';
        actual.fHCM2_Paid_c = true;
        actual.fHCM2_Picture_c = 'a';
        actual.fHCM2_Reason_c = 'a';
        actual.fHCM2_Rejected_Date_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Self_Certificate_Required_c = true;
        actual.fHCM2_Start_Date_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Status_c = 'a';
        actual.fHCM2_Team_Member_Name_c = 'a';
        actual.fHCM2_Team_Member_c = 'a';
        actual.fHCM2_Type_c = 'a';
        actual.fHCM2_Actual_Arrival_Date_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Confirmed_Date_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Days_Taken_By_Partner_c = 0;
        actual.fHCM2_Earliest_Parental_Leave_End_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Earliest_Parental_Leave_Start_c = Date.newInstance(2000,1,1);
        actual.fHCM2_End_Date_Provisional_c = true;
        actual.fHCM2_Expected_Arrival_Date_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Is_Parental_Leave_c = true;
        actual.fHCM2_Is_Private_c = true;
        actual.fHCM2_Latest_Parental_Leave_End_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Latest_Parental_Leave_Start_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Notification_Date_c = Date.newInstance(2000,1,1);
        actual.fHCM2_Notification_Type_c = 'a';
        actual.fHCM2_Return_Intent_c = 'a';
        actual.fHCM2_Show_Team_c = 'a';
        actual.fHCM2_Still_Birth_c = true;
        actual.fHCM2_Rate_Units_c = 'a';
        actual.UD_Absence_Start_Date_c = 'a';
        actual.UD_Absence_End_Date_c = 'a';
        actual.fHCM2_Pay_Code_c = 'a';
        actual.Manager_ID_c = 'a';
        actual.Action_Link_c = 'a';
        actual.SMP_Personal_Leave_Type_c = 'a';
        actual.Inverse_Days_c = 0;
        actual.SMP_Country_c = 'a';
        actual.Unique_ID_c = 'a';
        actual.MicOpayReadyConcatenated_c = 'a';
        actual.Payroll_Number_c = 'a';
        actual.CheckApprovePaid_c = 'a';
        actual.Payflow_Export_c = 'a';
        actual.D_Tech_Services_Function_c = 'a';
        system.assertEquals('a', actual.Id);
        system.assertEquals('a', actual.Name);
        system.assertEquals('a', actual.RecordTypeId);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreatedDate);
        system.assertEquals('a', actual.CreatedById);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastModifiedDate);
        system.assertEquals('a', actual.LastModifiedById);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.SystemModstamp);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LastActivityDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastViewedDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastReferencedDate);
        system.assertEquals('a', actual.fHCM2_Employment_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Action_Date_c);
        system.assertEquals('a', actual.fHCM2_Action_c);
        system.assertEquals(true, actual.fHCM2_Alert_Trigger_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Approval_Date_c);
        system.assertEquals(true, actual.fHCM2_Approved_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Back_To_Work_Interview_Date_c);
        system.assertEquals(true, actual.fHCM2_Back_To_Work_Interview_Required_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Certified_Date_c);
        system.assertEquals(0, actual.fHCM2_Days_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_End_Date_c);
        system.assertEquals(true, actual.fHCM2_Evidence_Trigger_c);
        system.assertEquals(0, actual.fHCM2_Last_Modified_Accrued_Balence_c);
        system.assertEquals(0, actual.fHCM2_Last_Modified_Balence_c);
        system.assertEquals(0, actual.fHCM2_Last_Modified_Reason_Rolling_Days_c);
        system.assertEquals(0, actual.fHCM2_Last_Modified_Reason_Year_Days_c);
        system.assertEquals(0, actual.fHCM2_Last_Modified_Type_Rolling_Days_c);
        system.assertEquals(0, actual.fHCM2_Last_Modified_Type_Year_Days_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Manager_Action_Date_c);
        system.assertEquals('a', actual.fHCM2_Manager_Action_c);
        system.assertEquals(true, actual.fHCM2_Medical_Certificate_Required_c);
        system.assertEquals(0, actual.fHCM2_Months_Since_End_c);
        system.assertEquals('a', actual.fHCM2_Notes_c);
        system.assertEquals(true, actual.fHCM2_Paid_c);
        system.assertEquals('a', actual.fHCM2_Picture_c);
        system.assertEquals('a', actual.fHCM2_Reason_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Rejected_Date_c);
        system.assertEquals(true, actual.fHCM2_Self_Certificate_Required_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Start_Date_c);
        system.assertEquals('a', actual.fHCM2_Status_c);
        system.assertEquals('a', actual.fHCM2_Team_Member_Name_c);
        system.assertEquals('a', actual.fHCM2_Team_Member_c);
        system.assertEquals('a', actual.fHCM2_Type_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Actual_Arrival_Date_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Confirmed_Date_c);
        system.assertEquals(0, actual.fHCM2_Days_Taken_By_Partner_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Earliest_Parental_Leave_End_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Earliest_Parental_Leave_Start_c);
        system.assertEquals(true, actual.fHCM2_End_Date_Provisional_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Expected_Arrival_Date_c);
        system.assertEquals(true, actual.fHCM2_Is_Parental_Leave_c);
        system.assertEquals(true, actual.fHCM2_Is_Private_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Latest_Parental_Leave_End_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Latest_Parental_Leave_Start_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Notification_Date_c);
        system.assertEquals('a', actual.fHCM2_Notification_Type_c);
        system.assertEquals('a', actual.fHCM2_Return_Intent_c);
        system.assertEquals('a', actual.fHCM2_Show_Team_c);
        system.assertEquals(true, actual.fHCM2_Still_Birth_c);
        system.assertEquals('a', actual.fHCM2_Rate_Units_c);
        system.assertEquals('a', actual.UD_Absence_Start_Date_c);
        system.assertEquals('a', actual.UD_Absence_End_Date_c);
        system.assertEquals('a', actual.fHCM2_Pay_Code_c);
        system.assertEquals('a', actual.Manager_ID_c);
        system.assertEquals('a', actual.Action_Link_c);
        system.assertEquals('a', actual.SMP_Personal_Leave_Type_c);
        system.assertEquals(0, actual.Inverse_Days_c);
        system.assertEquals('a', actual.SMP_Country_c);
        system.assertEquals('a', actual.Unique_ID_c);
        system.assertEquals('a', actual.MicOpayReadyConcatenated_c);
        system.assertEquals('a', actual.Payroll_Number_c);
        system.assertEquals('a', actual.CheckApprovePaid_c);
        system.assertEquals('a', actual.Payflow_Export_c);
        system.assertEquals('a', actual.D_Tech_Services_Function_c);

        zjcSageTest2.fHCM2_Absence_c actual0 = new zjcSageTest2.fHCM2_Absence_c();
    }
    @istest
    private static void testrunQuery() {
        zjcSageTest2 request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjcSageTest2 response = request.runQuery(query1);
        system.assertEquals('a', response.fHCM2_Absence_c[0].Id);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        zjcSageTest2 request = testSetup();
        zjcSageTest2 response = request.runInsert();
        system.assertEquals('a', response.fHCM2_Absence_c[0].Id);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        zjcSageTest2 request = testSetup();
        zjcSageTest2 response = request.runUpdate();
        system.assertEquals('a', response.fHCM2_Absence_c[0].Id);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        zjcSageTest2 request = testSetup();
        zjcSageTest2 response = request.runDelete();
        system.assertEquals('a', response.fHCM2_Absence_c[0].Id);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static zjcSageTest2 testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcSageTest2');
        zjcSageTest2 request = new zjcSageTest2();
        zjcSageTest2.fHCM2_Absence_c value1 = new zjcSageTest2.fHCM2_Absence_c();
        value1.Id = 'a';
        request.fHCM2_Absence_c.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjcSageTest2 input = new zjcSageTest2();
        zjcSageTest2.fHCM2_Absence_c value1 = new zjcSageTest2.fHCM2_Absence_c();
        value1.Id = 'a';
        input.fHCM2_Absence_c.add(value1);
        zjcSageTest2 actual = (zjcSageTest2)JSON.deserialize(input.serialize(), zjcSageTest2.class);
        system.assertEquals('a', actual.fHCM2_Absence_c[0].Id);
    }

    @istest
    private static void testDeserialize() {
        zjcSageTest2 output = new zjcSageTest2();
        zjcSageTest2.fHCM2_Absence_c value1 = new zjcSageTest2.fHCM2_Absence_c();
        value1.Id = 'a';
        output.fHCM2_Absence_c.add(value1);

        string s = output.serialize();
        zjcSageTest2 actual = zjcSageTest2.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.fHCM2_Absence_c[0].Id);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjcSageTest2 actual = zjcSageTest2.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcSageTest2.zjcSageTest2Exception e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjcSageTest2 output = new zjcSageTest2();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjcSageTest2 output = new zjcSageTest2();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcSageTest2 output2 = new zjcSageTest2();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjcSageTest2 output = new zjcSageTest2();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('fHCM2_Absence_c'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('fHCM2_Absence_c', first.name);
    }

}