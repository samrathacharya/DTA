/* 
 * Generated by Overcast UTC 2021-11-18 03:50:17Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcTestODataTest {
    @istest
    private static void testzjcTestOData() {
        zjcTestOData actual = new zjcTestOData();
        system.assertNotEquals(null, actual.A_BusinessPartner);
        system.assertNotEquals(null, actual.A_BuPaIdentification);
        system.assertNotEquals(null, actual.A_BuPaIndustry);
        system.assertNotEquals(null, actual.A_BusinessPartnerAddress);
        system.assertNotEquals(null, actual.A_BuPaAddressUsage);
        system.assertNotEquals(null, actual.A_AddressEmailAddress);
        system.assertNotEquals(null, actual.A_AddressFaxNumber);
        system.assertNotEquals(null, actual.A_AddressPhoneNumber);
        system.assertNotEquals(null, actual.A_AddressHomePageURL);
        system.assertNotEquals(null, actual.A_BusinessPartnerBank);
        system.assertNotEquals(null, actual.A_BusinessPartnerContact);
        system.assertNotEquals(null, actual.A_BPContactToAddress);
        system.assertNotEquals(null, actual.A_BPContactToFuncAndDept);
        system.assertNotEquals(null, actual.A_BusinessPartnerRole);
        system.assertNotEquals(null, actual.A_BusinessPartnerTaxNumber);
        system.assertNotEquals(null, actual.A_Customer);
        system.assertNotEquals(null, actual.A_CustomerCompany);
        system.assertNotEquals(null, actual.A_CustomerCompanyText);
        system.assertNotEquals(null, actual.A_CustomerDunning);
        system.assertNotEquals(null, actual.A_CustomerWithHoldingTax);
        system.assertNotEquals(null, actual.A_CustomerSalesArea);
        system.assertNotEquals(null, actual.A_CustSalesPartnerFunc);
        system.assertNotEquals(null, actual.A_CustomerSalesAreaTax);
        system.assertNotEquals(null, actual.A_CustomerSalesAreaText);
        system.assertNotEquals(null, actual.A_CustomerTaxGrouping);
        system.assertNotEquals(null, actual.A_CustomerText);
        system.assertNotEquals(null, actual.A_Supplier);
        system.assertNotEquals(null, actual.A_SupplierCompany);
        system.assertNotEquals(null, actual.A_SupplierCompanyText);
        system.assertNotEquals(null, actual.A_SupplierDunning);
        system.assertNotEquals(null, actual.A_SupplierWithHoldingTax);
        system.assertNotEquals(null, actual.A_SupplierPurchasingOrg);
        system.assertNotEquals(null, actual.A_SupplierPartnerFunc);
        system.assertNotEquals(null, actual.A_SupplierPurchasingOrgText);
        system.assertNotEquals(null, actual.A_SupplierText);
    }

    @istest
    private static void testA_BusinessPartner() {
        zjcTestOData.A_BusinessPartner actual = new zjcTestOData.A_BusinessPartner('a','a','a','a','a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),Time.newInstance(1,0,0,0),'a','a','a','a','a',true,true,'a',true,'a','a',Datetime.newInstance(2000,1,1),Time.newInstance(1,0,0,0),'a','a','a','a','a');

        actual.OrganizationBPName3 = 'a';
        actual.OrganizationBPName4 = 'a';
        actual.OrganizationFoundationDate = Datetime.newInstance(2000,1,1);
        actual.OrganizationLiquidationDate = Datetime.newInstance(2000,1,1);
        actual.SearchTerm1 = 'a';
        actual.SearchTerm2 = 'a';
        actual.AdditionalLastName = 'a';
        actual.BirthDate = Datetime.newInstance(2000,1,1);
        actual.BusinessPartnerBirthDateStatus = 'a';
        actual.BusinessPartnerBirthplaceName = 'a';
        actual.BusinessPartnerIsBlocked = true;
        actual.BusinessPartnerType = 'a';
        actual.ETag = 'a';
        actual.GroupBusinessPartnerName1 = 'a';
        actual.GroupBusinessPartnerName2 = 'a';
        actual.IndependentAddressID = 'a';
        actual.InternationalLocationNumber3 = 'a';
        actual.MiddleName = 'a';
        actual.NameCountry = 'a';
        actual.NameFormat = 'a';
        actual.PersonFullName = 'a';
        actual.PersonNumber = 'a';
        actual.IsMarkedForArchiving = true;
        actual.BusinessPartnerIDByExtSystem = 'a';
        actual.TradingPartner = 'a';
        actual.to_BuPaIdentification = 'a';
        actual.to_BuPaIndustry = 'a';
        actual.to_BusinessPartnerAddress = 'a';
        actual.to_BusinessPartnerBank = 'a';
        actual.to_BusinessPartnerContact = 'a';
        actual.to_BusinessPartnerRole = 'a';
        actual.to_BusinessPartnerTax = 'a';
        actual.to_Customer = 'a';
        actual.to_Supplier = 'a';
        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.AcademicTitle);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BusinessPartnerCategory);
        system.assertEquals('a', actual.BusinessPartnerFullName);
        system.assertEquals('a', actual.BusinessPartnerGrouping);
        system.assertEquals('a', actual.BusinessPartnerName);
        system.assertEquals('a', actual.BusinessPartnerUUID);
        system.assertEquals('a', actual.CorrespondenceLanguage);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.CreationTime);
        system.assertEquals('a', actual.FirstName);
        system.assertEquals('a', actual.FormOfAddress);
        system.assertEquals('a', actual.Industry);
        system.assertEquals('a', actual.InternationalLocationNumber1);
        system.assertEquals('a', actual.InternationalLocationNumber2);
        system.assertEquals(true, actual.IsFemale);
        system.assertEquals(true, actual.IsMale);
        system.assertEquals('a', actual.IsNaturalPerson);
        system.assertEquals(true, actual.IsSexUnknown);
        system.assertEquals('a', actual.GenderCodeName);
        system.assertEquals('a', actual.Language);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastChangeDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.LastChangeTime);
        system.assertEquals('a', actual.LastChangedByUser);
        system.assertEquals('a', actual.LastName);
        system.assertEquals('a', actual.LegalForm);
        system.assertEquals('a', actual.OrganizationBPName1);
        system.assertEquals('a', actual.OrganizationBPName2);
        system.assertEquals('a', actual.OrganizationBPName3);
        system.assertEquals('a', actual.OrganizationBPName4);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.OrganizationFoundationDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.OrganizationLiquidationDate);
        system.assertEquals('a', actual.SearchTerm1);
        system.assertEquals('a', actual.SearchTerm2);
        system.assertEquals('a', actual.AdditionalLastName);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.BirthDate);
        system.assertEquals('a', actual.BusinessPartnerBirthDateStatus);
        system.assertEquals('a', actual.BusinessPartnerBirthplaceName);
        system.assertEquals(true, actual.BusinessPartnerIsBlocked);
        system.assertEquals('a', actual.BusinessPartnerType);
        system.assertEquals('a', actual.ETag);
        system.assertEquals('a', actual.GroupBusinessPartnerName1);
        system.assertEquals('a', actual.GroupBusinessPartnerName2);
        system.assertEquals('a', actual.IndependentAddressID);
        system.assertEquals('a', actual.InternationalLocationNumber3);
        system.assertEquals('a', actual.MiddleName);
        system.assertEquals('a', actual.NameCountry);
        system.assertEquals('a', actual.NameFormat);
        system.assertEquals('a', actual.PersonFullName);
        system.assertEquals('a', actual.PersonNumber);
        system.assertEquals(true, actual.IsMarkedForArchiving);
        system.assertEquals('a', actual.BusinessPartnerIDByExtSystem);
        system.assertEquals('a', actual.TradingPartner);
        system.assertEquals('a', actual.to_BuPaIdentification);
        system.assertEquals('a', actual.to_BuPaIndustry);
        system.assertEquals('a', actual.to_BusinessPartnerAddress);
        system.assertEquals('a', actual.to_BusinessPartnerBank);
        system.assertEquals('a', actual.to_BusinessPartnerContact);
        system.assertEquals('a', actual.to_BusinessPartnerRole);
        system.assertEquals('a', actual.to_BusinessPartnerTax);
        system.assertEquals('a', actual.to_Customer);
        system.assertEquals('a', actual.to_Supplier);

        zjcTestOData.A_BusinessPartner actual0 = new zjcTestOData.A_BusinessPartner();
    }
    @istest
    private static void testA_BuPaIdentification() {
        zjcTestOData.A_BuPaIdentification actual = new zjcTestOData.A_BuPaIdentification('a','a','a','a',Datetime.newInstance(2000,1,1),'a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a');

        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.BPIdentificationType);
        system.assertEquals('a', actual.BPIdentificationNumber);
        system.assertEquals('a', actual.BPIdnNmbrIssuingInstitute);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.BPIdentificationEntryDate);
        system.assertEquals('a', actual.Country);
        system.assertEquals('a', actual.Region);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BuPaIdentification actual0 = new zjcTestOData.A_BuPaIdentification();
    }
    @istest
    private static void testA_BuPaIndustry() {
        zjcTestOData.A_BuPaIndustry actual = new zjcTestOData.A_BuPaIndustry('a','a','a','a','a','a');

        system.assertEquals('a', actual.IndustrySector);
        system.assertEquals('a', actual.IndustrySystemType);
        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.IsStandardIndustry);
        system.assertEquals('a', actual.IndustryKeyDescription);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BuPaIndustry actual0 = new zjcTestOData.A_BuPaIndustry();
    }
    @istest
    private static void testA_BusinessPartnerAddress() {
        zjcTestOData.A_BusinessPartnerAddress actual = new zjcTestOData.A_BusinessPartnerAddress('a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',true,'a','a','a');

        actual.PostalCode = 'a';
        actual.PrfrdCommMediumType = 'a';
        actual.Region = 'a';
        actual.StreetName = 'a';
        actual.StreetPrefixName = 'a';
        actual.StreetSuffixName = 'a';
        actual.TaxJurisdiction = 'a';
        actual.TransportZone = 'a';
        actual.AddressIDByExternalSystem = 'a';
        actual.CountyCode = 'a';
        actual.TownshipCode = 'a';
        actual.TownshipName = 'a';
        actual.to_AddressUsage = 'a';
        actual.to_EmailAddress = 'a';
        actual.to_FaxNumber = 'a';
        actual.to_MobilePhoneNumber = 'a';
        actual.to_PhoneNumber = 'a';
        actual.to_URLAddress = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.AddressID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.AddressUUID);
        system.assertEquals('a', actual.AdditionalStreetPrefixName);
        system.assertEquals('a', actual.AdditionalStreetSuffixName);
        system.assertEquals('a', actual.AddressTimeZone);
        system.assertEquals('a', actual.CareOfName);
        system.assertEquals('a', actual.CityCode);
        system.assertEquals('a', actual.CityName);
        system.assertEquals('a', actual.CompanyPostalCode);
        system.assertEquals('a', actual.Country);
        system.assertEquals('a', actual.County);
        system.assertEquals('a', actual.DeliveryServiceNumber);
        system.assertEquals('a', actual.DeliveryServiceTypeCode);
        system.assertEquals('a', actual.District);
        system.assertEquals('a', actual.FormOfAddress);
        system.assertEquals('a', actual.FullName);
        system.assertEquals('a', actual.HomeCityName);
        system.assertEquals('a', actual.HouseNumber);
        system.assertEquals('a', actual.HouseNumberSupplementText);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.POBox);
        system.assertEquals('a', actual.POBoxDeviatingCityName);
        system.assertEquals('a', actual.POBoxDeviatingCountry);
        system.assertEquals('a', actual.POBoxDeviatingRegion);
        system.assertEquals(true, actual.POBoxIsWithoutNumber);
        system.assertEquals('a', actual.POBoxLobbyName);
        system.assertEquals('a', actual.POBoxPostalCode);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.PostalCode);
        system.assertEquals('a', actual.PrfrdCommMediumType);
        system.assertEquals('a', actual.Region);
        system.assertEquals('a', actual.StreetName);
        system.assertEquals('a', actual.StreetPrefixName);
        system.assertEquals('a', actual.StreetSuffixName);
        system.assertEquals('a', actual.TaxJurisdiction);
        system.assertEquals('a', actual.TransportZone);
        system.assertEquals('a', actual.AddressIDByExternalSystem);
        system.assertEquals('a', actual.CountyCode);
        system.assertEquals('a', actual.TownshipCode);
        system.assertEquals('a', actual.TownshipName);
        system.assertEquals('a', actual.to_AddressUsage);
        system.assertEquals('a', actual.to_EmailAddress);
        system.assertEquals('a', actual.to_FaxNumber);
        system.assertEquals('a', actual.to_MobilePhoneNumber);
        system.assertEquals('a', actual.to_PhoneNumber);
        system.assertEquals('a', actual.to_URLAddress);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BusinessPartnerAddress actual0 = new zjcTestOData.A_BusinessPartnerAddress();
    }
    @istest
    private static void testA_BuPaAddressUsage() {
        zjcTestOData.A_BuPaAddressUsage actual = new zjcTestOData.A_BuPaAddressUsage('a',Datetime.newInstance(2000,1,1),'a','a',Datetime.newInstance(2000,1,1),true,'a','a');

        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.AddressUsage);
        system.assertEquals('a', actual.AddressID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(true, actual.StandardUsage);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BuPaAddressUsage actual0 = new zjcTestOData.A_BuPaAddressUsage();
    }
    @istest
    private static void testA_AddressEmailAddress() {
        zjcTestOData.A_AddressEmailAddress actual = new zjcTestOData.A_AddressEmailAddress('a','a','a',true,'a','a','a','a');

        system.assertEquals('a', actual.AddressID);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.OrdinalNumber);
        system.assertEquals(true, actual.IsDefaultEmailAddress);
        system.assertEquals('a', actual.EmailAddress);
        system.assertEquals('a', actual.SearchEmailAddress);
        system.assertEquals('a', actual.AddressCommunicationRemarkText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_AddressEmailAddress actual0 = new zjcTestOData.A_AddressEmailAddress();
    }
    @istest
    private static void testA_AddressFaxNumber() {
        zjcTestOData.A_AddressFaxNumber actual = new zjcTestOData.A_AddressFaxNumber('a','a','a',true,'a','a','a','a','a','a');

        system.assertEquals('a', actual.AddressID);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.OrdinalNumber);
        system.assertEquals(true, actual.IsDefaultFaxNumber);
        system.assertEquals('a', actual.FaxCountry);
        system.assertEquals('a', actual.FaxNumber);
        system.assertEquals('a', actual.FaxNumberExtension);
        system.assertEquals('a', actual.InternationalFaxNumber);
        system.assertEquals('a', actual.AddressCommunicationRemarkText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_AddressFaxNumber actual0 = new zjcTestOData.A_AddressFaxNumber();
    }
    @istest
    private static void testA_AddressPhoneNumber() {
        zjcTestOData.A_AddressPhoneNumber actual = new zjcTestOData.A_AddressPhoneNumber('a','a','a','a',true,'a','a','a','a','a','a');

        system.assertEquals('a', actual.AddressID);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.OrdinalNumber);
        system.assertEquals('a', actual.DestinationLocationCountry);
        system.assertEquals(true, actual.IsDefaultPhoneNumber);
        system.assertEquals('a', actual.PhoneNumber);
        system.assertEquals('a', actual.PhoneNumberExtension);
        system.assertEquals('a', actual.InternationalPhoneNumber);
        system.assertEquals('a', actual.PhoneNumberType);
        system.assertEquals('a', actual.AddressCommunicationRemarkText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_AddressPhoneNumber actual0 = new zjcTestOData.A_AddressPhoneNumber();
    }
    @istest
    private static void testA_AddressHomePageURL() {
        zjcTestOData.A_AddressHomePageURL actual = new zjcTestOData.A_AddressHomePageURL('a','a','a',Datetime.newInstance(2000,1,1),true,'a','a',0,'a','a');

        system.assertEquals('a', actual.AddressID);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.OrdinalNumber);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(true, actual.IsDefaultURLAddress);
        system.assertEquals('a', actual.SearchURLAddress);
        system.assertEquals('a', actual.AddressCommunicationRemarkText);
        system.assertEquals(0, actual.URLFieldLength);
        system.assertEquals('a', actual.WebsiteURL);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_AddressHomePageURL actual0 = new zjcTestOData.A_AddressHomePageURL();
    }
    @istest
    private static void testA_BusinessPartnerBank() {
        zjcTestOData.A_BusinessPartnerBank actual = new zjcTestOData.A_BusinessPartnerBank('a','a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a',Datetime.newInstance(2000,1,1),'a','a',true,'a','a','a');

        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.BankIdentification);
        system.assertEquals('a', actual.BankCountryKey);
        system.assertEquals('a', actual.BankName);
        system.assertEquals('a', actual.BankNumber);
        system.assertEquals('a', actual.SWIFTCode);
        system.assertEquals('a', actual.BankControlKey);
        system.assertEquals('a', actual.BankAccountHolderName);
        system.assertEquals('a', actual.BankAccountName);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.IBAN);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.IBANValidityStartDate);
        system.assertEquals('a', actual.BankAccount);
        system.assertEquals('a', actual.BankAccountReferenceText);
        system.assertEquals(true, actual.CollectionAuthInd);
        system.assertEquals('a', actual.CityName);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BusinessPartnerBank actual0 = new zjcTestOData.A_BusinessPartnerBank();
    }
    @istest
    private static void testA_BusinessPartnerContact() {
        zjcTestOData.A_BusinessPartnerContact actual = new zjcTestOData.A_BusinessPartnerContact('a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),true,'a','a','a','a');

        system.assertEquals('a', actual.RelationshipNumber);
        system.assertEquals('a', actual.BusinessPartnerCompany);
        system.assertEquals('a', actual.BusinessPartnerPerson);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals(true, actual.IsStandardRelationship);
        system.assertEquals('a', actual.RelationshipCategory);
        system.assertEquals('a', actual.to_ContactAddress);
        system.assertEquals('a', actual.to_ContactRelationship);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BusinessPartnerContact actual0 = new zjcTestOData.A_BusinessPartnerContact();
    }
    @istest
    private static void testA_BPContactToAddress() {
        zjcTestOData.A_BPContactToAddress actual = new zjcTestOData.A_BPContactToAddress('a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',true,'a','a','a');

        actual.PostalCode = 'a';
        actual.PrfrdCommMediumType = 'a';
        actual.Region = 'a';
        actual.StreetName = 'a';
        actual.StreetPrefixName = 'a';
        actual.StreetSuffixName = 'a';
        actual.TaxJurisdiction = 'a';
        actual.TransportZone = 'a';
        actual.to_EmailAddress = 'a';
        actual.to_FaxNumber = 'a';
        actual.to_MobilePhoneNumber = 'a';
        actual.to_PhoneNumber = 'a';
        actual.to_URLAddress = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.RelationshipNumber);
        system.assertEquals('a', actual.BusinessPartnerCompany);
        system.assertEquals('a', actual.BusinessPartnerPerson);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.AddressID);
        system.assertEquals('a', actual.AddressNumber);
        system.assertEquals('a', actual.AdditionalStreetPrefixName);
        system.assertEquals('a', actual.AdditionalStreetSuffixName);
        system.assertEquals('a', actual.AddressTimeZone);
        system.assertEquals('a', actual.CareOfName);
        system.assertEquals('a', actual.CityCode);
        system.assertEquals('a', actual.CityName);
        system.assertEquals('a', actual.CompanyPostalCode);
        system.assertEquals('a', actual.Country);
        system.assertEquals('a', actual.County);
        system.assertEquals('a', actual.DeliveryServiceNumber);
        system.assertEquals('a', actual.DeliveryServiceTypeCode);
        system.assertEquals('a', actual.District);
        system.assertEquals('a', actual.FormOfAddress);
        system.assertEquals('a', actual.FullName);
        system.assertEquals('a', actual.HomeCityName);
        system.assertEquals('a', actual.HouseNumber);
        system.assertEquals('a', actual.HouseNumberSupplementText);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.POBox);
        system.assertEquals('a', actual.POBoxDeviatingCityName);
        system.assertEquals('a', actual.POBoxDeviatingCountry);
        system.assertEquals('a', actual.POBoxDeviatingRegion);
        system.assertEquals(true, actual.POBoxIsWithoutNumber);
        system.assertEquals('a', actual.POBoxLobbyName);
        system.assertEquals('a', actual.POBoxPostalCode);
        system.assertEquals('a', actual.Person);
        system.assertEquals('a', actual.PostalCode);
        system.assertEquals('a', actual.PrfrdCommMediumType);
        system.assertEquals('a', actual.Region);
        system.assertEquals('a', actual.StreetName);
        system.assertEquals('a', actual.StreetPrefixName);
        system.assertEquals('a', actual.StreetSuffixName);
        system.assertEquals('a', actual.TaxJurisdiction);
        system.assertEquals('a', actual.TransportZone);
        system.assertEquals('a', actual.to_EmailAddress);
        system.assertEquals('a', actual.to_FaxNumber);
        system.assertEquals('a', actual.to_MobilePhoneNumber);
        system.assertEquals('a', actual.to_PhoneNumber);
        system.assertEquals('a', actual.to_URLAddress);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BPContactToAddress actual0 = new zjcTestOData.A_BPContactToAddress();
    }
    @istest
    private static void testA_BPContactToFuncAndDept() {
        zjcTestOData.A_BPContactToFuncAndDept actual = new zjcTestOData.A_BPContactToFuncAndDept('a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.RelationshipNumber);
        system.assertEquals('a', actual.BusinessPartnerCompany);
        system.assertEquals('a', actual.BusinessPartnerPerson);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.ContactPersonFunction);
        system.assertEquals('a', actual.ContactPersonDepartment);
        system.assertEquals('a', actual.PhoneNumber);
        system.assertEquals('a', actual.PhoneNumberExtension);
        system.assertEquals('a', actual.FaxNumber);
        system.assertEquals('a', actual.FaxNumberExtension);
        system.assertEquals('a', actual.EmailAddress);
        system.assertEquals('a', actual.RelationshipCategory);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BPContactToFuncAndDept actual0 = new zjcTestOData.A_BPContactToFuncAndDept();
    }
    @istest
    private static void testA_BusinessPartnerRole() {
        zjcTestOData.A_BusinessPartnerRole actual = new zjcTestOData.A_BusinessPartnerRole('a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a');

        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.BusinessPartnerRole);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidFrom);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidTo);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BusinessPartnerRole actual0 = new zjcTestOData.A_BusinessPartnerRole();
    }
    @istest
    private static void testA_BusinessPartnerTaxNumber() {
        zjcTestOData.A_BusinessPartnerTaxNumber actual = new zjcTestOData.A_BusinessPartnerTaxNumber('a','a','a','a','a','a');

        system.assertEquals('a', actual.BusinessPartner);
        system.assertEquals('a', actual.BPTaxType);
        system.assertEquals('a', actual.BPTaxNumber);
        system.assertEquals('a', actual.BPTaxLongNumber);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_BusinessPartnerTaxNumber actual0 = new zjcTestOData.A_BusinessPartnerTaxNumber();
    }
    @istest
    private static void testA_Customer() {
        zjcTestOData.A_Customer actual = new zjcTestOData.A_Customer('a','a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a',true,'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        actual.DeletionIndicator = true;
        actual.to_CustomerCompany = 'a';
        actual.to_CustomerSalesArea = 'a';
        actual.to_CustomerTaxGrouping = 'a';
        actual.to_CustomerText = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BillingIsBlockedForCustomer);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.CustomerClassification);
        system.assertEquals('a', actual.CustomerFullName);
        system.assertEquals('a', actual.CustomerName);
        system.assertEquals('a', actual.DeliveryIsBlocked);
        system.assertEquals('a', actual.NFPartnerIsNaturalPerson);
        system.assertEquals('a', actual.OrderIsBlockedForCustomer);
        system.assertEquals(true, actual.PostingIsBlocked);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CustomerCorporateGroup);
        system.assertEquals('a', actual.FiscalAddress);
        system.assertEquals('a', actual.Industry);
        system.assertEquals('a', actual.IndustryCode1);
        system.assertEquals('a', actual.IndustryCode2);
        system.assertEquals('a', actual.IndustryCode3);
        system.assertEquals('a', actual.IndustryCode4);
        system.assertEquals('a', actual.IndustryCode5);
        system.assertEquals('a', actual.InternationalLocationNumber1);
        system.assertEquals('a', actual.NielsenRegion);
        system.assertEquals('a', actual.ResponsibleType);
        system.assertEquals('a', actual.TaxNumber1);
        system.assertEquals('a', actual.TaxNumber2);
        system.assertEquals('a', actual.TaxNumber3);
        system.assertEquals('a', actual.TaxNumber4);
        system.assertEquals('a', actual.TaxNumber5);
        system.assertEquals('a', actual.TaxNumberType);
        system.assertEquals('a', actual.VATRegistration);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.to_CustomerCompany);
        system.assertEquals('a', actual.to_CustomerSalesArea);
        system.assertEquals('a', actual.to_CustomerTaxGrouping);
        system.assertEquals('a', actual.to_CustomerText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_Customer actual0 = new zjcTestOData.A_Customer();
    }
    @istest
    private static void testA_CustomerCompany() {
        zjcTestOData.A_CustomerCompany actual = new zjcTestOData.A_CustomerCompany('a','a','a','a','a','a','a','a','a','a','a','a','a',true,'a','a',Datetime.newInstance(2000,1,1),'a',true,true,'a','a','a','a',true,true,'a',true,'a',true,'a','a');

        actual.ValueAdjustmentKey = 'a';
        actual.CustomerAccountGroup = 'a';
        actual.to_CompanyText = 'a';
        actual.to_CustomerDunning = 'a';
        actual.to_WithHoldingTax = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.APARToleranceGroup);
        system.assertEquals('a', actual.AccountByCustomer);
        system.assertEquals('a', actual.AccountingClerk);
        system.assertEquals('a', actual.AccountingClerkFaxNumber);
        system.assertEquals('a', actual.AccountingClerkInternetAddress);
        system.assertEquals('a', actual.AccountingClerkPhoneNumber);
        system.assertEquals('a', actual.AlternativePayerAccount);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.CollectiveInvoiceVariant);
        system.assertEquals('a', actual.CustomerAccountNote);
        system.assertEquals('a', actual.CustomerHeadOffice);
        system.assertEquals(true, actual.CustomerSupplierClearingIsUsed);
        system.assertEquals('a', actual.HouseBank);
        system.assertEquals('a', actual.InterestCalculationCode);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.InterestCalculationDate);
        system.assertEquals('a', actual.IntrstCalcFrequencyInMonths);
        system.assertEquals(true, actual.IsToBeLocallyProcessed);
        system.assertEquals(true, actual.ItemIsToBePaidSeparately);
        system.assertEquals('a', actual.LayoutSortingRule);
        system.assertEquals('a', actual.PaymentBlockingReason);
        system.assertEquals('a', actual.PaymentMethodsList);
        system.assertEquals('a', actual.PaymentTerms);
        system.assertEquals(true, actual.PaytAdviceIsSentbyEDI);
        system.assertEquals(true, actual.PhysicalInventoryBlockInd);
        system.assertEquals('a', actual.ReconciliationAccount);
        system.assertEquals(true, actual.RecordPaymentHistoryIndicator);
        system.assertEquals('a', actual.UserAtCustomer);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.CashPlanningGroup);
        system.assertEquals('a', actual.KnownOrNegotiatedLeave);
        system.assertEquals('a', actual.ValueAdjustmentKey);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.to_CompanyText);
        system.assertEquals('a', actual.to_CustomerDunning);
        system.assertEquals('a', actual.to_WithHoldingTax);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerCompany actual0 = new zjcTestOData.A_CustomerCompany();
    }
    @istest
    private static void testA_CustomerCompanyText() {
        zjcTestOData.A_CustomerCompanyText actual = new zjcTestOData.A_CustomerCompanyText('a','a','a','a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.LongTextID);
        system.assertEquals('a', actual.LongText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerCompanyText actual0 = new zjcTestOData.A_CustomerCompanyText();
    }
    @istest
    private static void testA_CustomerDunning() {
        zjcTestOData.A_CustomerDunning actual = new zjcTestOData.A_CustomerDunning('a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.DunningArea);
        system.assertEquals('a', actual.DunningBlock);
        system.assertEquals('a', actual.DunningLevel);
        system.assertEquals('a', actual.DunningProcedure);
        system.assertEquals('a', actual.DunningRecipient);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastDunnedOn);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LegDunningProcedureOn);
        system.assertEquals('a', actual.DunningClerk);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerDunning actual0 = new zjcTestOData.A_CustomerDunning();
    }
    @istest
    private static void testA_CustomerWithHoldingTax() {
        zjcTestOData.A_CustomerWithHoldingTax actual = new zjcTestOData.A_CustomerWithHoldingTax('a','a','a','a',true,Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a',0,Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.WithholdingTaxType);
        system.assertEquals('a', actual.WithholdingTaxCode);
        system.assertEquals(true, actual.WithholdingTaxAgent);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ObligationDateBegin);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ObligationDateEnd);
        system.assertEquals('a', actual.WithholdingTaxNumber);
        system.assertEquals('a', actual.WithholdingTaxCertificate);
        system.assertEquals(0, actual.WithholdingTaxExmptPercent);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ExemptionDateBegin);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ExemptionDateEnd);
        system.assertEquals('a', actual.ExemptionReason);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerWithHoldingTax actual0 = new zjcTestOData.A_CustomerWithHoldingTax();
    }
    @istest
    private static void testA_CustomerSalesArea() {
        zjcTestOData.A_CustomerSalesArea actual = new zjcTestOData.A_CustomerSalesArea('a','a','a','a','a','a','a',true,'a','a','a','a','a','a','a','a','a','a','a','a','a',true,'a','a','a',true,'a','a','a','a','a','a');

        actual.SupplyingPlant = 'a';
        actual.SalesDistrict = 'a';
        actual.InvoiceListSchedule = 'a';
        actual.ExchangeRateType = 'a';
        actual.AdditionalCustomerGroup1 = 'a';
        actual.AdditionalCustomerGroup2 = 'a';
        actual.AdditionalCustomerGroup3 = 'a';
        actual.AdditionalCustomerGroup4 = 'a';
        actual.AdditionalCustomerGroup5 = 'a';
        actual.PaymentGuaranteeProcedure = 'a';
        actual.CustomerAccountGroup = 'a';
        actual.to_PartnerFunction = 'a';
        actual.to_SalesAreaTax = 'a';
        actual.to_SalesAreaText = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.AccountByCustomer);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.BillingIsBlockedForCustomer);
        system.assertEquals(true, actual.CompleteDeliveryIsDefined);
        system.assertEquals('a', actual.Currency_x);
        system.assertEquals('a', actual.CustomerABCClassification);
        system.assertEquals('a', actual.CustomerAccountAssignmentGroup);
        system.assertEquals('a', actual.CustomerGroup);
        system.assertEquals('a', actual.CustomerPaymentTerms);
        system.assertEquals('a', actual.CustomerPriceGroup);
        system.assertEquals('a', actual.CustomerPricingProcedure);
        system.assertEquals('a', actual.DeliveryIsBlockedForCustomer);
        system.assertEquals('a', actual.DeliveryPriority);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals('a', actual.IncotermsVersion);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.InvoiceDate);
        system.assertEquals('a', actual.ItemOrderProbabilityInPercent);
        system.assertEquals(true, actual.OrderCombinationIsAllowed);
        system.assertEquals('a', actual.OrderIsBlockedForCustomer);
        system.assertEquals('a', actual.PartialDeliveryIsAllowed);
        system.assertEquals('a', actual.PriceListType);
        system.assertEquals('a', actual.SalesGroup);
        system.assertEquals('a', actual.SalesOffice);
        system.assertEquals('a', actual.ShippingCondition);
        system.assertEquals('a', actual.SupplyingPlant);
        system.assertEquals('a', actual.SalesDistrict);
        system.assertEquals('a', actual.InvoiceListSchedule);
        system.assertEquals('a', actual.ExchangeRateType);
        system.assertEquals('a', actual.AdditionalCustomerGroup1);
        system.assertEquals('a', actual.AdditionalCustomerGroup2);
        system.assertEquals('a', actual.AdditionalCustomerGroup3);
        system.assertEquals('a', actual.AdditionalCustomerGroup4);
        system.assertEquals('a', actual.AdditionalCustomerGroup5);
        system.assertEquals('a', actual.PaymentGuaranteeProcedure);
        system.assertEquals('a', actual.CustomerAccountGroup);
        system.assertEquals('a', actual.to_PartnerFunction);
        system.assertEquals('a', actual.to_SalesAreaTax);
        system.assertEquals('a', actual.to_SalesAreaText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerSalesArea actual0 = new zjcTestOData.A_CustomerSalesArea();
    }
    @istest
    private static void testA_CustSalesPartnerFunc() {
        zjcTestOData.A_CustSalesPartnerFunc actual = new zjcTestOData.A_CustSalesPartnerFunc('a','a','a','a','a','a','a','a',true,'a','a','a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.PartnerCounter);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.BPCustomerNumber);
        system.assertEquals('a', actual.CustomerPartnerDescription);
        system.assertEquals(true, actual.DefaultPartner);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.PersonnelNumber);
        system.assertEquals('a', actual.ContactPerson);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustSalesPartnerFunc actual0 = new zjcTestOData.A_CustSalesPartnerFunc();
    }
    @istest
    private static void testA_CustomerSalesAreaTax() {
        zjcTestOData.A_CustomerSalesAreaTax actual = new zjcTestOData.A_CustomerSalesAreaTax('a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.DepartureCountry);
        system.assertEquals('a', actual.CustomerTaxCategory);
        system.assertEquals('a', actual.CustomerTaxClassification);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerSalesAreaTax actual0 = new zjcTestOData.A_CustomerSalesAreaTax();
    }
    @istest
    private static void testA_CustomerSalesAreaText() {
        zjcTestOData.A_CustomerSalesAreaText actual = new zjcTestOData.A_CustomerSalesAreaText('a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.Division);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.LongTextID);
        system.assertEquals('a', actual.LongText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerSalesAreaText actual0 = new zjcTestOData.A_CustomerSalesAreaText();
    }
    @istest
    private static void testA_CustomerTaxGrouping() {
        zjcTestOData.A_CustomerTaxGrouping actual = new zjcTestOData.A_CustomerTaxGrouping('a','a','a',0,Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.CustomerTaxGroupingCode);
        system.assertEquals('a', actual.CustTaxGrpExemptionCertificate);
        system.assertEquals(0, actual.CustTaxGroupExemptionRate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustTaxGroupExemptionStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustTaxGroupExemptionEndDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustTaxGroupSubjectedStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustTaxGroupSubjectedEndDate);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerTaxGrouping actual0 = new zjcTestOData.A_CustomerTaxGrouping();
    }
    @istest
    private static void testA_CustomerText() {
        zjcTestOData.A_CustomerText actual = new zjcTestOData.A_CustomerText('a','a','a','a','a');

        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.LongTextID);
        system.assertEquals('a', actual.LongText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_CustomerText actual0 = new zjcTestOData.A_CustomerText();
    }
    @istest
    private static void testA_Supplier() {
        zjcTestOData.A_Supplier actual = new zjcTestOData.A_Supplier('a','a','a','a',Datetime.newInstance(2000,1,1),'a',true,true,true,'a','a','a','a',Datetime.newInstance(2000,1,1),'a',true,'a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a');

        actual.TaxNumberResponsible = 'a';
        actual.TaxNumberType = 'a';
        actual.SuplrProofOfDelivRlvtCode = 'a';
        actual.BR_TaxIsSplit = true;
        actual.to_SupplierCompany = 'a';
        actual.to_SupplierPurchasingOrg = 'a';
        actual.to_SupplierText = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.AlternativePayeeAccountNumber);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.Customer);
        system.assertEquals(true, actual.PaymentIsBlockedForSupplier);
        system.assertEquals(true, actual.PostingIsBlocked);
        system.assertEquals(true, actual.PurchasingIsBlocked);
        system.assertEquals('a', actual.SupplierAccountGroup);
        system.assertEquals('a', actual.SupplierFullName);
        system.assertEquals('a', actual.SupplierName);
        system.assertEquals('a', actual.VATRegistration);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.BirthDate);
        system.assertEquals('a', actual.ConcatenatedInternationalLocNo);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.FiscalAddress);
        system.assertEquals('a', actual.Industry);
        system.assertEquals('a', actual.InternationalLocationNumber1);
        system.assertEquals('a', actual.InternationalLocationNumber2);
        system.assertEquals('a', actual.InternationalLocationNumber3);
        system.assertEquals('a', actual.IsNaturalPerson);
        system.assertEquals('a', actual.ResponsibleType);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.SuplrQltyInProcmtCertfnValidTo);
        system.assertEquals('a', actual.SuplrQualityManagementSystem);
        system.assertEquals('a', actual.SupplierCorporateGroup);
        system.assertEquals('a', actual.SupplierProcurementBlock);
        system.assertEquals('a', actual.TaxNumber1);
        system.assertEquals('a', actual.TaxNumber2);
        system.assertEquals('a', actual.TaxNumber3);
        system.assertEquals('a', actual.TaxNumber4);
        system.assertEquals('a', actual.TaxNumber5);
        system.assertEquals('a', actual.TaxNumberResponsible);
        system.assertEquals('a', actual.TaxNumberType);
        system.assertEquals('a', actual.SuplrProofOfDelivRlvtCode);
        system.assertEquals(true, actual.BR_TaxIsSplit);
        system.assertEquals('a', actual.to_SupplierCompany);
        system.assertEquals('a', actual.to_SupplierPurchasingOrg);
        system.assertEquals('a', actual.to_SupplierText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_Supplier actual0 = new zjcTestOData.A_Supplier();
    }
    @istest
    private static void testA_SupplierCompany() {
        zjcTestOData.A_SupplierCompany actual = new zjcTestOData.A_SupplierCompany('a','a','a','a','a',true,'a','a','a','a','a','a','a',true,true,true,true,'a',0,'a',0,'a','a','a',Datetime.newInstance(2000,1,1),'a','a','a','a','a',Datetime.newInstance(2000,1,1),'a');

        actual.WithholdingTaxCountry = 'a';
        actual.DeletionIndicator = true;
        actual.CashPlanningGroup = 'a';
        actual.IsToBeCheckedForDuplicates = true;
        actual.MinorityGroup = 'a';
        actual.SupplierAccountGroup = 'a';
        actual.to_CompanyText = 'a';
        actual.to_Supplier = 'a';
        actual.to_SupplierDunning = 'a';
        actual.to_SupplierWithHoldingTax = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.CompanyCodeName);
        system.assertEquals('a', actual.PaymentBlockingReason);
        system.assertEquals(true, actual.SupplierIsBlockedForPosting);
        system.assertEquals('a', actual.AccountingClerk);
        system.assertEquals('a', actual.AccountingClerkFaxNumber);
        system.assertEquals('a', actual.AccountingClerkPhoneNumber);
        system.assertEquals('a', actual.SupplierClerk);
        system.assertEquals('a', actual.SupplierClerkURL);
        system.assertEquals('a', actual.PaymentMethodsList);
        system.assertEquals('a', actual.PaymentTerms);
        system.assertEquals(true, actual.ClearCustomerSupplier);
        system.assertEquals(true, actual.IsToBeLocallyProcessed);
        system.assertEquals(true, actual.ItemIsToBePaidSeparately);
        system.assertEquals(true, actual.PaymentIsToBeSentByEDI);
        system.assertEquals('a', actual.HouseBank);
        system.assertEquals(0, actual.CheckPaidDurationInDays);
        system.assertEquals('a', actual.Currency_x);
        system.assertEquals(0, actual.BillOfExchLmtAmtInCoCodeCrcy);
        system.assertEquals('a', actual.SupplierClerkIDBySupplier);
        system.assertEquals('a', actual.ReconciliationAccount);
        system.assertEquals('a', actual.InterestCalculationCode);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.InterestCalculationDate);
        system.assertEquals('a', actual.IntrstCalcFrequencyInMonths);
        system.assertEquals('a', actual.SupplierHeadOffice);
        system.assertEquals('a', actual.AlternativePayee);
        system.assertEquals('a', actual.LayoutSortingRule);
        system.assertEquals('a', actual.APARToleranceGroup);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.SupplierCertificationDate);
        system.assertEquals('a', actual.SupplierAccountNote);
        system.assertEquals('a', actual.WithholdingTaxCountry);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.CashPlanningGroup);
        system.assertEquals(true, actual.IsToBeCheckedForDuplicates);
        system.assertEquals('a', actual.MinorityGroup);
        system.assertEquals('a', actual.SupplierAccountGroup);
        system.assertEquals('a', actual.to_CompanyText);
        system.assertEquals('a', actual.to_Supplier);
        system.assertEquals('a', actual.to_SupplierDunning);
        system.assertEquals('a', actual.to_SupplierWithHoldingTax);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierCompany actual0 = new zjcTestOData.A_SupplierCompany();
    }
    @istest
    private static void testA_SupplierCompanyText() {
        zjcTestOData.A_SupplierCompanyText actual = new zjcTestOData.A_SupplierCompanyText('a','a','a','a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.LongTextID);
        system.assertEquals('a', actual.LongText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierCompanyText actual0 = new zjcTestOData.A_SupplierCompanyText();
    }
    @istest
    private static void testA_SupplierDunning() {
        zjcTestOData.A_SupplierDunning actual = new zjcTestOData.A_SupplierDunning('a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.DunningArea);
        system.assertEquals('a', actual.DunningBlock);
        system.assertEquals('a', actual.DunningLevel);
        system.assertEquals('a', actual.DunningProcedure);
        system.assertEquals('a', actual.DunningRecipient);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastDunnedOn);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LegDunningProcedureOn);
        system.assertEquals('a', actual.DunningClerk);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.SupplierAccountGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierDunning actual0 = new zjcTestOData.A_SupplierDunning();
    }
    @istest
    private static void testA_SupplierWithHoldingTax() {
        zjcTestOData.A_SupplierWithHoldingTax actual = new zjcTestOData.A_SupplierWithHoldingTax('a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a',true,'a','a','a',0,'a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.WithholdingTaxType);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ExemptionDateBegin);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ExemptionDateEnd);
        system.assertEquals('a', actual.ExemptionReason);
        system.assertEquals(true, actual.IsWithholdingTaxSubject);
        system.assertEquals('a', actual.RecipientType);
        system.assertEquals('a', actual.WithholdingTaxCertificate);
        system.assertEquals('a', actual.WithholdingTaxCode);
        system.assertEquals(0, actual.WithholdingTaxExmptPercent);
        system.assertEquals('a', actual.WithholdingTaxNumber);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierWithHoldingTax actual0 = new zjcTestOData.A_SupplierWithHoldingTax();
    }
    @istest
    private static void testA_SupplierPurchasingOrg() {
        zjcTestOData.A_SupplierPurchasingOrg actual = new zjcTestOData.A_SupplierPurchasingOrg('a','a','a',true,'a','a','a','a','a',true,0,0,'a','a',true,'a','a',true,'a','a','a','a','a',true,'a','a','a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.PurchasingOrganization);
        system.assertEquals('a', actual.CalculationSchemaGroupCode);
        system.assertEquals(true, actual.DeletionIndicator);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.IncotermsVersion);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals(true, actual.InvoiceIsGoodsReceiptBased);
        system.assertEquals(0, actual.MaterialPlannedDeliveryDurn);
        system.assertEquals(0, actual.MinimumOrderAmount);
        system.assertEquals('a', actual.PaymentTerms);
        system.assertEquals('a', actual.PricingDateControl);
        system.assertEquals(true, actual.PurOrdAutoGenerationIsAllowed);
        system.assertEquals('a', actual.PurchaseOrderCurrency);
        system.assertEquals('a', actual.PurchasingGroup);
        system.assertEquals(true, actual.PurchasingIsBlockedForSupplier);
        system.assertEquals('a', actual.ShippingCondition);
        system.assertEquals('a', actual.SupplierABCClassificationCode);
        system.assertEquals('a', actual.SupplierPhoneNumber);
        system.assertEquals('a', actual.SupplierRespSalesPersonName);
        system.assertEquals('a', actual.SupplierConfirmationControlKey);
        system.assertEquals(true, actual.IsOrderAcknRqd);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.SupplierAccountGroup);
        system.assertEquals('a', actual.to_PartnerFunction);
        system.assertEquals('a', actual.to_PurchasingOrgText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierPurchasingOrg actual0 = new zjcTestOData.A_SupplierPurchasingOrg();
    }
    @istest
    private static void testA_SupplierPartnerFunc() {
        zjcTestOData.A_SupplierPartnerFunc actual = new zjcTestOData.A_SupplierPartnerFunc('a','a','a','a','a','a',true,Datetime.newInstance(2000,1,1),'a','a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.PurchasingOrganization);
        system.assertEquals('a', actual.SupplierSubrange);
        system.assertEquals('a', actual.Plant);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.PartnerCounter);
        system.assertEquals(true, actual.DefaultPartner);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals('a', actual.ReferenceSupplier);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierPartnerFunc actual0 = new zjcTestOData.A_SupplierPartnerFunc();
    }
    @istest
    private static void testA_SupplierPurchasingOrgText() {
        zjcTestOData.A_SupplierPurchasingOrgText actual = new zjcTestOData.A_SupplierPurchasingOrgText('a','a','a','a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.PurchasingOrganization);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.LongTextID);
        system.assertEquals('a', actual.LongText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierPurchasingOrgText actual0 = new zjcTestOData.A_SupplierPurchasingOrgText();
    }
    @istest
    private static void testA_SupplierText() {
        zjcTestOData.A_SupplierText actual = new zjcTestOData.A_SupplierText('a','a','a','a','a');

        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.LongTextID);
        system.assertEquals('a', actual.LongText);
        system.assertEquals('a', actual.OVC_FKEY);

        zjcTestOData.A_SupplierText actual0 = new zjcTestOData.A_SupplierText();
    }
    @istest
    private static void testrunQuery() {
        zjcTestOData request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjcTestOData response = request.runQuery(query1);
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        zjcTestOData request = testSetup();
        zjcTestOData response = request.runInsert();
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        zjcTestOData request = testSetup();
        zjcTestOData response = request.runUpdate();
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        zjcTestOData request = testSetup();
        zjcTestOData response = request.runDelete();
        system.assertEquals('a', response.A_BusinessPartner[0].BusinessPartner);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static zjcTestOData testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcTestOData');
        zjcTestOData request = new zjcTestOData();
        zjcTestOData.A_BusinessPartner value1 = new zjcTestOData.A_BusinessPartner();
        value1.BusinessPartner = 'a';
        request.A_BusinessPartner.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjcTestOData input = new zjcTestOData();
        zjcTestOData.A_BusinessPartner value1 = new zjcTestOData.A_BusinessPartner();
        value1.BusinessPartner = 'a';
        input.A_BusinessPartner.add(value1);
        zjcTestOData actual = (zjcTestOData)JSON.deserialize(input.serialize(), zjcTestOData.class);
        system.assertEquals('a', actual.A_BusinessPartner[0].BusinessPartner);
    }

    @istest
    private static void testDeserialize() {
        zjcTestOData output = new zjcTestOData();
        zjcTestOData.A_BusinessPartner value1 = new zjcTestOData.A_BusinessPartner();
        value1.BusinessPartner = 'a';
        output.A_BusinessPartner.add(value1);

        string s = output.serialize();
        zjcTestOData actual = zjcTestOData.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.A_BusinessPartner[0].BusinessPartner);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjcTestOData actual = zjcTestOData.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcTestOData.zjcTestODataException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjcTestOData output = new zjcTestOData();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjcTestOData output = new zjcTestOData();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcTestOData output2 = new zjcTestOData();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjcTestOData output = new zjcTestOData();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('A_BusinessPartner'));
        system.assert(keys.contains('A_BuPaIdentification'));
        system.assert(keys.contains('A_BuPaIndustry'));
        system.assert(keys.contains('A_BusinessPartnerAddress'));
        system.assert(keys.contains('A_BuPaAddressUsage'));
        system.assert(keys.contains('A_AddressEmailAddress'));
        system.assert(keys.contains('A_AddressFaxNumber'));
        system.assert(keys.contains('A_AddressPhoneNumber'));
        system.assert(keys.contains('A_AddressHomePageURL'));
        system.assert(keys.contains('A_BusinessPartnerBank'));
        system.assert(keys.contains('A_BusinessPartnerContact'));
        system.assert(keys.contains('A_BPContactToAddress'));
        system.assert(keys.contains('A_BPContactToFuncAndDept'));
        system.assert(keys.contains('A_BusinessPartnerRole'));
        system.assert(keys.contains('A_BusinessPartnerTaxNumber'));
        system.assert(keys.contains('A_Customer'));
        system.assert(keys.contains('A_CustomerCompany'));
        system.assert(keys.contains('A_CustomerCompanyText'));
        system.assert(keys.contains('A_CustomerDunning'));
        system.assert(keys.contains('A_CustomerWithHoldingTax'));
        system.assert(keys.contains('A_CustomerSalesArea'));
        system.assert(keys.contains('A_CustSalesPartnerFunc'));
        system.assert(keys.contains('A_CustomerSalesAreaTax'));
        system.assert(keys.contains('A_CustomerSalesAreaText'));
        system.assert(keys.contains('A_CustomerTaxGrouping'));
        system.assert(keys.contains('A_CustomerText'));
        system.assert(keys.contains('A_Supplier'));
        system.assert(keys.contains('A_SupplierCompany'));
        system.assert(keys.contains('A_SupplierCompanyText'));
        system.assert(keys.contains('A_SupplierDunning'));
        system.assert(keys.contains('A_SupplierWithHoldingTax'));
        system.assert(keys.contains('A_SupplierPurchasingOrg'));
        system.assert(keys.contains('A_SupplierPartnerFunc'));
        system.assert(keys.contains('A_SupplierPurchasingOrgText'));
        system.assert(keys.contains('A_SupplierText'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('A_BusinessPartner', first.name);
    }

}