/* 
 * Generated by Overcast UTC 2021-12-15 10:06:14Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zmtEquipmentStatusRTTest {
    @istest
    private static void testzmtEquipmentStatusRT() {
        zmtEquipmentStatusRT actual = new zmtEquipmentStatusRT();
        system.assertNotEquals(null, actual.BAPI_EQUI_GETSTATUS);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.SYSTEM_STATUS);
        system.assertNotEquals(null, actual.USER_STATUS);
    }

    @istest
    private static void testBAPI_EQUI_GETSTATUS() {
        zmtEquipmentStatusRTBAPI_EQUI_GETSTATUS actual = new zmtEquipmentStatusRTBAPI_EQUI_GETSTATUS();

        actual.SYSTEMSTATUS = 'a';
        actual.USERSTATUS = 'a';
        actual.EQUIPMENT = 'a';
        actual.LANGUAGE = 'a';
        actual.LANGUAGE_ISO = 'a';
        system.assertEquals('a', actual.SYSTEMSTATUS);
        system.assertEquals('a', actual.USERSTATUS);
        system.assertEquals('a', actual.EQUIPMENT);
        system.assertEquals('a', actual.LANGUAGE);
        system.assertEquals('a', actual.LANGUAGE_ISO);
    }
    @istest
    private static void testRETURN_x() {
        zmtEquipmentStatusRTRETURN_x actual = new zmtEquipmentStatusRTRETURN_x();

        actual.TYPE_x = 'a';
        actual.ID = 'a';
        actual.NUMBER_x = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        actual.PARAMETER = 'a';
        actual.ROW = 0;
        actual.FIELD = 'a';
        actual.SYSTEM_x = 'a';
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);
    }
    @istest
    private static void testSYSTEM_STATUS() {
        zmtEquipmentStatusRTSYSTEM_STATUS actual = new zmtEquipmentStatusRTSYSTEM_STATUS();

        actual.STATUS = 'a';
        actual.TEXT = 'a';
        actual.DESCRIPTION = 'a';
        system.assertEquals('a', actual.STATUS);
        system.assertEquals('a', actual.TEXT);
        system.assertEquals('a', actual.DESCRIPTION);
    }
    @istest
    private static void testUSER_STATUS() {
        zmtEquipmentStatusRTUSER_STATUS actual = new zmtEquipmentStatusRTUSER_STATUS();

        actual.STATUS = 'a';
        actual.TEXT = 'a';
        actual.DESCRIPTION = 'a';
        system.assertEquals('a', actual.STATUS);
        system.assertEquals('a', actual.TEXT);
        system.assertEquals('a', actual.DESCRIPTION);
    }

    @istest
    private static void testRun() {
        zmtEquipmentStatusRT request = testSetup();
        zmtEquipmentStatusRT response = request.run();
        system.assertEquals('a', response.BAPI_EQUI_GETSTATUS.SYSTEMSTATUS);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static zmtEquipmentStatusRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zmtEquipmentStatusRT');
        zmtEquipmentStatusRT request = new zmtEquipmentStatusRT();
        request.BAPI_EQUI_GETSTATUS.SYSTEMSTATUS = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zmtEquipmentStatusRT input = new zmtEquipmentStatusRT();
        input.BAPI_EQUI_GETSTATUS.SYSTEMSTATUS = 'a';
        zmtEquipmentStatusRT actual = (zmtEquipmentStatusRT)JSON.deserialize(input.serialize(), zmtEquipmentStatusRT.class);
        system.assertEquals('a', actual.BAPI_EQUI_GETSTATUS.SYSTEMSTATUS);
    }

    @istest
    private static void testDeserialize() {
        zmtEquipmentStatusRT output = new zmtEquipmentStatusRT();
        output.BAPI_EQUI_GETSTATUS.SYSTEMSTATUS = 'a';

        string s = output.serialize();
        zmtEquipmentStatusRT actual = zmtEquipmentStatusRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_EQUI_GETSTATUS.SYSTEMSTATUS);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zmtEquipmentStatusRT actual = zmtEquipmentStatusRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zmtEquipmentStatusRT.zmtEquipmentStatusRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zmtEquipmentStatusRT output = new zmtEquipmentStatusRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zmtEquipmentStatusRT output = new zmtEquipmentStatusRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zmtEquipmentStatusRT output2 = new zmtEquipmentStatusRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zmtEquipmentStatusRT output = new zmtEquipmentStatusRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_EQUI_GETSTATUS'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('SYSTEM_STATUS'));
        system.assert(keys.contains('USER_STATUS'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_EQUI_GETSTATUS', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('zmtEquipmentStatusRT');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        zmtEquipmentStatusRT.Parameters params = new zmtEquipmentStatusRT.Parameters();
        params.flowInterviewGuid = 'X';
        params.requestData = new zmtEquipmentStatusRT();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new zmtEquipmentStatusRT()) + '}';
        List<zmtEquipmentStatusRT.Parameters> paramList = new List<zmtEquipmentStatusRT.Parameters>{ params };

        Test.startTest();
        List<zmtEquipmentStatusRT.Result> results = zmtEquipmentStatusRT.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}