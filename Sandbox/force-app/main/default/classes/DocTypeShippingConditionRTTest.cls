/* 
 * Generated by Overcast UTC 2021-12-16 01:25:29Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class DocTypeShippingConditionRTTest {
    @istest
    private static void testDocTypeShippingConditionRT() {
        DocTypeShippingConditionRT actual = new DocTypeShippingConditionRT();
        system.assertNotEquals(null, actual.ZSD_AUART_VSBED);
    }

    @istest
    private static void testZSD_AUART_VSBED() {
        DocTypeShippingConditionRTZSDAUARTVSBED actual = new DocTypeShippingConditionRTZSDAUARTVSBED();

        actual.MANDT = 'a';
        actual.AUART = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.VSBED = 'a';
        actual.LK_AUART = 'a';
        actual.LK_OUTB_ROUTES = 'a';
        actual.LK_INB_ROUTES = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.LK_AUART);
        system.assertEquals('a', actual.LK_OUTB_ROUTES);
        system.assertEquals('a', actual.LK_INB_ROUTES);
    }
    @istest
    private static void testrunQuery() {
        DocTypeShippingConditionRT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        DocTypeShippingConditionRT response = request.runQuery(query1);
        system.assertEquals('a', response.ZSD_AUART_VSBED[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static DocTypeShippingConditionRT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('DocTypeShippingConditionRT');
        DocTypeShippingConditionRT request = new DocTypeShippingConditionRT();
        DocTypeShippingConditionRTZSDAUARTVSBED value1 = new DocTypeShippingConditionRTZSDAUARTVSBED();
        value1.MANDT = 'a';
        request.ZSD_AUART_VSBED.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        DocTypeShippingConditionRT input = new DocTypeShippingConditionRT();
        DocTypeShippingConditionRTZSDAUARTVSBED value1 = new DocTypeShippingConditionRTZSDAUARTVSBED();
        value1.MANDT = 'a';
        input.ZSD_AUART_VSBED.add(value1);
        DocTypeShippingConditionRT actual = (DocTypeShippingConditionRT)JSON.deserialize(input.serialize(), DocTypeShippingConditionRT.class);
        system.assertEquals('a', actual.ZSD_AUART_VSBED[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        DocTypeShippingConditionRT output = new DocTypeShippingConditionRT();
        DocTypeShippingConditionRTZSDAUARTVSBED value1 = new DocTypeShippingConditionRTZSDAUARTVSBED();
        value1.MANDT = 'a';
        output.ZSD_AUART_VSBED.add(value1);

        string s = output.serialize();
        DocTypeShippingConditionRT actual = DocTypeShippingConditionRT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.ZSD_AUART_VSBED[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            DocTypeShippingConditionRT actual = DocTypeShippingConditionRT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (DocTypeShippingConditionRT.DocTypeShippingConditionRTException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        DocTypeShippingConditionRT output = new DocTypeShippingConditionRT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        DocTypeShippingConditionRT output = new DocTypeShippingConditionRT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        DocTypeShippingConditionRT output2 = new DocTypeShippingConditionRT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        DocTypeShippingConditionRT output = new DocTypeShippingConditionRT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('ZSD_AUART_VSBED'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('ZSD_AUART_VSBED', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('DocTypeShippingConditionRT');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        DocTypeShippingConditionRT.Parameters params = new DocTypeShippingConditionRT.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new DocTypeShippingConditionRT()) + '}';
        List<DocTypeShippingConditionRT.Parameters> paramList = new List<DocTypeShippingConditionRT.Parameters>{ params };

        Test.startTest();
        List<DocTypeShippingConditionRT.Result> results = DocTypeShippingConditionRT.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}