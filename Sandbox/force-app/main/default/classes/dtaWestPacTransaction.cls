global class dtaWestPacTransaction extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Restful {
/* 
 * Generated by Overcast UTC 2022-02-10 17:57:26Z.
 * This class belongs to the dtaWestPacTransaction Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class dtaWestPacTransactionException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global dtaWestPacTransaction() {
    }
    
    global class ApiResponse extends overcast.Realtime.ApiResponse {
    }


    public class TransactionParameters {
        @AuraEnabled public String singleUseTokenId { get; set; }
        @AuraEnabled public String customerNumber { get; set; }
        @AuraEnabled public String transactionType { get; set; }
        @AuraEnabled public String principalAmount { get; set; }
        @AuraEnabled public String currency_x { get; set; }
        @AuraEnabled public String orderNumber { get; set; }
        @AuraEnabled public String merchantId { get; set; }

        public TransactionParameters() {}

        public TransactionParameters(String psingleUseTokenId, String pcustomerNumber, String ptransactionType, String pprincipalAmount, String pcurrency_x, String porderNumber, String pmerchantId) {
            this.singleUseTokenId = psingleUseTokenId;
            this.customerNumber = pcustomerNumber;
            this.transactionType = ptransactionType;
            this.principalAmount = pprincipalAmount;
            this.currency_x = pcurrency_x;
            this.orderNumber = porderNumber;
            this.merchantId = pmerchantId;
        }
    }

    public class TransactionsModel {
        @AuraEnabled public Long transactionId { get; set; }
        @AuraEnabled public String receiptNumber { get; set; }
        @AuraEnabled public String status { get; set; }
        @AuraEnabled public String responseCode { get; set; }
        @AuraEnabled public String responseText { get; set; }
        @AuraEnabled public String transactionType { get; set; }
        @AuraEnabled public String customerNumber { get; set; }
        @AuraEnabled public String customerName { get; set; }
        @AuraEnabled public String customerEmail { get; set; }
        @AuraEnabled public String bpayRef { get; set; }
        @AuraEnabled public String orderNumber { get; set; }
        @AuraEnabled public String customerBankReference { get; set; }
        @AuraEnabled public String currency_x { get; set; }
        @AuraEnabled public Double principalAmount { get; set; }
        @AuraEnabled public Double surchargeAmount { get; set; }
        @AuraEnabled public Double paymentAmount { get; set; }
        @AuraEnabled public String paymentMethod { get; set; }
        @AuraEnabled public String creditCard { get; set; }
        @AuraEnabled public String merchant { get; set; }
        @AuraEnabled public String bankAccount { get; set; }
        @AuraEnabled public String virtualAccount { get; set; }
        @AuraEnabled public String australiaPost { get; set; }
        @AuraEnabled public String bpay { get; set; }
        @AuraEnabled public String yourBankAccount { get; set; }
        @AuraEnabled public String customerPayPalAccount { get; set; }
        @AuraEnabled public String yourPayPalAccount { get; set; }
        @AuraEnabled public String transactionDateTime { get; set; }
        @AuraEnabled public String user { get; set; }
        @AuraEnabled public String settlementDate { get; set; }
        @AuraEnabled public String declinedDate { get; set; }
        @AuraEnabled public String parentTransaction { get; set; }
        @AuraEnabled public String customerIpAddress { get; set; }
        @AuraEnabled public String fraudResult { get; set; }
        @AuraEnabled public String customerIpCountry { get; set; }
        @AuraEnabled public String cardCountry { get; set; }
        @AuraEnabled public Boolean isVoidable { get; set; }
        @AuraEnabled public Boolean isRefundable { get; set; }

        public TransactionsModel() {}

        public TransactionsModel(Long ptransactionId, String preceiptNumber, String pstatus, String presponseCode, String presponseText, String ptransactionType, String pcustomerNumber, String pcustomerName, String pcustomerEmail, String pbpayRef, String porderNumber, String pcustomerBankReference, String pcurrency_x, Double pprincipalAmount, Double psurchargeAmount, Double ppaymentAmount, String ppaymentMethod, String pcreditCard, String pmerchant, String pbankAccount, String pvirtualAccount, String paustraliaPost, String pbpay, String pyourBankAccount, String pcustomerPayPalAccount, String pyourPayPalAccount, String ptransactionDateTime, String puser, String psettlementDate, String pdeclinedDate, String pparentTransaction, String pcustomerIpAddress) {
            this.transactionId = ptransactionId;
            this.receiptNumber = preceiptNumber;
            this.status = pstatus;
            this.responseCode = presponseCode;
            this.responseText = presponseText;
            this.transactionType = ptransactionType;
            this.customerNumber = pcustomerNumber;
            this.customerName = pcustomerName;
            this.customerEmail = pcustomerEmail;
            this.bpayRef = pbpayRef;
            this.orderNumber = porderNumber;
            this.customerBankReference = pcustomerBankReference;
            this.currency_x = pcurrency_x;
            this.principalAmount = pprincipalAmount;
            this.surchargeAmount = psurchargeAmount;
            this.paymentAmount = ppaymentAmount;
            this.paymentMethod = ppaymentMethod;
            this.creditCard = pcreditCard;
            this.merchant = pmerchant;
            this.bankAccount = pbankAccount;
            this.virtualAccount = pvirtualAccount;
            this.australiaPost = paustraliaPost;
            this.bpay = pbpay;
            this.yourBankAccount = pyourBankAccount;
            this.customerPayPalAccount = pcustomerPayPalAccount;
            this.yourPayPalAccount = pyourPayPalAccount;
            this.transactionDateTime = ptransactionDateTime;
            this.user = puser;
            this.settlementDate = psettlementDate;
            this.declinedDate = pdeclinedDate;
            this.parentTransaction = pparentTransaction;
            this.customerIpAddress = pcustomerIpAddress;
        }
    }


    public string inputSetName { get; set; }

    /**
     * Take a one-time credit card payment
     * 
     * @param body (dtaWestPacTransaction.TransactionParameters) - Transaction to add (optional)
     * @return dtaWestPacTransaction.ApiResponse
     *     200: dtaWestPacTransaction.TransactionsModel - Request succeeded
     *     201: dtaWestPacTransaction.TransactionsModel - Request createad
     *     202: dtaWestPacTransaction.TransactionsModel - Request accepted
     *     204: null - Delete successful
     *     400: null - Bad request
     *     401: null - Unauthorized
     *     403: null - Forbidden
     *     404: null - Not found
     *     405: null - Method not allowed
     *     406: null - Not acceptable
     *     409: null - Conflicts with another request
     *     415: null - Unsupported media type
     *     422: null - Unprocessable entity
     *     429: null - Too many requests
     *     500: null - Internal server error
     *     501: null - Not implemented
     *     503: null - Service unavailable
     * @throws dtaWestPacTransactionException if fails to make API call
     */
    public dtaWestPacTransaction.ApiResponse createPayment(Map<String, Object> params) {
        overcast.Logger logger1 = createLogger();
        try {
            dtaWestPacTransaction.ApiResponse response = createPayment(params, logger1, null);
            return response;
        } catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            throw e;
        } finally {
            logger1.commitToDatabase();
        }
    }

    /**
     * Take a one-time credit card payment
     * 
     * @param body (dtaWestPacTransaction.TransactionParameters) - Transaction to add (optional)
     * @return dtaWestPacTransaction.ApiResponse
     *     200: dtaWestPacTransaction.TransactionsModel - Request succeeded
     *     201: dtaWestPacTransaction.TransactionsModel - Request createad
     *     202: dtaWestPacTransaction.TransactionsModel - Request accepted
     *     204: null - Delete successful
     *     400: null - Bad request
     *     401: null - Unauthorized
     *     403: null - Forbidden
     *     404: null - Not found
     *     405: null - Method not allowed
     *     406: null - Not acceptable
     *     409: null - Conflicts with another request
     *     415: null - Unsupported media type
     *     422: null - Unprocessable entity
     *     429: null - Too many requests
     *     500: null - Internal server error
     *     501: null - Not implemented
     *     503: null - Service unavailable
     * @throws dtaWestPacTransactionException if fails to make API call
     */
    public dtaWestPacTransaction.ApiResponse createPayment(Map<String, Object> params, overcast.Logger logger, String namedCredential) {
        this.idemId = overcast.Utilities.NewGuid();
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? this.idemId : this.inputSetName);
            logger.setIdemId(this.idemId);
        }
        return run(
            'createPayment',
            new Map<String, Object> {
                'body' => (dtaWestPacTransaction.TransactionParameters)params.get('body')
            },
            logger,
            namedCredential
        );
    }

    /**
     * Take a one-time credit card payment
     * 
     * @param body (dtaWestPacTransaction.TransactionParameters) - Transaction to add (optional)
     * @return String requestLabel of Continuation
     * @throws dtaWestPacTransactionException if fails to make API call
     */
    public String createPaymentAsync(Map<String, Object> params, overcast.Logger logger, String namedCredential, Continuation con) {
        this.idemId = overcast.Utilities.NewGuid();
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? this.idemId : this.inputSetName);
            logger.setIdemId(this.idemId);
        }
        return runAsync(
            'createPayment',
            new Map<String, Object> {
                'body' => (dtaWestPacTransaction.TransactionParameters)params.get('body')
            },
            logger,
            namedCredential,
            con
        );
    }

    /**
     * Get response of createPaymentAsync()
     *
     * @return dtaWestPacTransaction.ApiResponse
     *     200: dtaWestPacTransaction.TransactionsModel - Request succeeded
     *     201: dtaWestPacTransaction.TransactionsModel - Request createad
     *     202: dtaWestPacTransaction.TransactionsModel - Request accepted
     *     204: null - Delete successful
     *     400: null - Bad request
     *     401: null - Unauthorized
     *     403: null - Forbidden
     *     404: null - Not found
     *     405: null - Method not allowed
     *     406: null - Not acceptable
     *     409: null - Conflicts with another request
     *     415: null - Unsupported media type
     *     422: null - Unprocessable entity
     *     429: null - Too many requests
     *     500: null - Internal server error
     *     501: null - Not implemented
     *     503: null - Service unavailable
     */
    public static dtaWestPacTransaction.ApiResponse getCreatePaymentAsyncResponse(String requestLabel) {
        String responseBody;
        if (Test.isRunningTest()) {
            responseBody = dtaWestPacTransaction.testStaticResponse;
        } else {
            HttpResponse response = Continuation.getResponse(requestLabel);
            responseBody = response.getBody();
        }
        return dtaWestPacTransaction.deserialize(
            responseBody,
            OperationReturnTypes.get('createPayment')
        );
    }

    private static final Map<String, Map<Integer, Type>> OperationReturnTypes = new Map<String, Map<Integer, Type>> {
        'createPayment' => new Map<Integer, Type> {
            200 => dtaWestPacTransaction.TransactionsModel.class,
            201 => dtaWestPacTransaction.TransactionsModel.class,
            202 => dtaWestPacTransaction.TransactionsModel.class,
            204 => null,
            400 => null,
            401 => null,
            403 => null,
            404 => null,
            405 => null,
            406 => null,
            409 => null,
            415 => null,
            422 => null,
            429 => null,
            500 => null,
            501 => null,
            503 => null
        }
    };

    private dtaWestPacTransaction.ApiResponse run(String operationName, Map<String, Object> params, overcast.Logger logger, String namedCredential) {
        overcast.SynchronousHandler sh = setup(operationName, params, logger, namedCredential);

        Map<Integer, Type> returnTypes = OperationReturnTypes.get(operationName);
        if (Test.isRunningTest()) {
            return dtaWestPacTransaction.deserialize(this.testResponse, returnTypes);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return dtaWestPacTransaction.deserialize(sh.Response, returnTypes);
    }

    private String runAsync(String operationName, Map<String, Object> params, overcast.Logger logger, String namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operationName, params, logger, namedCredential);
        sh.ContinuationWebRequest = new HttpRequest();
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);
        return con.addHttpRequest(sh.ContinuationWebRequest);
    }

    private overcast.SynchronousHandler setup(String operationName, Map<String, Object> params, overcast.Logger logger, String namedCredential) {
        Map<String, Object> input = new Map<String, Object> {
            'operation' => operationName,
            'params' => params
        };

        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('dtaWestPacTransaction');
        sh.CorrelationId = this.idemId;
        sh.InputSetName = this.inputSetName;
        sh.InputJson = JSON.serialize(input, true);
        sh.NamedCredential = namedCredential;

        return sh;
    }

    private static overcast.Logger createLogger() {
        return new overcast.Logger('dtaWestPacTransaction');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        return dynamicBody == null ? null : JSON.serialize(dynamicBody, true);
    }

    @TestVisible
    private static dtaWestPacTransaction.ApiResponse deserialize(String responsedata, Map<Integer, Type> returnTypes) {
        dtaWestPacTransaction.ApiResponse response = new dtaWestPacTransaction.ApiResponse();

        Map<String, String> m = getOutputData(responsedata);
        response.backendMessage = m.get('backendMessage');

        String outputData = m.get('output');
        if (outputData == null) {
            return response;
        }

        JSONParser parser = JSON.createParser(outputData);
        parser.nextToken();
        JSONToken token = null;
        do {
            if (token == JSONToken.START_OBJECT || token == JSONToken.START_ARRAY) {
                parser.skipChildren();
            }
            token = parser.nextToken();
        } while (token != null && (parser.getCurrentName() != 'status' || token != JSONToken.VALUE_NUMBER_INT));
        if (token == null) {
            throw new dtaWestPacTransactionException('Invalid response data.');
        }
        response.statusCode = (Integer)parser.readValueAs(Integer.class);

        Type returnType;
        if (returnTypes.containsKey(response.statusCode)) {
            returnType = returnTypes.get(response.statusCode);
        } else {
            if (returnTypes.containsKey(0)) {
                returnType = returnTypes.get(0);
            } else {
                return response;
            }
        }

        parser = JSON.createParser(outputData);
        parser.nextToken();
        token = null;
        do {
            if (token == JSONToken.START_OBJECT || token == JSONToken.START_ARRAY) {
                parser.skipChildren();
            }
            token = parser.nextToken();
        } while (token != null && (parser.getCurrentName() != 'body' || token == JSONToken.END_ARRAY || token == JSONToken.END_OBJECT || token == JSONToken.FIELD_NAME || token == JSONToken.NOT_AVAILABLE || token == JSONToken.VALUE_EMBEDDED_OBJECT));
        if (token != null) {
            response.body = parser.readValueAs(returnType);
        }
        return response;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new dtaWestPacTransactionException('Response null for dtaWestPacTransaction request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                dtaWestPacTransactionException ex = new dtaWestPacTransactionException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new dtaWestPacTransactionException('Malformed response for dtaWestPacTransaction request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }

    private static void assertNotNull(Map<String, Object> params, String paramName) {
        if (params.get(paramName) == null) {
            Exception e = new NullPointerException();
            e.setMessage('Argument cannot be null: ' + paramName);
            throw e;
        }
    }

    @TestVisible private static String testStaticResponse;
    transient private String idemId;
    transient private String operationName;
    transient private Integer statusCode;

    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    transient private Map<String, overcast.Realtime.ApiMetadata> metadata;
    transient private Object dynamicBody;

    global overcast.Realtime.Restful run() {
        overcast.Logger logger1 = createLogger();
        try {
            return run(logger1, null);
        } catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            throw e;
        } finally {
            logger1.commitToDatabase();
        }
    }

    global overcast.Realtime.Restful run(overcast.Logger logger, String namedCredential) {
        this.idemId = overcast.Utilities.NewGuid();
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? this.idemId : this.inputSetName);
            logger.setIdemId(this.idemId);
        }
        if (String.isBlank(this.operationName)) {
            throw new dtaWestPacTransactionException('"operationName" must be set.');
        }
        overcast.SynchronousHandler sh = setup(this.operationName, (Map<String, Object>)this.dynamicBody, logger, namedCredential);
        dtaWestPacTransaction.ApiResponse response;
        if (Test.isRunningTest()) {
            response = dtaWestPacTransaction.deserialize(this.testResponse, OperationReturnTypes.get(this.operationName));
        } else {
            overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);
            response = dtaWestPacTransaction.deserialize(sh.Response, OperationReturnTypes.get(this.operationName));
        }
        dtaWestPacTransaction output = new dtaWestPacTransaction();
        output.setOperationName(this.operationName);
        output.backendMessage = response.backendMessage;
        output.statusCode = response.statusCode;
        output.outputData = JSON.serialize(response.body);
        return output;
    }

    global String runAsync(overcast.Logger logger, String namedCredential, Continuation con) {
        this.idemId = overcast.Utilities.NewGuid();
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? this.idemId : this.inputSetName);
            logger.setIdemId(this.idemId);
        }
        if (String.isBlank(this.operationName)) {
            throw new dtaWestPacTransactionException('"operationName" must be set.');
        }
        return runAsync(this.operationName, (Map<String, Object>)this.dynamicBody, logger, namedCredential, con);
    }

    global void loadAsyncResponse(string responseBody) {
        if (String.isBlank(this.operationName)) {
            throw new dtaWestPacTransactionException('"operationName" must be set.');
        }
        dtaWestPacTransaction.ApiResponse response = dtaWestPacTransaction.deserialize(responseBody, OperationReturnTypes.get(this.operationName));
        dtaWestPacTransaction output = new dtaWestPacTransaction();
        backendMessage = response.backendMessage;
        statusCode = response.statusCode;
        outputData = JSON.serialize(response.body);
    }

    global void setOperationName(String operationName) {
        this.operationName = operationName;
    }

    global Integer getStatusCode() {
        return this.statusCode;
    }

    global string getTopTypeName() {
        return null;
    }

    global void set(String parameterName, Object value) {
        if (parameterName == null) {
            return;
        }
        if (parameterName == '@testResponse' || parameterName == 'param') {
            dynamicBody = value;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new Map<String, Object>();
        }
        List<String> names = parameterName.split('\\.');
        if (names.size() > 1 && names[0] == 'param') {
            names.remove(0);
        }
        Integer i;
        Map<String, Object> target = (Map<String, Object>)dynamicBody;
        for (i = 0; i < names.size() - 1; i++) {
            String name = names[i];
            if (target.containsKey(name)) {
                target = (Map<String, Object>)target.get(name);
            } else {
                Map<String, Object> newMap = new Map<String, Object>();
                target.put(name, newMap);
                target = newMap;
            }
        }
        target.put(names[i], value);
    }
    
    global object get(String parameterName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = JSON.deserializeUntyped(outputData);
        }
        if (!(dynamicBody instanceof Map<String, Object>) || parameterName == 'response') {
            return dynamicBody;
        }
        if (dynamicBody == null || parameterName == null) { 
            return null;
        }
        List<String> names = parameterName.split('\\.');
        if (names.size() > 1 && names[0] == 'response') {
            names.remove(0);
        }
        Integer i;
        Map<String, Object> target = (Map<String, Object>)dynamicBody;
        for (i = 0; i < names.size() - 1; i++) {
            String name = names[i];
            if (!target.containsKey(name)) {
                return null;
            }
            target = (Map<String, Object>)target.get(name);
            if (target == null) {
                return null;
            }
        }
        return target.get(names[i]);
    }

    global Map<String, overcast.TypeInfo> getMetadata() {
        return null;
    }

    global Map<String, overcast.Realtime.ApiMetadata> getApiMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.Realtime.ApiMetadata> {
                'createPayment' => new overcast.Realtime.ApiMetadata('createPayment',
                    new Map<String, overcast.TypeInfo> {
                        'param.body' => new overcast.TypeInfo('TransactionParameters', '', overcast.Realtime.StructureType.STRUCTURE, overcast.Realtime.Direction.INPUT,
                            new Map<string, overcast.FieldInfo> {
                                'singleUseTokenId' => new overcast.FieldInfo('singleUseTokenId', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT),
                                'customerNumber' => new overcast.FieldInfo('customerNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT),
                                'transactionType' => new overcast.FieldInfo('transactionType', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT),
                                'principalAmount' => new overcast.FieldInfo('principalAmount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT),
                                'currency_x' => new overcast.FieldInfo('currency_x', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT),
                                'orderNumber' => new overcast.FieldInfo('orderNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT),
                                'merchantId' => new overcast.FieldInfo('merchantId', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.INPUT)
                            }
                        )
                    },
                    new Map<Integer, Map<String, overcast.TypeInfo>> {
                        200 => new Map<String, overcast.TypeInfo> {
                            'response' => new overcast.TypeInfo('TransactionsModel', '', overcast.Realtime.StructureType.STRUCTURE, overcast.Realtime.Direction.OUTPUT,
                                new Map<string, overcast.FieldInfo> {
                                    'transactionId' => new overcast.FieldInfo('transactionId', '', overcast.Realtime.ApexType.LONGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'receiptNumber' => new overcast.FieldInfo('receiptNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'status' => new overcast.FieldInfo('status', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'responseCode' => new overcast.FieldInfo('responseCode', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'responseText' => new overcast.FieldInfo('responseText', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'transactionType' => new overcast.FieldInfo('transactionType', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerNumber' => new overcast.FieldInfo('customerNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerName' => new overcast.FieldInfo('customerName', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerEmail' => new overcast.FieldInfo('customerEmail', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bpayRef' => new overcast.FieldInfo('bpayRef', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'orderNumber' => new overcast.FieldInfo('orderNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerBankReference' => new overcast.FieldInfo('customerBankReference', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'currency_x' => new overcast.FieldInfo('currency_x', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'principalAmount' => new overcast.FieldInfo('principalAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'surchargeAmount' => new overcast.FieldInfo('surchargeAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'paymentAmount' => new overcast.FieldInfo('paymentAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'paymentMethod' => new overcast.FieldInfo('paymentMethod', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'creditCard' => new overcast.FieldInfo('creditCard', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'merchant' => new overcast.FieldInfo('merchant', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bankAccount' => new overcast.FieldInfo('bankAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'virtualAccount' => new overcast.FieldInfo('virtualAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'australiaPost' => new overcast.FieldInfo('australiaPost', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bpay' => new overcast.FieldInfo('bpay', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'yourBankAccount' => new overcast.FieldInfo('yourBankAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerPayPalAccount' => new overcast.FieldInfo('customerPayPalAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'yourPayPalAccount' => new overcast.FieldInfo('yourPayPalAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'transactionDateTime' => new overcast.FieldInfo('transactionDateTime', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'user' => new overcast.FieldInfo('user', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'settlementDate' => new overcast.FieldInfo('settlementDate', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'declinedDate' => new overcast.FieldInfo('declinedDate', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'parentTransaction' => new overcast.FieldInfo('parentTransaction', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerIpAddress' => new overcast.FieldInfo('customerIpAddress', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'fraudResult' => new overcast.FieldInfo('fraudResult', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerIpCountry' => new overcast.FieldInfo('customerIpCountry', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'cardCountry' => new overcast.FieldInfo('cardCountry', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'isVoidable' => new overcast.FieldInfo('isVoidable', '', overcast.Realtime.ApexType.BOOLEANX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'isRefundable' => new overcast.FieldInfo('isRefundable', '', overcast.Realtime.ApexType.BOOLEANX, 0, overcast.Realtime.Direction.OUTPUT)
                                }
                            )
                        },
                        201 => new Map<String, overcast.TypeInfo> {
                            'response' => new overcast.TypeInfo('TransactionsModel', '', overcast.Realtime.StructureType.STRUCTURE, overcast.Realtime.Direction.OUTPUT,
                                new Map<string, overcast.FieldInfo> {
                                    'transactionId' => new overcast.FieldInfo('transactionId', '', overcast.Realtime.ApexType.LONGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'receiptNumber' => new overcast.FieldInfo('receiptNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'status' => new overcast.FieldInfo('status', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'responseCode' => new overcast.FieldInfo('responseCode', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'responseText' => new overcast.FieldInfo('responseText', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'transactionType' => new overcast.FieldInfo('transactionType', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerNumber' => new overcast.FieldInfo('customerNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerName' => new overcast.FieldInfo('customerName', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerEmail' => new overcast.FieldInfo('customerEmail', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bpayRef' => new overcast.FieldInfo('bpayRef', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'orderNumber' => new overcast.FieldInfo('orderNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerBankReference' => new overcast.FieldInfo('customerBankReference', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'currency_x' => new overcast.FieldInfo('currency_x', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'principalAmount' => new overcast.FieldInfo('principalAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'surchargeAmount' => new overcast.FieldInfo('surchargeAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'paymentAmount' => new overcast.FieldInfo('paymentAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'paymentMethod' => new overcast.FieldInfo('paymentMethod', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'creditCard' => new overcast.FieldInfo('creditCard', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'merchant' => new overcast.FieldInfo('merchant', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bankAccount' => new overcast.FieldInfo('bankAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'virtualAccount' => new overcast.FieldInfo('virtualAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'australiaPost' => new overcast.FieldInfo('australiaPost', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bpay' => new overcast.FieldInfo('bpay', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'yourBankAccount' => new overcast.FieldInfo('yourBankAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerPayPalAccount' => new overcast.FieldInfo('customerPayPalAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'yourPayPalAccount' => new overcast.FieldInfo('yourPayPalAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'transactionDateTime' => new overcast.FieldInfo('transactionDateTime', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'user' => new overcast.FieldInfo('user', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'settlementDate' => new overcast.FieldInfo('settlementDate', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'declinedDate' => new overcast.FieldInfo('declinedDate', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'parentTransaction' => new overcast.FieldInfo('parentTransaction', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerIpAddress' => new overcast.FieldInfo('customerIpAddress', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'fraudResult' => new overcast.FieldInfo('fraudResult', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerIpCountry' => new overcast.FieldInfo('customerIpCountry', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'cardCountry' => new overcast.FieldInfo('cardCountry', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'isVoidable' => new overcast.FieldInfo('isVoidable', '', overcast.Realtime.ApexType.BOOLEANX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'isRefundable' => new overcast.FieldInfo('isRefundable', '', overcast.Realtime.ApexType.BOOLEANX, 0, overcast.Realtime.Direction.OUTPUT)
                                }
                            )
                        },
                        202 => new Map<String, overcast.TypeInfo> {
                            'response' => new overcast.TypeInfo('TransactionsModel', '', overcast.Realtime.StructureType.STRUCTURE, overcast.Realtime.Direction.OUTPUT,
                                new Map<string, overcast.FieldInfo> {
                                    'transactionId' => new overcast.FieldInfo('transactionId', '', overcast.Realtime.ApexType.LONGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'receiptNumber' => new overcast.FieldInfo('receiptNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'status' => new overcast.FieldInfo('status', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'responseCode' => new overcast.FieldInfo('responseCode', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'responseText' => new overcast.FieldInfo('responseText', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'transactionType' => new overcast.FieldInfo('transactionType', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerNumber' => new overcast.FieldInfo('customerNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerName' => new overcast.FieldInfo('customerName', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerEmail' => new overcast.FieldInfo('customerEmail', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bpayRef' => new overcast.FieldInfo('bpayRef', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'orderNumber' => new overcast.FieldInfo('orderNumber', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerBankReference' => new overcast.FieldInfo('customerBankReference', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'currency_x' => new overcast.FieldInfo('currency_x', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'principalAmount' => new overcast.FieldInfo('principalAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'surchargeAmount' => new overcast.FieldInfo('surchargeAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'paymentAmount' => new overcast.FieldInfo('paymentAmount', '', overcast.Realtime.ApexType.DOUBLEX, 0,0, overcast.Realtime.Direction.OUTPUT),
                                    'paymentMethod' => new overcast.FieldInfo('paymentMethod', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'creditCard' => new overcast.FieldInfo('creditCard', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'merchant' => new overcast.FieldInfo('merchant', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bankAccount' => new overcast.FieldInfo('bankAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'virtualAccount' => new overcast.FieldInfo('virtualAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'australiaPost' => new overcast.FieldInfo('australiaPost', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'bpay' => new overcast.FieldInfo('bpay', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'yourBankAccount' => new overcast.FieldInfo('yourBankAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerPayPalAccount' => new overcast.FieldInfo('customerPayPalAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'yourPayPalAccount' => new overcast.FieldInfo('yourPayPalAccount', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'transactionDateTime' => new overcast.FieldInfo('transactionDateTime', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'user' => new overcast.FieldInfo('user', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'settlementDate' => new overcast.FieldInfo('settlementDate', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'declinedDate' => new overcast.FieldInfo('declinedDate', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'parentTransaction' => new overcast.FieldInfo('parentTransaction', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerIpAddress' => new overcast.FieldInfo('customerIpAddress', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'fraudResult' => new overcast.FieldInfo('fraudResult', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'customerIpCountry' => new overcast.FieldInfo('customerIpCountry', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'cardCountry' => new overcast.FieldInfo('cardCountry', '', overcast.Realtime.ApexType.STRINGX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'isVoidable' => new overcast.FieldInfo('isVoidable', '', overcast.Realtime.ApexType.BOOLEANX, 0, overcast.Realtime.Direction.OUTPUT),
                                    'isRefundable' => new overcast.FieldInfo('isRefundable', '', overcast.Realtime.ApexType.BOOLEANX, 0, overcast.Realtime.Direction.OUTPUT)
                                }
                            )
                        },
                        204 => null,
                        400 => null,
                        401 => null,
                        403 => null,
                        404 => null,
                        405 => null,
                        406 => null,
                        409 => null,
                        415 => null,
                        422 => null,
                        429 => null,
                        500 => null,
                        501 => null,
                        503 => null
                    }
                )
            };
        }
        return metadata;
    }

}