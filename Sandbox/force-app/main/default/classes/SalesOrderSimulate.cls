global class SalesOrderSimulate extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Updatable {
/* 
 * Generated by Overcast UTC 2022-03-04 02:40:37Z.
 * This class belongs to the SalesOrderSimulate Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class SalesOrderSimulateException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global SalesOrderSimulate() {
        this.A_SalesOrderSimulation = new list<SalesOrderSimulate.A_SalesOrderSimulation>();
        this.A_SalesOrderCreditSimulation = new list<SalesOrderSimulate.A_SalesOrderCreditSimulation>();
        this.A_SalesOrderItemSimulation = new list<SalesOrderSimulate.A_SalesOrderItemSimulation>();
        this.A_SalesOrderItemPartnerSimln = new list<SalesOrderSimulate.A_SalesOrderItemPartnerSimln>();
        this.A_SalesOrderItmPrcgElmntSimln = new list<SalesOrderSimulate.A_SalesOrderItmPrcgElmntSimln>();
        this.A_SalesOrderScheduleLineSimln = new list<SalesOrderSimulate.A_SalesOrderScheduleLineSimln>();
        this.A_SalesOrderPartnerSimulation = new list<SalesOrderSimulate.A_SalesOrderPartnerSimulation>();
        this.A_SalesOrderPricingSimulation = new list<SalesOrderSimulate.A_SalesOrderPricingSimulation>();
        this.A_SalesOrderPrcgElmntSimln = new list<SalesOrderSimulate.A_SalesOrderPrcgElmntSimln>();
    }

    public class A_SalesOrderSimulation {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String SalesOrderType { get; set; }
        @AuraEnabled public String SalesOrganization { get; set; }
        @AuraEnabled public String DistributionChannel { get; set; }
        @AuraEnabled public String OrganizationDivision { get; set; }
        @AuraEnabled public String SalesGroup { get; set; }
        @AuraEnabled public String SalesOffice { get; set; }
        @AuraEnabled public String SalesDistrict { get; set; }
        @AuraEnabled public String SoldToParty { get; set; }
        @AuraEnabled public String PurchaseOrderByCustomer { get; set; }
        @AuraEnabled public String CustomerPurchaseOrderType { get; set; }
        @AuraEnabled public Datetime CustomerPurchaseOrderDate { get; set; }
        @AuraEnabled public Datetime SalesOrderDate { get; set; }
        @AuraEnabled public String TransactionCurrency { get; set; }
        @AuraEnabled public String AccountingDocExternalReference { get; set; }
        @AuraEnabled public String CustomerTaxClassification1 { get; set; }
        @AuraEnabled public String CustomerTaxClassification2 { get; set; }
        @AuraEnabled public String CustomerTaxClassification3 { get; set; }
        @AuraEnabled public String CustomerTaxClassification4 { get; set; }
        @AuraEnabled public String CustomerTaxClassification5 { get; set; }
        @AuraEnabled public String CustomerTaxClassification6 { get; set; }
        @AuraEnabled public String CustomerTaxClassification7 { get; set; }
        @AuraEnabled public String CustomerTaxClassification8 { get; set; }
        @AuraEnabled public String CustomerTaxClassification9 { get; set; }
        @AuraEnabled public String PriceListType { get; set; }
        @AuraEnabled public String CustomerPriceGroup { get; set; }
        @AuraEnabled public String SDDocumentReason { get; set; }
        @AuraEnabled public Datetime PricingDate { get; set; }
        @AuraEnabled public Datetime RequestedDeliveryDate { get; set; }
        @AuraEnabled public String ShippingCondition { get; set; }
        @AuraEnabled public Boolean CompleteDeliveryIsDefined { get; set; }
        @AuraEnabled public String ShippingType { get; set; }
        @AuraEnabled public String IncotermsClassification { get; set; }
        @AuraEnabled public String IncotermsTransferLocation { get; set; }
        @AuraEnabled public String IncotermsLocation1 { get; set; }
        @AuraEnabled public String IncotermsLocation2 { get; set; }
        @AuraEnabled public String IncotermsVersion { get; set; }
        @AuraEnabled public String CustomerPaymentTerms { get; set; }
        @AuraEnabled public String PaymentMethod { get; set; }
        /**
        * Navigation property to A_SalesOrderCreditSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_Credit { get; set; }
        /**
        * Navigation property to A_SalesOrderItemSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_Item { get; set; }
        /**
        * Navigation property to A_SalesOrderPartnerSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_Partner { get; set; }
        /**
        * Navigation property to A_SalesOrderPricingSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_Pricing { get; set; }
        /**
        * Navigation property to A_SalesOrderPrcgElmntSimln.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_PricingElement { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderSimulation() {}

        public A_SalesOrderSimulation(String pSalesOrder, String pSalesOrderType, String pSalesOrganization, String pDistributionChannel, String pOrganizationDivision, String pSalesGroup, String pSalesOffice, String pSalesDistrict, String pSoldToParty, String pPurchaseOrderByCustomer, String pCustomerPurchaseOrderType, Datetime pCustomerPurchaseOrderDate, Datetime pSalesOrderDate, String pTransactionCurrency, String pAccountingDocExternalReference, String pCustomerTaxClassification1, String pCustomerTaxClassification2, String pCustomerTaxClassification3, String pCustomerTaxClassification4, String pCustomerTaxClassification5, String pCustomerTaxClassification6, String pCustomerTaxClassification7, String pCustomerTaxClassification8, String pCustomerTaxClassification9, String pPriceListType, String pCustomerPriceGroup, String pSDDocumentReason, Datetime pPricingDate, Datetime pRequestedDeliveryDate, String pShippingCondition, Boolean pCompleteDeliveryIsDefined, String pShippingType) {
            this.SalesOrder = pSalesOrder;
            this.SalesOrderType = pSalesOrderType;
            this.SalesOrganization = pSalesOrganization;
            this.DistributionChannel = pDistributionChannel;
            this.OrganizationDivision = pOrganizationDivision;
            this.SalesGroup = pSalesGroup;
            this.SalesOffice = pSalesOffice;
            this.SalesDistrict = pSalesDistrict;
            this.SoldToParty = pSoldToParty;
            this.PurchaseOrderByCustomer = pPurchaseOrderByCustomer;
            this.CustomerPurchaseOrderType = pCustomerPurchaseOrderType;
            this.CustomerPurchaseOrderDate = pCustomerPurchaseOrderDate;
            this.SalesOrderDate = pSalesOrderDate;
            this.TransactionCurrency = pTransactionCurrency;
            this.AccountingDocExternalReference = pAccountingDocExternalReference;
            this.CustomerTaxClassification1 = pCustomerTaxClassification1;
            this.CustomerTaxClassification2 = pCustomerTaxClassification2;
            this.CustomerTaxClassification3 = pCustomerTaxClassification3;
            this.CustomerTaxClassification4 = pCustomerTaxClassification4;
            this.CustomerTaxClassification5 = pCustomerTaxClassification5;
            this.CustomerTaxClassification6 = pCustomerTaxClassification6;
            this.CustomerTaxClassification7 = pCustomerTaxClassification7;
            this.CustomerTaxClassification8 = pCustomerTaxClassification8;
            this.CustomerTaxClassification9 = pCustomerTaxClassification9;
            this.PriceListType = pPriceListType;
            this.CustomerPriceGroup = pCustomerPriceGroup;
            this.SDDocumentReason = pSDDocumentReason;
            this.PricingDate = pPricingDate;
            this.RequestedDeliveryDate = pRequestedDeliveryDate;
            this.ShippingCondition = pShippingCondition;
            this.CompleteDeliveryIsDefined = pCompleteDeliveryIsDefined;
            this.ShippingType = pShippingType;
        }
    }

    public class A_SalesOrderCreditSimulation {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String TotalCreditCheckStatus { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderCreditSimulation() {}

        public A_SalesOrderCreditSimulation(String pSalesOrder, String pTotalCreditCheckStatus, String pto_SalesOrder, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.TotalCreditCheckStatus = pTotalCreditCheckStatus;
            this.to_SalesOrder = pto_SalesOrder;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    public class A_SalesOrderItemSimulation {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String SalesOrderItem { get; set; }
        @AuraEnabled public String HigherLevelItem { get; set; }
        @AuraEnabled public String SalesOrderItemCategory { get; set; }
        @AuraEnabled public String SalesOrderItemText { get; set; }
        @AuraEnabled public String PurchaseOrderByCustomer { get; set; }
        @AuraEnabled public String Material { get; set; }
        @AuraEnabled public String MaterialByCustomer { get; set; }
        @AuraEnabled public Datetime PricingDate { get; set; }
        @AuraEnabled public String PricingReferenceMaterial { get; set; }
        @AuraEnabled public Decimal RequestedQuantity { get; set; }
        @AuraEnabled public String RequestedQuantityUnit { get; set; }
        @AuraEnabled public String RequestedQuantitySAPUnit { get; set; }
        @AuraEnabled public String RequestedQuantityISOUnit { get; set; }
        @AuraEnabled public String TransactionCurrency { get; set; }
        @AuraEnabled public Decimal NetAmount { get; set; }
        @AuraEnabled public Decimal TaxAmount { get; set; }
        @AuraEnabled public Decimal CostAmount { get; set; }
        @AuraEnabled public Decimal Subtotal1Amount { get; set; }
        @AuraEnabled public Decimal Subtotal2Amount { get; set; }
        @AuraEnabled public Decimal Subtotal3Amount { get; set; }
        @AuraEnabled public Decimal Subtotal4Amount { get; set; }
        @AuraEnabled public Decimal Subtotal5Amount { get; set; }
        @AuraEnabled public Decimal Subtotal6Amount { get; set; }
        @AuraEnabled public String MaterialGroup { get; set; }
        @AuraEnabled public String MaterialPricingGroup { get; set; }
        @AuraEnabled public String Batch { get; set; }
        @AuraEnabled public String Plant { get; set; }
        @AuraEnabled public String StorageLocation { get; set; }
        @AuraEnabled public String DeliveryGroup { get; set; }
        @AuraEnabled public String ShippingPoint { get; set; }
        @AuraEnabled public String ShippingType { get; set; }
        @AuraEnabled public String DeliveryPriority { get; set; }
        @AuraEnabled public String IncotermsClassification { get; set; }
        @AuraEnabled public String IncotermsTransferLocation { get; set; }
        @AuraEnabled public String IncotermsLocation1 { get; set; }
        @AuraEnabled public String IncotermsLocation2 { get; set; }
        @AuraEnabled public String ProductTaxClassification1 { get; set; }
        @AuraEnabled public String ProductTaxClassification2 { get; set; }
        @AuraEnabled public String ProductTaxClassification3 { get; set; }
        @AuraEnabled public String ProductTaxClassification4 { get; set; }
        @AuraEnabled public String ProductTaxClassification5 { get; set; }
        @AuraEnabled public String ProductTaxClassification6 { get; set; }
        @AuraEnabled public String ProductTaxClassification7 { get; set; }
        @AuraEnabled public String ProductTaxClassification8 { get; set; }
        @AuraEnabled public String ProductTaxClassification9 { get; set; }
        @AuraEnabled public String CustomerPaymentTerms { get; set; }
        @AuraEnabled public String SalesDocumentRjcnReason { get; set; }
        /**
        * Navigation property to A_SalesOrderItemPartnerSimln.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_Partner { get; set; }
        /**
        * Navigation property to A_SalesOrderItmPrcgElmntSimln.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_PricingElement { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Navigation property to A_SalesOrderScheduleLineSimln.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_ScheduleLine { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderItemSimulation() {}

        public A_SalesOrderItemSimulation(String pSalesOrder, String pSalesOrderItem, String pHigherLevelItem, String pSalesOrderItemCategory, String pSalesOrderItemText, String pPurchaseOrderByCustomer, String pMaterial, String pMaterialByCustomer, Datetime pPricingDate, String pPricingReferenceMaterial, Decimal pRequestedQuantity, String pRequestedQuantityUnit, String pRequestedQuantitySAPUnit, String pRequestedQuantityISOUnit, String pTransactionCurrency, Decimal pNetAmount, Decimal pTaxAmount, Decimal pCostAmount, Decimal pSubtotal1Amount, Decimal pSubtotal2Amount, Decimal pSubtotal3Amount, Decimal pSubtotal4Amount, Decimal pSubtotal5Amount, Decimal pSubtotal6Amount, String pMaterialGroup, String pMaterialPricingGroup, String pBatch, String pPlant, String pStorageLocation, String pDeliveryGroup, String pShippingPoint, String pShippingType) {
            this.SalesOrder = pSalesOrder;
            this.SalesOrderItem = pSalesOrderItem;
            this.HigherLevelItem = pHigherLevelItem;
            this.SalesOrderItemCategory = pSalesOrderItemCategory;
            this.SalesOrderItemText = pSalesOrderItemText;
            this.PurchaseOrderByCustomer = pPurchaseOrderByCustomer;
            this.Material = pMaterial;
            this.MaterialByCustomer = pMaterialByCustomer;
            this.PricingDate = pPricingDate;
            this.PricingReferenceMaterial = pPricingReferenceMaterial;
            this.RequestedQuantity = pRequestedQuantity;
            this.RequestedQuantityUnit = pRequestedQuantityUnit;
            this.RequestedQuantitySAPUnit = pRequestedQuantitySAPUnit;
            this.RequestedQuantityISOUnit = pRequestedQuantityISOUnit;
            this.TransactionCurrency = pTransactionCurrency;
            this.NetAmount = pNetAmount;
            this.TaxAmount = pTaxAmount;
            this.CostAmount = pCostAmount;
            this.Subtotal1Amount = pSubtotal1Amount;
            this.Subtotal2Amount = pSubtotal2Amount;
            this.Subtotal3Amount = pSubtotal3Amount;
            this.Subtotal4Amount = pSubtotal4Amount;
            this.Subtotal5Amount = pSubtotal5Amount;
            this.Subtotal6Amount = pSubtotal6Amount;
            this.MaterialGroup = pMaterialGroup;
            this.MaterialPricingGroup = pMaterialPricingGroup;
            this.Batch = pBatch;
            this.Plant = pPlant;
            this.StorageLocation = pStorageLocation;
            this.DeliveryGroup = pDeliveryGroup;
            this.ShippingPoint = pShippingPoint;
            this.ShippingType = pShippingType;
        }
    }

    public class A_SalesOrderItemPartnerSimln {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String SalesOrderItem { get; set; }
        @AuraEnabled public String PartnerFunction { get; set; }
        @AuraEnabled public String Customer { get; set; }
        @AuraEnabled public String Supplier { get; set; }
        @AuraEnabled public String Personnel { get; set; }
        @AuraEnabled public String ContactPerson { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Navigation property to A_SalesOrderItemSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrderItem { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderItemPartnerSimln() {}

        public A_SalesOrderItemPartnerSimln(String pSalesOrder, String pSalesOrderItem, String pPartnerFunction, String pCustomer, String pSupplier, String pPersonnel, String pContactPerson, String pto_SalesOrder, String pto_SalesOrderItem, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.SalesOrderItem = pSalesOrderItem;
            this.PartnerFunction = pPartnerFunction;
            this.Customer = pCustomer;
            this.Supplier = pSupplier;
            this.Personnel = pPersonnel;
            this.ContactPerson = pContactPerson;
            this.to_SalesOrder = pto_SalesOrder;
            this.to_SalesOrderItem = pto_SalesOrderItem;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    public class A_SalesOrderItmPrcgElmntSimln {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String SalesOrderItem { get; set; }
        @AuraEnabled public String PricingProcedureStep { get; set; }
        @AuraEnabled public String PricingProcedureCounter { get; set; }
        @AuraEnabled public String ConditionType { get; set; }
        @AuraEnabled public String ConditionCalculationType { get; set; }
        @AuraEnabled public Decimal ConditionRateValue { get; set; }
        @AuraEnabled public String ConditionCurrency { get; set; }
        @AuraEnabled public Decimal ConditionQuantity { get; set; }
        @AuraEnabled public String ConditionQuantityUnit { get; set; }
        @AuraEnabled public String ConditionQuantitySAPUnit { get; set; }
        @AuraEnabled public String ConditionQuantityISOUnit { get; set; }
        @AuraEnabled public Boolean ConditionIsForStatistics { get; set; }
        @AuraEnabled public Decimal ConditionAmount { get; set; }
        @AuraEnabled public String TransactionCurrency { get; set; }
        @AuraEnabled public String ConditionInactiveReason { get; set; }
        @AuraEnabled public Boolean ConditionIsManuallyChanged { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Navigation property to A_SalesOrderItemSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrderItem { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderItmPrcgElmntSimln() {}

        public A_SalesOrderItmPrcgElmntSimln(String pSalesOrder, String pSalesOrderItem, String pPricingProcedureStep, String pPricingProcedureCounter, String pConditionType, String pConditionCalculationType, Decimal pConditionRateValue, String pConditionCurrency, Decimal pConditionQuantity, String pConditionQuantityUnit, String pConditionQuantitySAPUnit, String pConditionQuantityISOUnit, Boolean pConditionIsForStatistics, Decimal pConditionAmount, String pTransactionCurrency, String pConditionInactiveReason, Boolean pConditionIsManuallyChanged, String pto_SalesOrder, String pto_SalesOrderItem, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.SalesOrderItem = pSalesOrderItem;
            this.PricingProcedureStep = pPricingProcedureStep;
            this.PricingProcedureCounter = pPricingProcedureCounter;
            this.ConditionType = pConditionType;
            this.ConditionCalculationType = pConditionCalculationType;
            this.ConditionRateValue = pConditionRateValue;
            this.ConditionCurrency = pConditionCurrency;
            this.ConditionQuantity = pConditionQuantity;
            this.ConditionQuantityUnit = pConditionQuantityUnit;
            this.ConditionQuantitySAPUnit = pConditionQuantitySAPUnit;
            this.ConditionQuantityISOUnit = pConditionQuantityISOUnit;
            this.ConditionIsForStatistics = pConditionIsForStatistics;
            this.ConditionAmount = pConditionAmount;
            this.TransactionCurrency = pTransactionCurrency;
            this.ConditionInactiveReason = pConditionInactiveReason;
            this.ConditionIsManuallyChanged = pConditionIsManuallyChanged;
            this.to_SalesOrder = pto_SalesOrder;
            this.to_SalesOrderItem = pto_SalesOrderItem;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    public class A_SalesOrderScheduleLineSimln {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String SalesOrderItem { get; set; }
        @AuraEnabled public String ScheduleLine { get; set; }
        @AuraEnabled public Datetime RequestedDeliveryDate { get; set; }
        @AuraEnabled public Datetime ConfirmedDeliveryDate { get; set; }
        @AuraEnabled public String OrderQuantityUnit { get; set; }
        @AuraEnabled public String OrderQuantitySAPUnit { get; set; }
        @AuraEnabled public String OrderQuantityISOUnit { get; set; }
        @AuraEnabled public Decimal ScheduleLineOrderQuantity { get; set; }
        @AuraEnabled public Decimal ConfdOrderQtyByMatlAvailCheck { get; set; }
        @AuraEnabled public Decimal OpenConfdDelivQtyInOrdQtyUnit { get; set; }
        @AuraEnabled public Decimal CorrectedQtyInOrderQtyUnit { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Navigation property to A_SalesOrderItemSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrderItem { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderScheduleLineSimln() {}

        public A_SalesOrderScheduleLineSimln(String pSalesOrder, String pSalesOrderItem, String pScheduleLine, Datetime pRequestedDeliveryDate, Datetime pConfirmedDeliveryDate, String pOrderQuantityUnit, String pOrderQuantitySAPUnit, String pOrderQuantityISOUnit, Decimal pScheduleLineOrderQuantity, Decimal pConfdOrderQtyByMatlAvailCheck, Decimal pOpenConfdDelivQtyInOrdQtyUnit, Decimal pCorrectedQtyInOrderQtyUnit, String pto_SalesOrder, String pto_SalesOrderItem, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.SalesOrderItem = pSalesOrderItem;
            this.ScheduleLine = pScheduleLine;
            this.RequestedDeliveryDate = pRequestedDeliveryDate;
            this.ConfirmedDeliveryDate = pConfirmedDeliveryDate;
            this.OrderQuantityUnit = pOrderQuantityUnit;
            this.OrderQuantitySAPUnit = pOrderQuantitySAPUnit;
            this.OrderQuantityISOUnit = pOrderQuantityISOUnit;
            this.ScheduleLineOrderQuantity = pScheduleLineOrderQuantity;
            this.ConfdOrderQtyByMatlAvailCheck = pConfdOrderQtyByMatlAvailCheck;
            this.OpenConfdDelivQtyInOrdQtyUnit = pOpenConfdDelivQtyInOrdQtyUnit;
            this.CorrectedQtyInOrderQtyUnit = pCorrectedQtyInOrderQtyUnit;
            this.to_SalesOrder = pto_SalesOrder;
            this.to_SalesOrderItem = pto_SalesOrderItem;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    public class A_SalesOrderPartnerSimulation {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String PartnerFunction { get; set; }
        @AuraEnabled public String Customer { get; set; }
        @AuraEnabled public String Supplier { get; set; }
        @AuraEnabled public String Personnel { get; set; }
        @AuraEnabled public String ContactPerson { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderPartnerSimulation() {}

        public A_SalesOrderPartnerSimulation(String pSalesOrder, String pPartnerFunction, String pCustomer, String pSupplier, String pPersonnel, String pContactPerson, String pto_SalesOrder, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.PartnerFunction = pPartnerFunction;
            this.Customer = pCustomer;
            this.Supplier = pSupplier;
            this.Personnel = pPersonnel;
            this.ContactPerson = pContactPerson;
            this.to_SalesOrder = pto_SalesOrder;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    public class A_SalesOrderPricingSimulation {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public Decimal TotalNetAmount { get; set; }
        @AuraEnabled public String TransactionCurrency { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderPricingSimulation() {}

        public A_SalesOrderPricingSimulation(String pSalesOrder, Decimal pTotalNetAmount, String pTransactionCurrency, String pto_SalesOrder, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.TotalNetAmount = pTotalNetAmount;
            this.TransactionCurrency = pTransactionCurrency;
            this.to_SalesOrder = pto_SalesOrder;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    public class A_SalesOrderPrcgElmntSimln {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String PricingProcedureStep { get; set; }
        @AuraEnabled public String PricingProcedureCounter { get; set; }
        @AuraEnabled public String ConditionType { get; set; }
        @AuraEnabled public String ConditionCalculationType { get; set; }
        @AuraEnabled public Decimal ConditionRateValue { get; set; }
        @AuraEnabled public String ConditionCurrency { get; set; }
        @AuraEnabled public Decimal ConditionQuantity { get; set; }
        @AuraEnabled public String ConditionQuantityUnit { get; set; }
        @AuraEnabled public String ConditionQuantitySAPUnit { get; set; }
        @AuraEnabled public String ConditionQuantityISOUnit { get; set; }
        @AuraEnabled public Boolean ConditionIsForStatistics { get; set; }
        @AuraEnabled public Decimal ConditionAmount { get; set; }
        @AuraEnabled public String TransactionCurrency { get; set; }
        @AuraEnabled public String ConditionInactiveReason { get; set; }
        @AuraEnabled public Boolean ConditionIsManuallyChanged { get; set; }
        /**
        * Navigation property to A_SalesOrderSimulation.OVC_FKEY.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String to_SalesOrder { get; set; }
        /**
        * Association property to the principal end's (parent's) navigation property.
        * It can be used for the case that primary key fields are not generated yet at runInsert().
        */
        @AuraEnabled public String OVC_FKEY { get; set; }

        public A_SalesOrderPrcgElmntSimln() {}

        public A_SalesOrderPrcgElmntSimln(String pSalesOrder, String pPricingProcedureStep, String pPricingProcedureCounter, String pConditionType, String pConditionCalculationType, Decimal pConditionRateValue, String pConditionCurrency, Decimal pConditionQuantity, String pConditionQuantityUnit, String pConditionQuantitySAPUnit, String pConditionQuantityISOUnit, Boolean pConditionIsForStatistics, Decimal pConditionAmount, String pTransactionCurrency, String pConditionInactiveReason, Boolean pConditionIsManuallyChanged, String pto_SalesOrder, String pOVC_FKEY) {
            this.SalesOrder = pSalesOrder;
            this.PricingProcedureStep = pPricingProcedureStep;
            this.PricingProcedureCounter = pPricingProcedureCounter;
            this.ConditionType = pConditionType;
            this.ConditionCalculationType = pConditionCalculationType;
            this.ConditionRateValue = pConditionRateValue;
            this.ConditionCurrency = pConditionCurrency;
            this.ConditionQuantity = pConditionQuantity;
            this.ConditionQuantityUnit = pConditionQuantityUnit;
            this.ConditionQuantitySAPUnit = pConditionQuantitySAPUnit;
            this.ConditionQuantityISOUnit = pConditionQuantityISOUnit;
            this.ConditionIsForStatistics = pConditionIsForStatistics;
            this.ConditionAmount = pConditionAmount;
            this.TransactionCurrency = pTransactionCurrency;
            this.ConditionInactiveReason = pConditionInactiveReason;
            this.ConditionIsManuallyChanged = pConditionIsManuallyChanged;
            this.to_SalesOrder = pto_SalesOrder;
            this.OVC_FKEY = pOVC_FKEY;
        }
    }

    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderSimulation> A_SalesOrderSimulation { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderCreditSimulation> A_SalesOrderCreditSimulation { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderItemSimulation> A_SalesOrderItemSimulation { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderItemPartnerSimln> A_SalesOrderItemPartnerSimln { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderItmPrcgElmntSimln> A_SalesOrderItmPrcgElmntSimln { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderScheduleLineSimln> A_SalesOrderScheduleLineSimln { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderPartnerSimulation> A_SalesOrderPartnerSimulation { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderPricingSimulation> A_SalesOrderPricingSimulation { get; set; }
    @AuraEnabled public list<SalesOrderSimulate.A_SalesOrderPrcgElmntSimln> A_SalesOrderPrcgElmntSimln { get; set; }

    public string inputSetName { get; set; }

    public SalesOrderSimulate runQuery(overcast.Query query) {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderSimulate response = this.runQuery(query, logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public SalesOrderSimulate runQuery(overcast.Query query, overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential);
    }

    public string runQueryAsync(overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential, con);
    }

    public SalesOrderSimulate runInsert() {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderSimulate response = this.runInsert(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public SalesOrderSimulate runInsert(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwCreate, null, logger, namedCredential);
    }
    
    public string runInsertAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwCreate, null, logger, namedCredential, con);
    }

    public SalesOrderSimulate runUpdate() {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderSimulate response = this.runUpdate(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public SalesOrderSimulate runUpdate(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwUpdate, null, logger, namedCredential);
    }
    
    public string runUpdateAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwUpdate, null, logger, namedCredential, con);
    }

    public SalesOrderSimulate runDelete() {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderSimulate response = this.runDelete(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public SalesOrderSimulate runDelete(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwDelete, null, logger, namedCredential);
    }
    
    public string runDeleteAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwDelete, null, logger, namedCredential, con);
    }

    public static SalesOrderSimulate getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return SalesOrderSimulate.deserialize(response.getBody());
    }

    private overcast.SynchronousHandler setup(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('SalesOrderSimulate');
        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
        sh.Operation = operation;

        if (query != null) {
            sh.Condition = query.where_x;
            sh.OrderBy = query.orderBy;
            sh.Fields = query.fields;
            sh.Limit_x = query.limit_x;
            sh.Offset = query.offset;
        }
        return sh;
    }
    
    private SalesOrderSimulate run(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return SalesOrderSimulate.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return SalesOrderSimulate.deserialize(sh.Response);
    }

    private string runAsync(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();

        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }
        

    private static overcast.Logger createLogger() {
        return new overcast.Logger('SalesOrderSimulate');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static SalesOrderSimulate deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            SalesOrderSimulate obj = new SalesOrderSimulate();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new SalesOrderSimulate();
        }
        SalesOrderSimulate obj = (SalesOrderSimulate)JSON.deserialize(outputData, SalesOrderSimulate.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new SalesOrderSimulateException('Response null for SalesOrderSimulate request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                SalesOrderSimulateException ex = new SalesOrderSimulateException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new SalesOrderSimulateException('Malformed response for SalesOrderSimulate request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new SalesOrderSimulateException('Response null for SalesOrderSimulate request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new SalesOrderSimulateException(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'A_SalesOrderSimulation';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(SalesOrderSimulateMeta0.metadata);
        }
        return metadata;
    }

}