/* 
 * Generated by Overcast UTC 2022-03-04 02:40:37Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class SalesOrderSimulateTest {
    @istest
    private static void testSalesOrderSimulate() {
        SalesOrderSimulate actual = new SalesOrderSimulate();
        system.assertNotEquals(null, actual.A_SalesOrderSimulation);
        system.assertNotEquals(null, actual.A_SalesOrderCreditSimulation);
        system.assertNotEquals(null, actual.A_SalesOrderItemSimulation);
        system.assertNotEquals(null, actual.A_SalesOrderItemPartnerSimln);
        system.assertNotEquals(null, actual.A_SalesOrderItmPrcgElmntSimln);
        system.assertNotEquals(null, actual.A_SalesOrderScheduleLineSimln);
        system.assertNotEquals(null, actual.A_SalesOrderPartnerSimulation);
        system.assertNotEquals(null, actual.A_SalesOrderPricingSimulation);
        system.assertNotEquals(null, actual.A_SalesOrderPrcgElmntSimln);
    }

    @istest
    private static void testA_SalesOrderSimulation() {
        SalesOrderSimulate.A_SalesOrderSimulation actual = new SalesOrderSimulate.A_SalesOrderSimulation('a','a','a','a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a',true,'a');

        actual.IncotermsClassification = 'a';
        actual.IncotermsTransferLocation = 'a';
        actual.IncotermsLocation1 = 'a';
        actual.IncotermsLocation2 = 'a';
        actual.IncotermsVersion = 'a';
        actual.CustomerPaymentTerms = 'a';
        actual.PaymentMethod = 'a';
        actual.to_Credit = 'a';
        actual.to_Item = 'a';
        actual.to_Partner = 'a';
        actual.to_Pricing = 'a';
        actual.to_PricingElement = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.SalesOrderType);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.OrganizationDivision);
        system.assertEquals('a', actual.SalesGroup);
        system.assertEquals('a', actual.SalesOffice);
        system.assertEquals('a', actual.SalesDistrict);
        system.assertEquals('a', actual.SoldToParty);
        system.assertEquals('a', actual.PurchaseOrderByCustomer);
        system.assertEquals('a', actual.CustomerPurchaseOrderType);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustomerPurchaseOrderDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.SalesOrderDate);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals('a', actual.AccountingDocExternalReference);
        system.assertEquals('a', actual.CustomerTaxClassification1);
        system.assertEquals('a', actual.CustomerTaxClassification2);
        system.assertEquals('a', actual.CustomerTaxClassification3);
        system.assertEquals('a', actual.CustomerTaxClassification4);
        system.assertEquals('a', actual.CustomerTaxClassification5);
        system.assertEquals('a', actual.CustomerTaxClassification6);
        system.assertEquals('a', actual.CustomerTaxClassification7);
        system.assertEquals('a', actual.CustomerTaxClassification8);
        system.assertEquals('a', actual.CustomerTaxClassification9);
        system.assertEquals('a', actual.PriceListType);
        system.assertEquals('a', actual.CustomerPriceGroup);
        system.assertEquals('a', actual.SDDocumentReason);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.PricingDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.RequestedDeliveryDate);
        system.assertEquals('a', actual.ShippingCondition);
        system.assertEquals(true, actual.CompleteDeliveryIsDefined);
        system.assertEquals('a', actual.ShippingType);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals('a', actual.IncotermsVersion);
        system.assertEquals('a', actual.CustomerPaymentTerms);
        system.assertEquals('a', actual.PaymentMethod);
        system.assertEquals('a', actual.to_Credit);
        system.assertEquals('a', actual.to_Item);
        system.assertEquals('a', actual.to_Partner);
        system.assertEquals('a', actual.to_Pricing);
        system.assertEquals('a', actual.to_PricingElement);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderSimulation actual0 = new SalesOrderSimulate.A_SalesOrderSimulation();
    }
    @istest
    private static void testA_SalesOrderCreditSimulation() {
        SalesOrderSimulate.A_SalesOrderCreditSimulation actual = new SalesOrderSimulate.A_SalesOrderCreditSimulation('a','a','a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.TotalCreditCheckStatus);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderCreditSimulation actual0 = new SalesOrderSimulate.A_SalesOrderCreditSimulation();
    }
    @istest
    private static void testA_SalesOrderItemSimulation() {
        SalesOrderSimulate.A_SalesOrderItemSimulation actual = new SalesOrderSimulate.A_SalesOrderItemSimulation('a','a','a','a','a','a','a','a',Datetime.newInstance(2000,1,1),'a',0,'a','a','a','a',0,0,0,0,0,0,0,0,0,'a','a','a','a','a','a','a','a');

        actual.DeliveryPriority = 'a';
        actual.IncotermsClassification = 'a';
        actual.IncotermsTransferLocation = 'a';
        actual.IncotermsLocation1 = 'a';
        actual.IncotermsLocation2 = 'a';
        actual.ProductTaxClassification1 = 'a';
        actual.ProductTaxClassification2 = 'a';
        actual.ProductTaxClassification3 = 'a';
        actual.ProductTaxClassification4 = 'a';
        actual.ProductTaxClassification5 = 'a';
        actual.ProductTaxClassification6 = 'a';
        actual.ProductTaxClassification7 = 'a';
        actual.ProductTaxClassification8 = 'a';
        actual.ProductTaxClassification9 = 'a';
        actual.CustomerPaymentTerms = 'a';
        actual.SalesDocumentRjcnReason = 'a';
        actual.to_Partner = 'a';
        actual.to_PricingElement = 'a';
        actual.to_SalesOrder = 'a';
        actual.to_ScheduleLine = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.SalesOrderItem);
        system.assertEquals('a', actual.HigherLevelItem);
        system.assertEquals('a', actual.SalesOrderItemCategory);
        system.assertEquals('a', actual.SalesOrderItemText);
        system.assertEquals('a', actual.PurchaseOrderByCustomer);
        system.assertEquals('a', actual.Material);
        system.assertEquals('a', actual.MaterialByCustomer);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.PricingDate);
        system.assertEquals('a', actual.PricingReferenceMaterial);
        system.assertEquals(0, actual.RequestedQuantity);
        system.assertEquals('a', actual.RequestedQuantityUnit);
        system.assertEquals('a', actual.RequestedQuantitySAPUnit);
        system.assertEquals('a', actual.RequestedQuantityISOUnit);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals(0, actual.NetAmount);
        system.assertEquals(0, actual.TaxAmount);
        system.assertEquals(0, actual.CostAmount);
        system.assertEquals(0, actual.Subtotal1Amount);
        system.assertEquals(0, actual.Subtotal2Amount);
        system.assertEquals(0, actual.Subtotal3Amount);
        system.assertEquals(0, actual.Subtotal4Amount);
        system.assertEquals(0, actual.Subtotal5Amount);
        system.assertEquals(0, actual.Subtotal6Amount);
        system.assertEquals('a', actual.MaterialGroup);
        system.assertEquals('a', actual.MaterialPricingGroup);
        system.assertEquals('a', actual.Batch);
        system.assertEquals('a', actual.Plant);
        system.assertEquals('a', actual.StorageLocation);
        system.assertEquals('a', actual.DeliveryGroup);
        system.assertEquals('a', actual.ShippingPoint);
        system.assertEquals('a', actual.ShippingType);
        system.assertEquals('a', actual.DeliveryPriority);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals('a', actual.ProductTaxClassification1);
        system.assertEquals('a', actual.ProductTaxClassification2);
        system.assertEquals('a', actual.ProductTaxClassification3);
        system.assertEquals('a', actual.ProductTaxClassification4);
        system.assertEquals('a', actual.ProductTaxClassification5);
        system.assertEquals('a', actual.ProductTaxClassification6);
        system.assertEquals('a', actual.ProductTaxClassification7);
        system.assertEquals('a', actual.ProductTaxClassification8);
        system.assertEquals('a', actual.ProductTaxClassification9);
        system.assertEquals('a', actual.CustomerPaymentTerms);
        system.assertEquals('a', actual.SalesDocumentRjcnReason);
        system.assertEquals('a', actual.to_Partner);
        system.assertEquals('a', actual.to_PricingElement);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.to_ScheduleLine);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderItemSimulation actual0 = new SalesOrderSimulate.A_SalesOrderItemSimulation();
    }
    @istest
    private static void testA_SalesOrderItemPartnerSimln() {
        SalesOrderSimulate.A_SalesOrderItemPartnerSimln actual = new SalesOrderSimulate.A_SalesOrderItemPartnerSimln('a','a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.SalesOrderItem);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.Personnel);
        system.assertEquals('a', actual.ContactPerson);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.to_SalesOrderItem);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderItemPartnerSimln actual0 = new SalesOrderSimulate.A_SalesOrderItemPartnerSimln();
    }
    @istest
    private static void testA_SalesOrderItmPrcgElmntSimln() {
        SalesOrderSimulate.A_SalesOrderItmPrcgElmntSimln actual = new SalesOrderSimulate.A_SalesOrderItmPrcgElmntSimln('a','a','a','a','a','a',0,'a',0,'a','a','a',true,0,'a','a',true,'a','a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.SalesOrderItem);
        system.assertEquals('a', actual.PricingProcedureStep);
        system.assertEquals('a', actual.PricingProcedureCounter);
        system.assertEquals('a', actual.ConditionType);
        system.assertEquals('a', actual.ConditionCalculationType);
        system.assertEquals(0, actual.ConditionRateValue);
        system.assertEquals('a', actual.ConditionCurrency);
        system.assertEquals(0, actual.ConditionQuantity);
        system.assertEquals('a', actual.ConditionQuantityUnit);
        system.assertEquals('a', actual.ConditionQuantitySAPUnit);
        system.assertEquals('a', actual.ConditionQuantityISOUnit);
        system.assertEquals(true, actual.ConditionIsForStatistics);
        system.assertEquals(0, actual.ConditionAmount);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals('a', actual.ConditionInactiveReason);
        system.assertEquals(true, actual.ConditionIsManuallyChanged);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.to_SalesOrderItem);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderItmPrcgElmntSimln actual0 = new SalesOrderSimulate.A_SalesOrderItmPrcgElmntSimln();
    }
    @istest
    private static void testA_SalesOrderScheduleLineSimln() {
        SalesOrderSimulate.A_SalesOrderScheduleLineSimln actual = new SalesOrderSimulate.A_SalesOrderScheduleLineSimln('a','a','a',Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a',0,0,0,0,'a','a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.SalesOrderItem);
        system.assertEquals('a', actual.ScheduleLine);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.RequestedDeliveryDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ConfirmedDeliveryDate);
        system.assertEquals('a', actual.OrderQuantityUnit);
        system.assertEquals('a', actual.OrderQuantitySAPUnit);
        system.assertEquals('a', actual.OrderQuantityISOUnit);
        system.assertEquals(0, actual.ScheduleLineOrderQuantity);
        system.assertEquals(0, actual.ConfdOrderQtyByMatlAvailCheck);
        system.assertEquals(0, actual.OpenConfdDelivQtyInOrdQtyUnit);
        system.assertEquals(0, actual.CorrectedQtyInOrderQtyUnit);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.to_SalesOrderItem);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderScheduleLineSimln actual0 = new SalesOrderSimulate.A_SalesOrderScheduleLineSimln();
    }
    @istest
    private static void testA_SalesOrderPartnerSimulation() {
        SalesOrderSimulate.A_SalesOrderPartnerSimulation actual = new SalesOrderSimulate.A_SalesOrderPartnerSimulation('a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.Customer);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.Personnel);
        system.assertEquals('a', actual.ContactPerson);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderPartnerSimulation actual0 = new SalesOrderSimulate.A_SalesOrderPartnerSimulation();
    }
    @istest
    private static void testA_SalesOrderPricingSimulation() {
        SalesOrderSimulate.A_SalesOrderPricingSimulation actual = new SalesOrderSimulate.A_SalesOrderPricingSimulation('a',0,'a','a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals(0, actual.TotalNetAmount);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderPricingSimulation actual0 = new SalesOrderSimulate.A_SalesOrderPricingSimulation();
    }
    @istest
    private static void testA_SalesOrderPrcgElmntSimln() {
        SalesOrderSimulate.A_SalesOrderPrcgElmntSimln actual = new SalesOrderSimulate.A_SalesOrderPrcgElmntSimln('a','a','a','a','a',0,'a',0,'a','a','a',true,0,'a','a',true,'a','a');

        system.assertEquals('a', actual.SalesOrder);
        system.assertEquals('a', actual.PricingProcedureStep);
        system.assertEquals('a', actual.PricingProcedureCounter);
        system.assertEquals('a', actual.ConditionType);
        system.assertEquals('a', actual.ConditionCalculationType);
        system.assertEquals(0, actual.ConditionRateValue);
        system.assertEquals('a', actual.ConditionCurrency);
        system.assertEquals(0, actual.ConditionQuantity);
        system.assertEquals('a', actual.ConditionQuantityUnit);
        system.assertEquals('a', actual.ConditionQuantitySAPUnit);
        system.assertEquals('a', actual.ConditionQuantityISOUnit);
        system.assertEquals(true, actual.ConditionIsForStatistics);
        system.assertEquals(0, actual.ConditionAmount);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals('a', actual.ConditionInactiveReason);
        system.assertEquals(true, actual.ConditionIsManuallyChanged);
        system.assertEquals('a', actual.to_SalesOrder);
        system.assertEquals('a', actual.OVC_FKEY);

        SalesOrderSimulate.A_SalesOrderPrcgElmntSimln actual0 = new SalesOrderSimulate.A_SalesOrderPrcgElmntSimln();
    }
    @istest
    private static void testrunQuery() {
        SalesOrderSimulate request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        SalesOrderSimulate response = request.runQuery(query1);
        system.assertEquals('a', response.A_SalesOrderSimulation[0].SalesOrder);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        SalesOrderSimulate request = testSetup();
        SalesOrderSimulate response = request.runInsert();
        system.assertEquals('a', response.A_SalesOrderSimulation[0].SalesOrder);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        SalesOrderSimulate request = testSetup();
        SalesOrderSimulate response = request.runUpdate();
        system.assertEquals('a', response.A_SalesOrderSimulation[0].SalesOrder);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        SalesOrderSimulate request = testSetup();
        SalesOrderSimulate response = request.runDelete();
        system.assertEquals('a', response.A_SalesOrderSimulation[0].SalesOrder);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static SalesOrderSimulate testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('SalesOrderSimulate');
        SalesOrderSimulate request = new SalesOrderSimulate();
        SalesOrderSimulate.A_SalesOrderSimulation value1 = new SalesOrderSimulate.A_SalesOrderSimulation();
        value1.SalesOrder = 'a';
        request.A_SalesOrderSimulation.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        SalesOrderSimulate input = new SalesOrderSimulate();
        SalesOrderSimulate.A_SalesOrderSimulation value1 = new SalesOrderSimulate.A_SalesOrderSimulation();
        value1.SalesOrder = 'a';
        input.A_SalesOrderSimulation.add(value1);
        SalesOrderSimulate actual = (SalesOrderSimulate)JSON.deserialize(input.serialize(), SalesOrderSimulate.class);
        system.assertEquals('a', actual.A_SalesOrderSimulation[0].SalesOrder);
    }

    @istest
    private static void testDeserialize() {
        SalesOrderSimulate output = new SalesOrderSimulate();
        SalesOrderSimulate.A_SalesOrderSimulation value1 = new SalesOrderSimulate.A_SalesOrderSimulation();
        value1.SalesOrder = 'a';
        output.A_SalesOrderSimulation.add(value1);

        string s = output.serialize();
        SalesOrderSimulate actual = SalesOrderSimulate.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.A_SalesOrderSimulation[0].SalesOrder);
    }

    @istest
    private static void testDeserializeError() {
        try {
            SalesOrderSimulate actual = SalesOrderSimulate.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (SalesOrderSimulate.SalesOrderSimulateException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        SalesOrderSimulate output = new SalesOrderSimulate();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        SalesOrderSimulate output = new SalesOrderSimulate();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        SalesOrderSimulate output2 = new SalesOrderSimulate();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        SalesOrderSimulate output = new SalesOrderSimulate();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('A_SalesOrderSimulation'));
        system.assert(keys.contains('A_SalesOrderCreditSimulation'));
        system.assert(keys.contains('A_SalesOrderItemSimulation'));
        system.assert(keys.contains('A_SalesOrderItemPartnerSimln'));
        system.assert(keys.contains('A_SalesOrderItmPrcgElmntSimln'));
        system.assert(keys.contains('A_SalesOrderScheduleLineSimln'));
        system.assert(keys.contains('A_SalesOrderPartnerSimulation'));
        system.assert(keys.contains('A_SalesOrderPricingSimulation'));
        system.assert(keys.contains('A_SalesOrderPrcgElmntSimln'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('A_SalesOrderSimulation', first.name);
    }

}