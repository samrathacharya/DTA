/* 
 * Generated by Overcast UTC 2021-12-05 22:42:14Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcSageTest3Test {
    @istest
    private static void testzjcSageTest3() {
        zjcSageTest3 actual = new zjcSageTest3();
        system.assertNotEquals(null, actual.fHCM2_Team_Member_c);
    }

    @istest
    private static void testfHCM2_Team_Member_c() {
        zjcSageTest3.fHCM2_Team_Member_c actual = new zjcSageTest3.fHCM2_Team_Member_c('a','a','a',Datetime.newInstance(2000,1,1),'a',Datetime.newInstance(2000,1,1),'a',Datetime.newInstance(2000,1,1),Date.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),Datetime.newInstance(2000,1,1),'a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1),true,Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a');

        actual.fHCM2_Unique_Id_c = 'a';
        actual.fHCM2_User_Profile_c = 'a';
        actual.fHCM2_User_c = 'a';
        actual.fHCM2_Username_c = 'a';
        actual.Primary_Emergency_Contacts_c = 0;
        actual.Title_c = 'a';
        actual.SMP_Company_Entity_c = 'a';
        actual.Business_Unit_c = 'a';
        actual.Employment_Type_c = 'a';
        actual.D_Manager_s_ID_c = 'a';
        actual.D_Manager_s_Flag_c = 'a';
        actual.D_Integration_Job_Profile_c = 'a';
        actual.D_Integration_Active_Flag_c = 'a';
        actual.New_Preferred_Job_Title_c = 'a';
        actual.IsActiveUser_c = true;
        actual.Hire_Type_c = 'a';
        actual.D_Tech_Services_Start_date_c = Date.newInstance(2000,1,1);
        actual.D_Tech_Services_End_date_c = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.Id);
        system.assertEquals('a', actual.OwnerId);
        system.assertEquals('a', actual.Name);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreatedDate);
        system.assertEquals('a', actual.CreatedById);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastModifiedDate);
        system.assertEquals('a', actual.LastModifiedById);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.SystemModstamp);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LastActivityDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastViewedDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastReferencedDate);
        system.assertEquals('a', actual.fHCM2_Business_c);
        system.assertEquals('a', actual.fHCM2_Country_c);
        system.assertEquals('a', actual.fHCM2_Current_Employment_c);
        system.assertEquals('a', actual.fHCM2_Division_c);
        system.assertEquals('a', actual.fHCM2_Employment_Status_c);
        system.assertEquals('a', actual.fHCM2_Federation_Id_c);
        system.assertEquals('a', actual.fHCM2_First_Name_c);
        system.assertEquals('a', actual.fHCM2_Has_Left_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Hire_Date_c);
        system.assertEquals(true, actual.fHCM2_Is_Manager_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.fHCM2_Job_Effective_Date_c);
        system.assertEquals('a', actual.fHCM2_Job_Title_c);
        system.assertEquals('a', actual.fHCM2_Location_c);
        system.assertEquals('a', actual.fHCM2_Manager_User_c);
        system.assertEquals('a', actual.fHCM2_Manager_c);
        system.assertEquals('a', actual.fHCM2_Middle_Name_c);
        system.assertEquals('a', actual.fHCM2_Name_Full_c);
        system.assertEquals('a', actual.fHCM2_Name_Reversed_c);
        system.assertEquals('a', actual.fHCM2_Preferred_Name_c);
        system.assertEquals('a', actual.fHCM2_Surname_c);
        system.assertEquals('a', actual.fHCM2_Team_c);
        system.assertEquals('a', actual.fHCM2_Unique_Id_c);
        system.assertEquals('a', actual.fHCM2_User_Profile_c);
        system.assertEquals('a', actual.fHCM2_User_c);
        system.assertEquals('a', actual.fHCM2_Username_c);
        system.assertEquals(0, actual.Primary_Emergency_Contacts_c);
        system.assertEquals('a', actual.Title_c);
        system.assertEquals('a', actual.SMP_Company_Entity_c);
        system.assertEquals('a', actual.Business_Unit_c);
        system.assertEquals('a', actual.Employment_Type_c);
        system.assertEquals('a', actual.D_Manager_s_ID_c);
        system.assertEquals('a', actual.D_Manager_s_Flag_c);
        system.assertEquals('a', actual.D_Integration_Job_Profile_c);
        system.assertEquals('a', actual.D_Integration_Active_Flag_c);
        system.assertEquals('a', actual.New_Preferred_Job_Title_c);
        system.assertEquals(true, actual.IsActiveUser_c);
        system.assertEquals('a', actual.Hire_Type_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.D_Tech_Services_Start_date_c);
        system.assertEquals(Date.newInstance(2000,1,1), actual.D_Tech_Services_End_date_c);

        zjcSageTest3.fHCM2_Team_Member_c actual0 = new zjcSageTest3.fHCM2_Team_Member_c();
    }
    @istest
    private static void testrunQuery() {
        zjcSageTest3 request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjcSageTest3 response = request.runQuery(query1);
        system.assertEquals('a', response.fHCM2_Team_Member_c[0].Id);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        zjcSageTest3 request = testSetup();
        zjcSageTest3 response = request.runInsert();
        system.assertEquals('a', response.fHCM2_Team_Member_c[0].Id);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        zjcSageTest3 request = testSetup();
        zjcSageTest3 response = request.runUpdate();
        system.assertEquals('a', response.fHCM2_Team_Member_c[0].Id);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        zjcSageTest3 request = testSetup();
        zjcSageTest3 response = request.runDelete();
        system.assertEquals('a', response.fHCM2_Team_Member_c[0].Id);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static zjcSageTest3 testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcSageTest3');
        zjcSageTest3 request = new zjcSageTest3();
        zjcSageTest3.fHCM2_Team_Member_c value1 = new zjcSageTest3.fHCM2_Team_Member_c();
        value1.Id = 'a';
        request.fHCM2_Team_Member_c.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjcSageTest3 input = new zjcSageTest3();
        zjcSageTest3.fHCM2_Team_Member_c value1 = new zjcSageTest3.fHCM2_Team_Member_c();
        value1.Id = 'a';
        input.fHCM2_Team_Member_c.add(value1);
        zjcSageTest3 actual = (zjcSageTest3)JSON.deserialize(input.serialize(), zjcSageTest3.class);
        system.assertEquals('a', actual.fHCM2_Team_Member_c[0].Id);
    }

    @istest
    private static void testDeserialize() {
        zjcSageTest3 output = new zjcSageTest3();
        zjcSageTest3.fHCM2_Team_Member_c value1 = new zjcSageTest3.fHCM2_Team_Member_c();
        value1.Id = 'a';
        output.fHCM2_Team_Member_c.add(value1);

        string s = output.serialize();
        zjcSageTest3 actual = zjcSageTest3.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.fHCM2_Team_Member_c[0].Id);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjcSageTest3 actual = zjcSageTest3.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcSageTest3.zjcSageTest3Exception e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjcSageTest3 output = new zjcSageTest3();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjcSageTest3 output = new zjcSageTest3();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcSageTest3 output2 = new zjcSageTest3();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjcSageTest3 output = new zjcSageTest3();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('fHCM2_Team_Member_c'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('fHCM2_Team_Member_c', first.name);
    }

}