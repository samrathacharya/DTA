/* 
 * Generated by Overcast UTC 2021-11-24 05:35:32Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcTest2Test {
    @istest
    private static void testzjcTest2() {
        zjcTest2 actual = new zjcTest2();
        system.assertNotEquals(null, actual.V_EQUI);
    }

    @istest
    private static void testV_EQUI() {
        zjcTest2.V_EQUI actual = new zjcTest2.V_EQUI('a','a',Date.newInstance(2000,1,1),'a','a',Date.newInstance(2000,1,1),'a','a','a','a','a','a',0,'a',Date.newInstance(2000,1,1),0,'a','a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a',Date.newInstance(2000,1,1));

        actual.DATAB = Date.newInstance(2000,1,1);
        actual.HEQUI = 'a';
        actual.SPRAS = 'a';
        actual.EQKTX = 'a';
        actual.EQKTU = 'a';
        actual.DAUFN = 'a';
        actual.AUFNR = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.ADRNR = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.EQUNR);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals('a', actual.EQASP);
        system.assertEquals(Date.newInstance(2000,1,1), actual.AEDAT);
        system.assertEquals('a', actual.AENAM);
        system.assertEquals('a', actual.BEGRU);
        system.assertEquals('a', actual.EQTYP);
        system.assertEquals('a', actual.EQART);
        system.assertEquals('a', actual.LVORM);
        system.assertEquals('a', actual.INVNR);
        system.assertEquals(0, actual.BRGEW);
        system.assertEquals('a', actual.GEWEI);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ANSDT);
        system.assertEquals(0, actual.ANSWT);
        system.assertEquals('a', actual.WAERS);
        system.assertEquals('a', actual.ELIEF);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GWLEN);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GWLDT);
        system.assertEquals('a', actual.SERGE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GWLDV);
        system.assertEquals('a', actual.EQNUM);
        system.assertEquals('a', actual.OBJNR);
        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.SERNR);
        system.assertEquals('a', actual.WERK);
        system.assertEquals('a', actual.KUNDE);
        system.assertEquals('a', actual.WARPL);
        system.assertEquals('a', actual.IMRC_POINT);
        system.assertEquals('a', actual.REVLV);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DATBI);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DATAB);
        system.assertEquals('a', actual.HEQUI);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.EQKTX);
        system.assertEquals('a', actual.EQKTU);
        system.assertEquals('a', actual.DAUFN);
        system.assertEquals('a', actual.AUFNR);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.ADRNR);

        zjcTest2.V_EQUI actual0 = new zjcTest2.V_EQUI();
    }
    @istest
    private static void testrunQuery() {
        zjcTest2 request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjcTest2 response = request.runQuery(query1);
        system.assertEquals('a', response.V_EQUI[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjcTest2 testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcTest2');
        zjcTest2 request = new zjcTest2();
        zjcTest2.V_EQUI value1 = new zjcTest2.V_EQUI();
        value1.MANDT = 'a';
        request.V_EQUI.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjcTest2 input = new zjcTest2();
        zjcTest2.V_EQUI value1 = new zjcTest2.V_EQUI();
        value1.MANDT = 'a';
        input.V_EQUI.add(value1);
        zjcTest2 actual = (zjcTest2)JSON.deserialize(input.serialize(), zjcTest2.class);
        system.assertEquals('a', actual.V_EQUI[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        zjcTest2 output = new zjcTest2();
        zjcTest2.V_EQUI value1 = new zjcTest2.V_EQUI();
        value1.MANDT = 'a';
        output.V_EQUI.add(value1);

        string s = output.serialize();
        zjcTest2 actual = zjcTest2.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.V_EQUI[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjcTest2 actual = zjcTest2.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcTest2.zjcTest2Exception e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjcTest2 output = new zjcTest2();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjcTest2 output = new zjcTest2();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcTest2 output2 = new zjcTest2();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjcTest2 output = new zjcTest2();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('V_EQUI'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('V_EQUI', first.name);
    }

}