/* 
 * Generated by Overcast UTC 2022-01-11 07:10:23Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ProcessingPriceListsTest {
    @istest
    private static void testProcessingPriceLists() {
        ProcessingPriceLists actual = new ProcessingPriceLists();
        system.assertNotEquals(null, actual.BAPI_PIQ_SDPRICELIST);
        system.assertNotEquals(null, actual.ET_MESSAGE);
        system.assertNotEquals(null, actual.ET_OUTPUT_EXTENSION);
        system.assertNotEquals(null, actual.ET_PRICING_RESULT);
        system.assertNotEquals(null, actual.IS_CONTROL_DATA);
        system.assertNotEquals(null, actual.IS_OUTPUT_FORMAT);
        system.assertNotEquals(null, actual.IS_SELCRIT);
        system.assertNotEquals(null, actual.IT_OUTPUT_FIELDS);
    }

    @istest
    private static void testBAPI_PIQ_SDPRICELIST() {
        ProcessingPriceLists.BAPI_PIQ_SDPRICELIST actual = new ProcessingPriceLists.BAPI_PIQ_SDPRICELIST(0,'a','a');

        system.assertEquals(0, actual.EV_SUBRC);
        system.assertEquals('a', actual.IV_NO_INPUT_CHECK);
        system.assertEquals('a', actual.IV_ONLY_PRICING_RESULT);

        ProcessingPriceLists.BAPI_PIQ_SDPRICELIST actual0 = new ProcessingPriceLists.BAPI_PIQ_SDPRICELIST();
    }
    @istest
    private static void testET_MESSAGE() {
        ProcessingPriceLists.ET_MESSAGE actual = new ProcessingPriceLists.ET_MESSAGE('a','a','a','a','a','a','a','a','a','a','a',0,'a','a');

        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);

        ProcessingPriceLists.ET_MESSAGE actual0 = new ProcessingPriceLists.ET_MESSAGE();
    }
    @istest
    private static void testET_OUTPUT_EXTENSION() {
        ProcessingPriceLists.ET_OUTPUT_EXTENSION actual = new ProcessingPriceLists.ET_OUTPUT_EXTENSION('a','a','a','a','a');

        system.assertEquals('a', actual.STRUCTURE);
        system.assertEquals('a', actual.VALUEPART1);
        system.assertEquals('a', actual.VALUEPART2);
        system.assertEquals('a', actual.VALUEPART3);
        system.assertEquals('a', actual.VALUEPART4);

        ProcessingPriceLists.ET_OUTPUT_EXTENSION actual0 = new ProcessingPriceLists.ET_OUTPUT_EXTENSION();
    }
    @istest
    private static void testET_PRICING_RESULT() {
        ProcessingPriceLists.ET_PRICING_RESULT actual = new ProcessingPriceLists.ET_PRICING_RESULT('a','a','a','a');

        system.assertEquals('a', actual.VBELN);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.KALSM);
        system.assertEquals('a', actual.WAERK);

        ProcessingPriceLists.ET_PRICING_RESULT actual0 = new ProcessingPriceLists.ET_PRICING_RESULT();
    }
    @istest
    private static void testITEM() {
        ProcessingPriceLists.ITEM actual = new ProcessingPriceLists.ITEM('a','a','a','a','a','a',0,0,0,'a',0,0,0,0,0,0,0,0,0,0,0,0,'a');

        system.assertEquals('a', actual.KPOSN);
        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.PRSOK);
        system.assertEquals('a', actual.PSTYV);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.VRKME);
        system.assertEquals(0, actual.MGAME);
        system.assertEquals(0, actual.NETPR);
        system.assertEquals(0, actual.KPEIN);
        system.assertEquals('a', actual.KMEIN);
        system.assertEquals(0, actual.NETWR);
        system.assertEquals(0, actual.MWSBP);
        system.assertEquals(0, actual.KZWI1);
        system.assertEquals(0, actual.KZWI2);
        system.assertEquals(0, actual.KZWI3);
        system.assertEquals(0, actual.KZWI4);
        system.assertEquals(0, actual.KZWI5);
        system.assertEquals(0, actual.KZWI6);
        system.assertEquals(0, actual.BONBA);
        system.assertEquals(0, actual.PREVA);
        system.assertEquals(0, actual.CMPRE);
        system.assertEquals(0, actual.WAVWR);
        system.assertEquals('a', actual.SCALEDET_STATUS);

        ProcessingPriceLists.ITEM actual0 = new ProcessingPriceLists.ITEM();
    }
    @istest
    private static void testIS_CONTROL_DATA() {
        ProcessingPriceLists.IS_CONTROL_DATA actual = new ProcessingPriceLists.IS_CONTROL_DATA(Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a');

        system.assertEquals(Date.newInstance(2000,1,1), actual.PRSDT);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.DEL_NULL_PRICE);
        system.assertEquals('a', actual.DEL_ERROR_PRICE);
        system.assertEquals('a', actual.LANGUAGE);
        system.assertEquals('a', actual.GET_SCALE_LEVELS);
        system.assertEquals('a', actual.MAX_SCALE_LEVELS);
        system.assertEquals('a', actual.GET_PRC_DETAIL);
        system.assertEquals('a', actual.PRC_DETAIL_VAR);
        system.assertEquals('a', actual.LANGUAGE_FROM_CUSTOMER);
        system.assertEquals('a', actual.SHOW_LOG);
        system.assertEquals('a', actual.KALSM_VARIANT);
        system.assertEquals('a', actual.MINQTY);
        system.assertEquals('a', actual.PACKSIZE);
        system.assertEquals('a', actual.PRC_SIMULATION);

        ProcessingPriceLists.IS_CONTROL_DATA actual0 = new ProcessingPriceLists.IS_CONTROL_DATA();
    }
    @istest
    private static void testKOMK_NAME_VALUE() {
        ProcessingPriceLists.KOMK_NAME_VALUE actual = new ProcessingPriceLists.KOMK_NAME_VALUE('a','a');

        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.VALUE);

        ProcessingPriceLists.KOMK_NAME_VALUE actual0 = new ProcessingPriceLists.KOMK_NAME_VALUE();
    }
    @istest
    private static void testKOMP_NAME_VALUE() {
        ProcessingPriceLists.KOMP_NAME_VALUE actual = new ProcessingPriceLists.KOMP_NAME_VALUE('a','a');

        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.VALUE);

        ProcessingPriceLists.KOMP_NAME_VALUE actual0 = new ProcessingPriceLists.KOMP_NAME_VALUE();
    }
    @istest
    private static void testIS_OUTPUT_FORMAT() {
        ProcessingPriceLists.IS_OUTPUT_FORMAT actual = new ProcessingPriceLists.IS_OUTPUT_FORMAT('a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.DISP_LIST);
        system.assertEquals('a', actual.FILE_FORMAT);
        system.assertEquals('a', actual.MAIL_TO_CUSTOMERS);
        system.assertEquals('a', actual.FTP_UPLOAD);
        system.assertEquals('a', actual.FILE_PREFIX);
        system.assertEquals('a', actual.FILE_LABEL);
        system.assertEquals('a', actual.EMAIL_BODY_TDNAME);
        system.assertEquals('a', actual.EMAIL_SUBJECT_TDNAME);

        ProcessingPriceLists.IS_OUTPUT_FORMAT actual0 = new ProcessingPriceLists.IS_OUTPUT_FORMAT();
    }
    @istest
    private static void testMAIL_ADDR() {
        ProcessingPriceLists.MAIL_ADDR actual = new ProcessingPriceLists.MAIL_ADDR('a');

        system.assertEquals('a', actual.ITEM);

        ProcessingPriceLists.MAIL_ADDR actual0 = new ProcessingPriceLists.MAIL_ADDR();
    }
    @istest
    private static void testCUSTOMER_MAILADDR() {
        ProcessingPriceLists.CUSTOMER_MAILADDR actual = new ProcessingPriceLists.CUSTOMER_MAILADDR('a');

        system.assertEquals('a', actual.KUNNR);

        ProcessingPriceLists.CUSTOMER_MAILADDR actual0 = new ProcessingPriceLists.CUSTOMER_MAILADDR();
    }
    @istest
    private static void testEMAIL() {
        ProcessingPriceLists.EMAIL actual = new ProcessingPriceLists.EMAIL('a');

        system.assertEquals('a', actual.ITEM);

        ProcessingPriceLists.EMAIL actual0 = new ProcessingPriceLists.EMAIL();
    }
    @istest
    private static void testIS_SELCRIT() {
        ProcessingPriceLists.IS_SELCRIT actual = new ProcessingPriceLists.IS_SELCRIT('a','a','a');

        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);

        ProcessingPriceLists.IS_SELCRIT actual0 = new ProcessingPriceLists.IS_SELCRIT();
    }
    @istest
    private static void testKUNNR() {
        ProcessingPriceLists.KUNNR actual = new ProcessingPriceLists.KUNNR('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        ProcessingPriceLists.KUNNR actual0 = new ProcessingPriceLists.KUNNR();
    }
    @istest
    private static void testMATNR() {
        ProcessingPriceLists.MATNR actual = new ProcessingPriceLists.MATNR('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        ProcessingPriceLists.MATNR actual0 = new ProcessingPriceLists.MATNR();
    }
    @istest
    private static void testPRODH() {
        ProcessingPriceLists.PRODH actual = new ProcessingPriceLists.PRODH('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        ProcessingPriceLists.PRODH actual0 = new ProcessingPriceLists.PRODH();
    }
    @istest
    private static void testKONDM() {
        ProcessingPriceLists.KONDM actual = new ProcessingPriceLists.KONDM('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        ProcessingPriceLists.KONDM actual0 = new ProcessingPriceLists.KONDM();
    }
    @istest
    private static void testKUNNR_TAB() {
        ProcessingPriceLists.KUNNR_TAB actual = new ProcessingPriceLists.KUNNR_TAB('a');

        system.assertEquals('a', actual.ITEM);

        ProcessingPriceLists.KUNNR_TAB actual0 = new ProcessingPriceLists.KUNNR_TAB();
    }
    @istest
    private static void testMATNR_TAB() {
        ProcessingPriceLists.MATNR_TAB actual = new ProcessingPriceLists.MATNR_TAB('a');

        system.assertEquals('a', actual.ITEM);

        ProcessingPriceLists.MATNR_TAB actual0 = new ProcessingPriceLists.MATNR_TAB();
    }
    @istest
    private static void testADDITIONAL_SELCRIT() {
        ProcessingPriceLists.ADDITIONAL_SELCRIT actual = new ProcessingPriceLists.ADDITIONAL_SELCRIT('a','a');

        system.assertEquals('a', actual.TABLE);
        system.assertEquals('a', actual.FIELD);

        ProcessingPriceLists.ADDITIONAL_SELCRIT actual0 = new ProcessingPriceLists.ADDITIONAL_SELCRIT();
    }
    @istest
    private static void testRGTAB() {
        ProcessingPriceLists.RGTAB actual = new ProcessingPriceLists.RGTAB('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        ProcessingPriceLists.RGTAB actual0 = new ProcessingPriceLists.RGTAB();
    }
    @istest
    private static void testIT_OUTPUT_FIELDS() {
        ProcessingPriceLists.IT_OUTPUT_FIELDS actual = new ProcessingPriceLists.IT_OUTPUT_FIELDS('a');

        system.assertEquals('a', actual.ITEM);

        ProcessingPriceLists.IT_OUTPUT_FIELDS actual0 = new ProcessingPriceLists.IT_OUTPUT_FIELDS();
    }

    @istest
    private static void testRun() {
        ProcessingPriceLists request = testSetup();
        ProcessingPriceLists response = request.run();
        system.assertEquals(0, response.BAPI_PIQ_SDPRICELIST.EV_SUBRC);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static ProcessingPriceLists testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ProcessingPriceLists');
        ProcessingPriceLists request = new ProcessingPriceLists();
        request.BAPI_PIQ_SDPRICELIST.EV_SUBRC = 0;

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ProcessingPriceLists input = new ProcessingPriceLists();
        input.BAPI_PIQ_SDPRICELIST.EV_SUBRC = 0;
        ProcessingPriceLists actual = (ProcessingPriceLists)JSON.deserialize(input.serialize(), ProcessingPriceLists.class);
        system.assertEquals(0, actual.BAPI_PIQ_SDPRICELIST.EV_SUBRC);
    }

    @istest
    private static void testDeserialize() {
        ProcessingPriceLists output = new ProcessingPriceLists();
        output.BAPI_PIQ_SDPRICELIST.EV_SUBRC = 0;

        string s = output.serialize();
        ProcessingPriceLists actual = ProcessingPriceLists.deserialize('{"output":' + s + '}');
        system.assertEquals(0, actual.BAPI_PIQ_SDPRICELIST.EV_SUBRC);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ProcessingPriceLists actual = ProcessingPriceLists.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (ProcessingPriceLists.ProcessingPriceListsException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        ProcessingPriceLists output = new ProcessingPriceLists();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ProcessingPriceLists output = new ProcessingPriceLists();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ProcessingPriceLists output2 = new ProcessingPriceLists();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ProcessingPriceLists output = new ProcessingPriceLists();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_PIQ_SDPRICELIST'));
        system.assert(keys.contains('ET_MESSAGE'));
        system.assert(keys.contains('ET_OUTPUT_EXTENSION'));
        system.assert(keys.contains('ET_PRICING_RESULT'));
        system.assert(keys.contains('ET_PRICING_RESULT.ITEM'));
        system.assert(keys.contains('IS_CONTROL_DATA'));
        system.assert(keys.contains('IS_CONTROL_DATA.KOMK_NAME_VALUE'));
        system.assert(keys.contains('IS_CONTROL_DATA.KOMP_NAME_VALUE'));
        system.assert(keys.contains('IS_OUTPUT_FORMAT'));
        system.assert(keys.contains('IS_OUTPUT_FORMAT.MAIL_ADDR'));
        system.assert(keys.contains('IS_OUTPUT_FORMAT.CUSTOMER_MAILADDR'));
        system.assert(keys.contains('IS_OUTPUT_FORMAT.CUSTOMER_MAILADDR.EMAIL'));
        system.assert(keys.contains('IS_SELCRIT'));
        system.assert(keys.contains('IS_SELCRIT.KUNNR'));
        system.assert(keys.contains('IS_SELCRIT.MATNR'));
        system.assert(keys.contains('IS_SELCRIT.PRODH'));
        system.assert(keys.contains('IS_SELCRIT.KONDM'));
        system.assert(keys.contains('IS_SELCRIT.KUNNR_TAB'));
        system.assert(keys.contains('IS_SELCRIT.MATNR_TAB'));
        system.assert(keys.contains('IS_SELCRIT.ADDITIONAL_SELCRIT'));
        system.assert(keys.contains('IS_SELCRIT.ADDITIONAL_SELCRIT.RGTAB'));
        system.assert(keys.contains('IT_OUTPUT_FIELDS'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_PIQ_SDPRICELIST', first.name);
        output.set('@prop1', 'a');
        output.set('@prop2.prop2-1', 'b');
        output.set('@prop2.prop2-2', 'c');
        system.assertEquals('a', output.get('@prop1'));
        system.assertEquals('b', output.get('@prop2.prop2-1'));
        system.assertEquals('c', output.get('@prop2.prop2-2'));
        system.assertEquals(null, output.get(null));
        system.assertEquals(null, output.get('@prop2.prop2-3'));
        system.assertEquals(null, output.get('@prop3'));
    }

}