/* 
 * Generated by Overcast UTC 2022-03-17 03:56:43Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class S4EquipmentTest {
    @istest
    private static void testS4Equipment() {
        S4Equipment actual = new S4Equipment();
        system.assertNotEquals(null, actual.Equipment);
        system.assertNotEquals(null, actual.EquipmentClass);
        system.assertNotEquals(null, actual.EquipmentClassCharacteristic);
        system.assertNotEquals(null, actual.EquipClassCharacteristicValue);
        system.assertNotEquals(null, actual.EquipmentLongText);
        system.assertNotEquals(null, actual.EquipmentPartner);
        system.assertNotEquals(null, actual.EquipmentWarranty);
    }

    @istest
    private static void testEquipment() {
        S4EquipmentEquipment actual = new S4EquipmentEquipment();

        actual.Equipment = 'a';
        actual.ValidityEndDate = Datetime.newInstance(2000,1,1);
        actual.ValidityEndTime = Time.newInstance(1,0,0,0);
        actual.ValidityStartDate = Datetime.newInstance(2000,1,1);
        actual.EquipmentName = 'a';
        actual.EquipmentCategory = 'a';
        actual.TechnicalObjectType = 'a';
        actual.AuthorizationGroup = 'a';
        actual.GrossWeight = 0;
        actual.GrossWeightUnit = 'a';
        actual.SizeOrDimensionText = 'a';
        actual.InventoryNumber = 'a';
        actual.OperationStartDate = Datetime.newInstance(2000,1,1);
        actual.AcquisitionValue = 0;
        actual.Currency_x = 'a';
        actual.AcquisitionDate = Datetime.newInstance(2000,1,1);
        actual.AssetManufacturerName = 'a';
        actual.ManufacturerPartTypeName = 'a';
        actual.ManufacturerCountry = 'a';
        actual.ConstructionYear = 'a';
        actual.ConstructionMonth = 'a';
        actual.ManufacturerPartNmbr = 'a';
        actual.ManufacturerSerialNumber = 'a';
        actual.MaintenancePlant = 'a';
        actual.AssetLocation = 'a';
        actual.AssetRoom = 'a';
        actual.PlantSection = 'a';
        actual.WorkCenter = 'a';
        actual.WorkCenterInternalID = 'a';
        actual.WorkCenterPlant = 'a';
        actual.ABCIndicator = 'a';
        actual.MaintObjectFreeDefinedAttrib = 'a';
        actual.BusinessPartnerName1 = 'a';
        actual.CityName = 'a';
        actual.HouseNumber = 'a';
        actual.PostalCode = 'a';
        actual.StreetName = 'a';
        actual.Region = 'a';
        actual.Country = 'a';
        actual.PhoneNumber = 'a';
        actual.FaxNumber = 'a';
        actual.CompanyCode = 'a';
        actual.BusinessArea = 'a';
        actual.MasterFixedAsset = 'a';
        actual.FixedAsset = 'a';
        actual.CostCenter = 'a';
        actual.ControllingArea = 'a';
        actual.WBSElementExternalID = 'a';
        actual.SettlementOrder = 'a';
        actual.MaintenancePlanningPlant = 'a';
        actual.MaintenancePlannerGroup = 'a';
        actual.MainWorkCenter = 'a';
        actual.MainWorkCenterInternalID = 'a';
        actual.MainWorkCenterPlant = 'a';
        actual.CatalogProfile = 'a';
        actual.FunctionalLocation = 'a';
        actual.FunctionalLocationLabelName = 'a';
        actual.FunctionalLocationName = 'a';
        actual.EquipInstallationPositionNmbr = 'a';
        actual.SuperordinateEquipment = 'a';
        actual.TechnicalObjectSortCode = 'a';
        actual.ConstructionMaterial = 'a';
        actual.Material = 'a';
        actual.SerialNumber = 'a';
        actual.UniqueItemIdentifier = 'a';
        actual.SalesOrganization = 'a';
        actual.DistributionChannel = 'a';
        actual.OrganizationDivision = 'a';
        actual.SalesGroup = 'a';
        actual.SalesOffice = 'a';
        actual.CreationDate = Datetime.newInstance(2000,1,1);
        actual.CreatedByUser = 'a';
        actual.LastChangedByUser = 'a';
        actual.LastChangeDateTime = Datetime.newInstance(2000,1,1);
        actual.NextEquipUsagePeriodSqncNmbr = 'a';
        actual.MaintObjectLocAcctAssgmtNmbr = 'a';
        actual.MaintObjectInternalID = 'a';
        actual.EquipUsagePeriodSequenceNumber = 'a';
        actual.EquipmentIsAtCustomer = true;
        actual.EquipmentIsAvailable = true;
        actual.EquipmentIsInWarehouse = true;
        actual.EquipmentIsAssignedToDelivery = true;
        actual.EquipmentIsMarkedForDeletion = true;
        actual.EquipmentIsInstalled = true;
        actual.EquipIsAllocToSuperiorEquip = true;
        actual.EquipmentIsInactive = true;
        actual.EquipHasSubOrdinateEquipment = 'a';
        actual.to_Classification = 'a';
        actual.to_LongText = 'a';
        actual.to_Partner = 'a';
        actual.to_Warranty = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.ValidityEndTime);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityStartDate);
        system.assertEquals('a', actual.EquipmentName);
        system.assertEquals('a', actual.EquipmentCategory);
        system.assertEquals('a', actual.TechnicalObjectType);
        system.assertEquals('a', actual.AuthorizationGroup);
        system.assertEquals(0, actual.GrossWeight);
        system.assertEquals('a', actual.GrossWeightUnit);
        system.assertEquals('a', actual.SizeOrDimensionText);
        system.assertEquals('a', actual.InventoryNumber);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.OperationStartDate);
        system.assertEquals(0, actual.AcquisitionValue);
        system.assertEquals('a', actual.Currency_x);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.AcquisitionDate);
        system.assertEquals('a', actual.AssetManufacturerName);
        system.assertEquals('a', actual.ManufacturerPartTypeName);
        system.assertEquals('a', actual.ManufacturerCountry);
        system.assertEquals('a', actual.ConstructionYear);
        system.assertEquals('a', actual.ConstructionMonth);
        system.assertEquals('a', actual.ManufacturerPartNmbr);
        system.assertEquals('a', actual.ManufacturerSerialNumber);
        system.assertEquals('a', actual.MaintenancePlant);
        system.assertEquals('a', actual.AssetLocation);
        system.assertEquals('a', actual.AssetRoom);
        system.assertEquals('a', actual.PlantSection);
        system.assertEquals('a', actual.WorkCenter);
        system.assertEquals('a', actual.WorkCenterInternalID);
        system.assertEquals('a', actual.WorkCenterPlant);
        system.assertEquals('a', actual.ABCIndicator);
        system.assertEquals('a', actual.MaintObjectFreeDefinedAttrib);
        system.assertEquals('a', actual.BusinessPartnerName1);
        system.assertEquals('a', actual.CityName);
        system.assertEquals('a', actual.HouseNumber);
        system.assertEquals('a', actual.PostalCode);
        system.assertEquals('a', actual.StreetName);
        system.assertEquals('a', actual.Region);
        system.assertEquals('a', actual.Country);
        system.assertEquals('a', actual.PhoneNumber);
        system.assertEquals('a', actual.FaxNumber);
        system.assertEquals('a', actual.CompanyCode);
        system.assertEquals('a', actual.BusinessArea);
        system.assertEquals('a', actual.MasterFixedAsset);
        system.assertEquals('a', actual.FixedAsset);
        system.assertEquals('a', actual.CostCenter);
        system.assertEquals('a', actual.ControllingArea);
        system.assertEquals('a', actual.WBSElementExternalID);
        system.assertEquals('a', actual.SettlementOrder);
        system.assertEquals('a', actual.MaintenancePlanningPlant);
        system.assertEquals('a', actual.MaintenancePlannerGroup);
        system.assertEquals('a', actual.MainWorkCenter);
        system.assertEquals('a', actual.MainWorkCenterInternalID);
        system.assertEquals('a', actual.MainWorkCenterPlant);
        system.assertEquals('a', actual.CatalogProfile);
        system.assertEquals('a', actual.FunctionalLocation);
        system.assertEquals('a', actual.FunctionalLocationLabelName);
        system.assertEquals('a', actual.FunctionalLocationName);
        system.assertEquals('a', actual.EquipInstallationPositionNmbr);
        system.assertEquals('a', actual.SuperordinateEquipment);
        system.assertEquals('a', actual.TechnicalObjectSortCode);
        system.assertEquals('a', actual.ConstructionMaterial);
        system.assertEquals('a', actual.Material);
        system.assertEquals('a', actual.SerialNumber);
        system.assertEquals('a', actual.UniqueItemIdentifier);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.OrganizationDivision);
        system.assertEquals('a', actual.SalesGroup);
        system.assertEquals('a', actual.SalesOffice);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals('a', actual.LastChangedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastChangeDateTime);
        system.assertEquals('a', actual.NextEquipUsagePeriodSqncNmbr);
        system.assertEquals('a', actual.MaintObjectLocAcctAssgmtNmbr);
        system.assertEquals('a', actual.MaintObjectInternalID);
        system.assertEquals('a', actual.EquipUsagePeriodSequenceNumber);
        system.assertEquals(true, actual.EquipmentIsAtCustomer);
        system.assertEquals(true, actual.EquipmentIsAvailable);
        system.assertEquals(true, actual.EquipmentIsInWarehouse);
        system.assertEquals(true, actual.EquipmentIsAssignedToDelivery);
        system.assertEquals(true, actual.EquipmentIsMarkedForDeletion);
        system.assertEquals(true, actual.EquipmentIsInstalled);
        system.assertEquals(true, actual.EquipIsAllocToSuperiorEquip);
        system.assertEquals(true, actual.EquipmentIsInactive);
        system.assertEquals('a', actual.EquipHasSubOrdinateEquipment);
        system.assertEquals('a', actual.to_Classification);
        system.assertEquals('a', actual.to_LongText);
        system.assertEquals('a', actual.to_Partner);
        system.assertEquals('a', actual.to_Warranty);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testEquipmentClass() {
        S4EquipmentEquipmentClass actual = new S4EquipmentEquipmentClass();

        actual.Equipment = 'a';
        actual.ClassInternalID = 'a';
        actual.ClassType = 'a';
        actual.KeyDate = Datetime.newInstance(2000,1,1);
        actual.ChangeNumber = 'a';
        actual.ClfnStatus = 'a';
        actual.ClassPositionNumber = 0;
        actual.ClassIsStandardClass = 'a';
        actual.ClfnObjectInternalID = 'a';
        actual.ValidityEndDate = Datetime.newInstance(2000,1,1);
        actual.to_Characteristic = 'a';
        actual.to_Equipment = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals('a', actual.ClassInternalID);
        system.assertEquals('a', actual.ClassType);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.KeyDate);
        system.assertEquals('a', actual.ChangeNumber);
        system.assertEquals('a', actual.ClfnStatus);
        system.assertEquals(0, actual.ClassPositionNumber);
        system.assertEquals('a', actual.ClassIsStandardClass);
        system.assertEquals('a', actual.ClfnObjectInternalID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.ValidityEndDate);
        system.assertEquals('a', actual.to_Characteristic);
        system.assertEquals('a', actual.to_Equipment);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testEquipmentClassCharacteristic() {
        S4EquipmentEquipmentClassCharacteristic actual = new S4EquipmentEquipmentClassCharacteristic();

        actual.Equipment = 'a';
        actual.ClassInternalID = 'a';
        actual.CharacteristicInternalID = 'a';
        actual.Characteristic = 'a';
        actual.CharcDataType = 'a';
        actual.KeyDate = Datetime.newInstance(2000,1,1);
        actual.ChangeNumber = 'a';
        actual.ClassType = 'a';
        actual.to_EquipmentClass = 'a';
        actual.to_Value = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals('a', actual.ClassInternalID);
        system.assertEquals('a', actual.CharacteristicInternalID);
        system.assertEquals('a', actual.Characteristic);
        system.assertEquals('a', actual.CharcDataType);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.KeyDate);
        system.assertEquals('a', actual.ChangeNumber);
        system.assertEquals('a', actual.ClassType);
        system.assertEquals('a', actual.to_EquipmentClass);
        system.assertEquals('a', actual.to_Value);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testEquipClassCharacteristicValue() {
        S4EquipmentEquipClassCharacteristicValue actual = new S4EquipmentEquipClassCharacteristicValue();

        actual.Equipment = 'a';
        actual.ClassType = 'a';
        actual.CharcValuePositionNumber = 'a';
        actual.CharacteristicInternalID = 'a';
        actual.Characteristic = 'a';
        actual.CharcDataType = 'a';
        actual.ClassInternalID = 'a';
        actual.KeyDate = Datetime.newInstance(2000,1,1);
        actual.ChangeNumber = 'a';
        actual.CharcValueDependency = 'a';
        actual.CharcValue = 'a';
        actual.CharcFromNumericValue = 0;
        actual.CharcFromNumericValueUnit = 'a';
        actual.CharcToNumericValue = 0;
        actual.CharcToNumericValueUnit = 'a';
        actual.CharcFromDecimalValue = 0;
        actual.CharcToDecimalValue = 0;
        actual.CharcFromAmount = 0;
        actual.CharcToAmount = 0;
        actual.Currency_x = 'a';
        actual.CharcFromDate = Datetime.newInstance(2000,1,1);
        actual.CharcToDate = Datetime.newInstance(2000,1,1);
        actual.CharcFromTime = Time.newInstance(1,0,0,0);
        actual.CharcToTime = Time.newInstance(1,0,0,0);
        actual.to_Characteristic = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals('a', actual.ClassType);
        system.assertEquals('a', actual.CharcValuePositionNumber);
        system.assertEquals('a', actual.CharacteristicInternalID);
        system.assertEquals('a', actual.Characteristic);
        system.assertEquals('a', actual.CharcDataType);
        system.assertEquals('a', actual.ClassInternalID);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.KeyDate);
        system.assertEquals('a', actual.ChangeNumber);
        system.assertEquals('a', actual.CharcValueDependency);
        system.assertEquals('a', actual.CharcValue);
        system.assertEquals(0, actual.CharcFromNumericValue);
        system.assertEquals('a', actual.CharcFromNumericValueUnit);
        system.assertEquals(0, actual.CharcToNumericValue);
        system.assertEquals('a', actual.CharcToNumericValueUnit);
        system.assertEquals(0, actual.CharcFromDecimalValue);
        system.assertEquals(0, actual.CharcToDecimalValue);
        system.assertEquals(0, actual.CharcFromAmount);
        system.assertEquals(0, actual.CharcToAmount);
        system.assertEquals('a', actual.Currency_x);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CharcFromDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CharcToDate);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.CharcFromTime);
        system.assertEquals(Time.newInstance(1,0,0,0), actual.CharcToTime);
        system.assertEquals('a', actual.to_Characteristic);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testEquipmentLongText() {
        S4EquipmentEquipmentLongText actual = new S4EquipmentEquipmentLongText();

        actual.Equipment = 'a';
        actual.TextObjectKey = 'a';
        actual.Language = 'a';
        actual.EquipmentLongText = 'a';
        actual.to_Equipment = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals('a', actual.TextObjectKey);
        system.assertEquals('a', actual.Language);
        system.assertEquals('a', actual.EquipmentLongText);
        system.assertEquals('a', actual.to_Equipment);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testEquipmentPartner() {
        S4EquipmentEquipmentPartner actual = new S4EquipmentEquipmentPartner();

        actual.Equipment = 'a';
        actual.PartnerFunction = 'a';
        actual.EquipmentPartnerObjectNmbr = 'a';
        actual.Partner = 'a';
        actual.CreatedByUser = 'a';
        actual.CreationDate = Datetime.newInstance(2000,1,1);
        actual.to_Equipment = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals('a', actual.PartnerFunction);
        system.assertEquals('a', actual.EquipmentPartnerObjectNmbr);
        system.assertEquals('a', actual.Partner);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.to_Equipment);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testEquipmentWarranty() {
        S4EquipmentEquipmentWarranty actual = new S4EquipmentEquipmentWarranty();

        actual.Equipment = 'a';
        actual.WarrantyType = 'a';
        actual.MasterWarranty = 'a';
        actual.WarrantyStartDate = Datetime.newInstance(2000,1,1);
        actual.WarrantyEndDate = Datetime.newInstance(2000,1,1);
        actual.WrntyIsInhtdFromSuperiorObject = 'a';
        actual.WrntyIsPassedOnToChildObject = 'a';
        actual.to_Equipment = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.Equipment);
        system.assertEquals('a', actual.WarrantyType);
        system.assertEquals('a', actual.MasterWarranty);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.WarrantyStartDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.WarrantyEndDate);
        system.assertEquals('a', actual.WrntyIsInhtdFromSuperiorObject);
        system.assertEquals('a', actual.WrntyIsPassedOnToChildObject);
        system.assertEquals('a', actual.to_Equipment);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testrunQuery() {
        S4Equipment request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        S4Equipment response = request.runQuery(query1);
        system.assertEquals('a', response.Equipment[0].Equipment);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        S4Equipment request = testSetup();
        S4Equipment response = request.runInsert();
        system.assertEquals('a', response.Equipment[0].Equipment);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        S4Equipment request = testSetup();
        S4Equipment response = request.runUpdate();
        system.assertEquals('a', response.Equipment[0].Equipment);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        S4Equipment request = testSetup();
        S4Equipment response = request.runDelete();
        system.assertEquals('a', response.Equipment[0].Equipment);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static S4Equipment testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('S4Equipment');
        S4Equipment request = new S4Equipment();
        S4EquipmentEquipment value1 = new S4EquipmentEquipment();
        value1.Equipment = 'a';
        request.Equipment.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        S4Equipment input = new S4Equipment();
        S4EquipmentEquipment value1 = new S4EquipmentEquipment();
        value1.Equipment = 'a';
        input.Equipment.add(value1);
        S4Equipment actual = (S4Equipment)JSON.deserialize(input.serialize(), S4Equipment.class);
        system.assertEquals('a', actual.Equipment[0].Equipment);
    }

    @istest
    private static void testDeserialize() {
        S4Equipment output = new S4Equipment();
        S4EquipmentEquipment value1 = new S4EquipmentEquipment();
        value1.Equipment = 'a';
        output.Equipment.add(value1);

        string s = output.serialize();
        S4Equipment actual = S4Equipment.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.Equipment[0].Equipment);
    }

    @istest
    private static void testDeserializeError() {
        try {
            S4Equipment actual = S4Equipment.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (S4Equipment.S4EquipmentException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        S4Equipment output = new S4Equipment();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        S4Equipment output = new S4Equipment();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        S4Equipment output2 = new S4Equipment();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        S4Equipment output = new S4Equipment();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('Equipment'));
        system.assert(keys.contains('EquipmentClass'));
        system.assert(keys.contains('EquipmentClassCharacteristic'));
        system.assert(keys.contains('EquipClassCharacteristicValue'));
        system.assert(keys.contains('EquipmentLongText'));
        system.assert(keys.contains('EquipmentPartner'));
        system.assert(keys.contains('EquipmentWarranty'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('Equipment', first.name);
    }

    @istest
    private static void testException() {
        S4Equipment.S4EquipmentException e = new S4Equipment.S4EquipmentException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {       
        try {
            S4Equipment.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (S4Equipment.S4EquipmentException e) {
            System.assert(true);
        }
        
		try {
            S4Equipment output = new S4Equipment();
        	output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (S4Equipment.S4EquipmentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
		try {
        	S4Equipment output = new S4Equipment();
        	output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (S4Equipment.S4EquipmentException e) {
            System.assert(true);
        }
        
        overcast.Globals.IsOCF = true;
        
        try {
            S4Equipment.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (S4Equipment.S4EquipmentException e) {
            System.assert(true);
        }
        
		try {
            S4Equipment.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (S4Equipment.S4EquipmentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
        }
    }

    @istest
    private static void testGetBackendMessage() {
        S4Equipment output = new S4Equipment();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('S4Equipment');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        S4Equipment.Parameters params = new S4Equipment.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.requestData = new S4Equipment();
        params.operation = 'Query';
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new S4Equipment()) + '}';
        List<S4Equipment.Parameters> paramList = new List<S4Equipment.Parameters>{ params };

        Test.startTest();
        List<S4Equipment.Result> results = S4Equipment.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}