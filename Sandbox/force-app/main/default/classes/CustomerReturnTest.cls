/* 
 * Generated by Overcast UTC 2022-03-07 03:42:38Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class CustomerReturnTest {
    @istest
    private static void testCustomerReturn() {
        CustomerReturn actual = new CustomerReturn();
        system.assertNotEquals(null, actual.A_CustomerReturn);
        system.assertNotEquals(null, actual.A_CustomerReturnItem);
    }

    @istest
    private static void testA_CustomerReturn() {
        CustomerReturnA_CustomerReturn actual = new CustomerReturnA_CustomerReturn();

        actual.CustomerReturn = 'a';
        actual.CustomerReturnType = 'a';
        actual.SalesOrganization = 'a';
        actual.DistributionChannel = 'a';
        actual.OrganizationDivision = 'a';
        actual.SalesGroup = 'a';
        actual.SalesOffice = 'a';
        actual.SalesDistrict = 'a';
        actual.SoldToParty = 'a';
        actual.CreationDate = Datetime.newInstance(2000,1,1);
        actual.CreatedByUser = 'a';
        actual.LastChangeDate = Datetime.newInstance(2000,1,1);
        actual.SenderBusinessSystemName = 'a';
        actual.LastChangeDateTime = Datetime.newInstance(2000,1,1);
        actual.PurchaseOrderByCustomer = 'a';
        actual.CustomerPurchaseOrderType = 'a';
        actual.CustomerPurchaseOrderDate = Datetime.newInstance(2000,1,1);
        actual.CustomerReturnDate = Datetime.newInstance(2000,1,1);
        actual.TotalNetAmount = 0;
        actual.TransactionCurrency = 'a';
        actual.SDDocumentReason = 'a';
        actual.PricingDate = Datetime.newInstance(2000,1,1);
        actual.RequestedDeliveryDate = Datetime.newInstance(2000,1,1);
        actual.ShippingType = 'a';
        actual.HeaderBillingBlockReason = 'a';
        actual.DeliveryBlockReason = 'a';
        actual.IncotermsClassification = 'a';
        actual.IncotermsTransferLocation = 'a';
        actual.IncotermsLocation1 = 'a';
        actual.IncotermsLocation2 = 'a';
        actual.IncotermsVersion = 'a';
        actual.CustomerPaymentTerms = 'a';
        actual.PaymentMethod = 'a';
        actual.RetsMgmtProcess = 'a';
        actual.ReferenceSDDocument = 'a';
        actual.ReferenceSDDocumentCategory = 'a';
        actual.CustomerReturnApprovalReason = 'a';
        actual.SalesDocApprovalStatus = 'a';
        actual.RetsMgmtLogProcgStatus = 'a';
        actual.RetsMgmtCompnProcgStatus = 'a';
        actual.RetsMgmtProcessingStatus = 'a';
        actual.OverallSDProcessStatus = 'a';
        actual.TotalCreditCheckStatus = 'a';
        actual.OverallSDDocumentRejectionSts = 'a';
        actual.to_Item = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.CustomerReturn);
        system.assertEquals('a', actual.CustomerReturnType);
        system.assertEquals('a', actual.SalesOrganization);
        system.assertEquals('a', actual.DistributionChannel);
        system.assertEquals('a', actual.OrganizationDivision);
        system.assertEquals('a', actual.SalesGroup);
        system.assertEquals('a', actual.SalesOffice);
        system.assertEquals('a', actual.SalesDistrict);
        system.assertEquals('a', actual.SoldToParty);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CreationDate);
        system.assertEquals('a', actual.CreatedByUser);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastChangeDate);
        system.assertEquals('a', actual.SenderBusinessSystemName);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.LastChangeDateTime);
        system.assertEquals('a', actual.PurchaseOrderByCustomer);
        system.assertEquals('a', actual.CustomerPurchaseOrderType);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustomerPurchaseOrderDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.CustomerReturnDate);
        system.assertEquals(0, actual.TotalNetAmount);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals('a', actual.SDDocumentReason);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.PricingDate);
        system.assertEquals(Datetime.newInstance(2000,1,1), actual.RequestedDeliveryDate);
        system.assertEquals('a', actual.ShippingType);
        system.assertEquals('a', actual.HeaderBillingBlockReason);
        system.assertEquals('a', actual.DeliveryBlockReason);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals('a', actual.IncotermsVersion);
        system.assertEquals('a', actual.CustomerPaymentTerms);
        system.assertEquals('a', actual.PaymentMethod);
        system.assertEquals('a', actual.RetsMgmtProcess);
        system.assertEquals('a', actual.ReferenceSDDocument);
        system.assertEquals('a', actual.ReferenceSDDocumentCategory);
        system.assertEquals('a', actual.CustomerReturnApprovalReason);
        system.assertEquals('a', actual.SalesDocApprovalStatus);
        system.assertEquals('a', actual.RetsMgmtLogProcgStatus);
        system.assertEquals('a', actual.RetsMgmtCompnProcgStatus);
        system.assertEquals('a', actual.RetsMgmtProcessingStatus);
        system.assertEquals('a', actual.OverallSDProcessStatus);
        system.assertEquals('a', actual.TotalCreditCheckStatus);
        system.assertEquals('a', actual.OverallSDDocumentRejectionSts);
        system.assertEquals('a', actual.to_Item);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testA_CustomerReturnItem() {
        CustomerReturnA_CustomerReturnItem actual = new CustomerReturnA_CustomerReturnItem();

        actual.CustomerReturn = 'a';
        actual.CustomerReturnItem = 'a';
        actual.HigherLevelItem = 'a';
        actual.CustomerReturnItemCategory = 'a';
        actual.CustomerReturnItemText = 'a';
        actual.PurchaseOrderByCustomer = 'a';
        actual.Material = 'a';
        actual.MaterialByCustomer = 'a';
        actual.RequestedQuantity = 0;
        actual.RequestedQuantityUnit = 'a';
        actual.ItemGrossWeight = 0;
        actual.ItemNetWeight = 0;
        actual.ItemWeightUnit = 'a';
        actual.ItemVolume = 0;
        actual.ItemVolumeUnit = 'a';
        actual.TransactionCurrency = 'a';
        actual.NetAmount = 0;
        actual.MaterialGroup = 'a';
        actual.Batch = 'a';
        actual.ProductionPlant = 'a';
        actual.StorageLocation = 'a';
        actual.ShippingPoint = 'a';
        actual.ShippingType = 'a';
        actual.DeliveryPriority = 'a';
        actual.IncotermsClassification = 'a';
        actual.IncotermsTransferLocation = 'a';
        actual.IncotermsLocation1 = 'a';
        actual.IncotermsLocation2 = 'a';
        actual.CustomerPaymentTerms = 'a';
        actual.SalesDocumentRjcnReason = 'a';
        actual.ItemBillingBlockReason = 'a';
        actual.RetsMgmtProcess = 'a';
        actual.RetsMgmtProcessItem = 'a';
        actual.ReturnReason = 'a';
        actual.RetsMgmtProcessingBlock = 'a';
        actual.CustRetItmFollowUpActivity = 'a';
        actual.ReturnsMaterialHasBeenReceived = 'a';
        actual.ReturnsRefundType = 'a';
        actual.ReturnsRefundProcgMode = 'a';
        actual.ReturnsRefundExtent = 'a';
        actual.PrelimRefundIsDetermined = 'a';
        actual.ReturnsRefundRjcnReason = 'a';
        actual.ReplacementMaterial = 'a';
        actual.ReplacementMaterialQuantity = 0;
        actual.ReplacementMaterialQtyUnit = 'a';
        actual.ReplacementMaterialIsRequested = 'a';
        actual.ReplacementMatlSupplyingPlant = 'a';
        actual.NextPlantForFollowUpActivity = 'a';
        actual.ReturnsTransshipmentPlant = 'a';
        actual.Supplier = 'a';
        actual.SupplierRetMatlAuthzn = 'a';
        actual.SuplrRetMatlAuthznIsRequired = 'a';
        actual.CustomerRetMatlInspResultCode = 'a';
        actual.NextFllwUpActivityForMatlInsp = 'a';
        actual.RetMatlInspResultCode = 'a';
        actual.ProductIsInspectedAtCustSite = 'a';
        actual.CustRetMatlAuthzn = 'a';
        actual.CRMLogicalSystem = 'a';
        actual.CRMObjectUUID = 'a';
        actual.CRMObjectID = 'a';
        actual.CRMObjectType = 'a';
        actual.RetsMgmtItmLogProcgStatus = 'a';
        actual.RetsMgmtItmCompnProcgStatus = 'a';
        actual.RetsMgmtItmProcgStatus = 'a';
        actual.ReturnsDocumentStatus = 'a';
        actual.ReturnsDocumentApprovalStatus = 'a';
        actual.SDProcessStatus = 'a';
        actual.ReferenceSDDocument = 'a';
        actual.ReferenceSDDocumentItem = 'a';
        actual.ReferenceSDDocumentCategory = 'a';
        actual.SDDocumentRejectionStatus = 'a';
        actual.RequirementSegment = 'a';
        actual.to_CustomerReturn = 'a';
        actual.OVC_FKEY = 'a';
        system.assertEquals('a', actual.CustomerReturn);
        system.assertEquals('a', actual.CustomerReturnItem);
        system.assertEquals('a', actual.HigherLevelItem);
        system.assertEquals('a', actual.CustomerReturnItemCategory);
        system.assertEquals('a', actual.CustomerReturnItemText);
        system.assertEquals('a', actual.PurchaseOrderByCustomer);
        system.assertEquals('a', actual.Material);
        system.assertEquals('a', actual.MaterialByCustomer);
        system.assertEquals(0, actual.RequestedQuantity);
        system.assertEquals('a', actual.RequestedQuantityUnit);
        system.assertEquals(0, actual.ItemGrossWeight);
        system.assertEquals(0, actual.ItemNetWeight);
        system.assertEquals('a', actual.ItemWeightUnit);
        system.assertEquals(0, actual.ItemVolume);
        system.assertEquals('a', actual.ItemVolumeUnit);
        system.assertEquals('a', actual.TransactionCurrency);
        system.assertEquals(0, actual.NetAmount);
        system.assertEquals('a', actual.MaterialGroup);
        system.assertEquals('a', actual.Batch);
        system.assertEquals('a', actual.ProductionPlant);
        system.assertEquals('a', actual.StorageLocation);
        system.assertEquals('a', actual.ShippingPoint);
        system.assertEquals('a', actual.ShippingType);
        system.assertEquals('a', actual.DeliveryPriority);
        system.assertEquals('a', actual.IncotermsClassification);
        system.assertEquals('a', actual.IncotermsTransferLocation);
        system.assertEquals('a', actual.IncotermsLocation1);
        system.assertEquals('a', actual.IncotermsLocation2);
        system.assertEquals('a', actual.CustomerPaymentTerms);
        system.assertEquals('a', actual.SalesDocumentRjcnReason);
        system.assertEquals('a', actual.ItemBillingBlockReason);
        system.assertEquals('a', actual.RetsMgmtProcess);
        system.assertEquals('a', actual.RetsMgmtProcessItem);
        system.assertEquals('a', actual.ReturnReason);
        system.assertEquals('a', actual.RetsMgmtProcessingBlock);
        system.assertEquals('a', actual.CustRetItmFollowUpActivity);
        system.assertEquals('a', actual.ReturnsMaterialHasBeenReceived);
        system.assertEquals('a', actual.ReturnsRefundType);
        system.assertEquals('a', actual.ReturnsRefundProcgMode);
        system.assertEquals('a', actual.ReturnsRefundExtent);
        system.assertEquals('a', actual.PrelimRefundIsDetermined);
        system.assertEquals('a', actual.ReturnsRefundRjcnReason);
        system.assertEquals('a', actual.ReplacementMaterial);
        system.assertEquals(0, actual.ReplacementMaterialQuantity);
        system.assertEquals('a', actual.ReplacementMaterialQtyUnit);
        system.assertEquals('a', actual.ReplacementMaterialIsRequested);
        system.assertEquals('a', actual.ReplacementMatlSupplyingPlant);
        system.assertEquals('a', actual.NextPlantForFollowUpActivity);
        system.assertEquals('a', actual.ReturnsTransshipmentPlant);
        system.assertEquals('a', actual.Supplier);
        system.assertEquals('a', actual.SupplierRetMatlAuthzn);
        system.assertEquals('a', actual.SuplrRetMatlAuthznIsRequired);
        system.assertEquals('a', actual.CustomerRetMatlInspResultCode);
        system.assertEquals('a', actual.NextFllwUpActivityForMatlInsp);
        system.assertEquals('a', actual.RetMatlInspResultCode);
        system.assertEquals('a', actual.ProductIsInspectedAtCustSite);
        system.assertEquals('a', actual.CustRetMatlAuthzn);
        system.assertEquals('a', actual.CRMLogicalSystem);
        system.assertEquals('a', actual.CRMObjectUUID);
        system.assertEquals('a', actual.CRMObjectID);
        system.assertEquals('a', actual.CRMObjectType);
        system.assertEquals('a', actual.RetsMgmtItmLogProcgStatus);
        system.assertEquals('a', actual.RetsMgmtItmCompnProcgStatus);
        system.assertEquals('a', actual.RetsMgmtItmProcgStatus);
        system.assertEquals('a', actual.ReturnsDocumentStatus);
        system.assertEquals('a', actual.ReturnsDocumentApprovalStatus);
        system.assertEquals('a', actual.SDProcessStatus);
        system.assertEquals('a', actual.ReferenceSDDocument);
        system.assertEquals('a', actual.ReferenceSDDocumentItem);
        system.assertEquals('a', actual.ReferenceSDDocumentCategory);
        system.assertEquals('a', actual.SDDocumentRejectionStatus);
        system.assertEquals('a', actual.RequirementSegment);
        system.assertEquals('a', actual.to_CustomerReturn);
        system.assertEquals('a', actual.OVC_FKEY);
    }
    @istest
    private static void testrunQuery() {
        CustomerReturn request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        CustomerReturn response = request.runQuery(query1);
        system.assertEquals('a', response.A_CustomerReturn[0].CustomerReturn);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    @istest
    private static void testrunInsert() {
        CustomerReturn request = testSetup();
        CustomerReturn response = request.runInsert();
        system.assertEquals('a', response.A_CustomerReturn[0].CustomerReturn);
        string requestid = request.runInsertAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunUpdate() {
        CustomerReturn request = testSetup();
        CustomerReturn response = request.runUpdate();
        system.assertEquals('a', response.A_CustomerReturn[0].CustomerReturn);
        string requestid = request.runUpdateAsync(null, null, new Continuation(10));
    }

    @istest
    private static void testrunDelete() {
        CustomerReturn request = testSetup();
        CustomerReturn response = request.runDelete();
        system.assertEquals('a', response.A_CustomerReturn[0].CustomerReturn);
        string requestid = request.runDeleteAsync(null, null, new Continuation(10));
    }

    private static CustomerReturn testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('CustomerReturn');
        CustomerReturn request = new CustomerReturn();
        CustomerReturnA_CustomerReturn value1 = new CustomerReturnA_CustomerReturn();
        value1.CustomerReturn = 'a';
        request.A_CustomerReturn.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        CustomerReturn input = new CustomerReturn();
        CustomerReturnA_CustomerReturn value1 = new CustomerReturnA_CustomerReturn();
        value1.CustomerReturn = 'a';
        input.A_CustomerReturn.add(value1);
        CustomerReturn actual = (CustomerReturn)JSON.deserialize(input.serialize(), CustomerReturn.class);
        system.assertEquals('a', actual.A_CustomerReturn[0].CustomerReturn);
    }

    @istest
    private static void testDeserialize() {
        CustomerReturn output = new CustomerReturn();
        CustomerReturnA_CustomerReturn value1 = new CustomerReturnA_CustomerReturn();
        value1.CustomerReturn = 'a';
        output.A_CustomerReturn.add(value1);

        string s = output.serialize();
        CustomerReturn actual = CustomerReturn.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.A_CustomerReturn[0].CustomerReturn);
    }

    @istest
    private static void testDeserializeError() {
        try {
            CustomerReturn actual = CustomerReturn.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (CustomerReturn.CustomerReturnException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        CustomerReturn output = new CustomerReturn();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        CustomerReturn output = new CustomerReturn();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        CustomerReturn output2 = new CustomerReturn();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        CustomerReturn output = new CustomerReturn();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('A_CustomerReturn'));
        system.assert(keys.contains('A_CustomerReturnItem'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('A_CustomerReturn', first.name);
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('CustomerReturn');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        CustomerReturn.Parameters params = new CustomerReturn.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.requestData = new CustomerReturn();
        params.operation = 'Query';
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new CustomerReturn()) + '}';
        List<CustomerReturn.Parameters> paramList = new List<CustomerReturn.Parameters>{ params };

        Test.startTest();
        List<CustomerReturn.Result> results = CustomerReturn.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}