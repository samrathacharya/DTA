/*
 * Copyright Â© 2019 Vigience Co., Ltd. All Rights Reserved
 */

// This code was generated by Overcast for running the outbound mappings. 2019-11-26 06:08:51Z
//
// Update this test class to correspond to your updates to Mapping_ovcSapAsstAddressRep_Asset.
@istest
private class Mapping_ovcSapAsstAddressRep_AssetTest {
    // Assert in code that your mapping configuration is correct
    @istest
    private static void testObjectMapping() {
        overcast__Run__c r = getExecution();

        overcast__IntegrationFieldMap__c mapping = new overcast__IntegrationFieldMap__c(
            overcast__Active__c = true,
            overcast__Direction__c = 'Inbound'
        );
        mapping.overcast__ApexClass__c = 'Mapping_ovcSapAsstAddressRep_Asset';
        mapping.overcast__ScenarioName__c = 'ovcSapAssetAddressRep';
        mapping.overcast__Target__c = 'Asset';
        mapping.overcast__TargetObjectName__c = 'Asset';
        mapping.overcast__Source__c = 'ovcSapAssetAddressRep_ADRC__c';
        mapping.overcast__SourceObjectName__c = 'ovcSapAssetAddressRep_ADRC__c';
        // Query your actual mapping records and add the field data here
        // mapping.overcast__Joins__c = '';
        // mapping.overcast__Map__c = '';

        // set the input record fields and assert that output record matches your mapping.
        ovcSapAssetAddressRep_ADRC__c input = new ovcSapAssetAddressRep_ADRC__c();

        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();

        Test.startTest();

        plugin.execute(r, new List<ovcSapAssetAddressRep_ADRC__c>{ input });

        Test.stoptest();

        Asset[] output = [SELECT Id FROM Asset LIMIT 1];
        // Add your assertions about your mapping configuration here.
        system.assert(true);
    }

    @istest
    private static void testBeforeUpsertFalse() {
        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        ovcSapAssetAddressRep_ADRC__c source = new ovcSapAssetAddressRep_ADRC__c();
        Asset target = new Asset();
        boolean response = plugin.beforeUpsert(source, target);

        // Assert any transformations on the target record you perform in beforeUpsert()
        system.assertEquals(false, response);
    }

    @istest
    private static void testBeforeUpsertTrue() {
        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        ovcSapAssetAddressRep_ADRC__c source = new ovcSapAssetAddressRep_ADRC__c();

        Account acc = new Account(Name = 'testAcc');
        insert acc;

        Asset target = new Asset();
        target.Name = 'testAsset';
        target.AccountId = acc.id;
        target.SerialNumber = 'XYZ123';
        insert target;
        boolean response = plugin.beforeUpsert(source, target);

        // Assert any transformations on the target record you perform in beforeUpsert()
        system.assertEquals(true, response);
    }

    @istest
    private static void testAfterInsert() {
        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        Asset target = new Asset(Name = 'a');

        overcast.ObjectMapping.InboundMappingIsRunning = true;
        sobject[] inserted = new List<sobject>{ target };
        Database.SaveResult[] saveResults = Database.insert(inserted, false);
        plugin.afterInsert(inserted, saveResults);

        // afterInsert allows for post-processing and may not require any assertions.
        system.assert(true);
    }

    @istest
    private static void testAfterUpdate() {
        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        Asset target = new Asset(Name = 'a');

        overcast.ObjectMapping.InboundMappingIsRunning = true;
        sobject[] updated = new List<sobject>{ target };
        Database.SaveResult[] saveResults = Database.insert(updated, false);
        plugin.afterUpdate(updated, saveResults);

        // afterUpdate allows for post-processing and may not require any assertions.
        system.assert(true);
    }

    @istest
    private static void testLogging() {
        overcast__Run__c r = getExecution();
        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();
        plugin.m_logger = new overcast.Logger(r.Id);

        plugin.logInfo('MESSAGE');
        plugin.logWarning('WARNING');
        plugin.setStatusToWarning();
        plugin.logError('ERROR');
        plugin.logDEBUG('DEBUG');
        plugin.setStatusToError();
        plugin.saveLogs();

        overcast__Log__c[] logs = [SELECT Id, overcast__LogLevel__c, overcast__Message__c FROM overcast__Log__c];
        system.assert(logs.size() >= 3);
        for (overcast__Log__c l : logs) {
            if (l.overcast__LogLevel__c == 'DEBUG') {
                system.assert(false, 'DEBUG message not filtered out');
            }
        }
        system.assertEquals(400, plugin.m_logger.getStatusCode());
        overcast__Run__c r2 = [SELECT overcast__StatusCode__c FROM overcast__Run__c WHERE Id = :r.Id];
        system.assertEquals(400, r2.overcast__StatusCode__c);
    }

    @istest
    private static void testFailure() {
        Mapping_ovcSapAsstAddressRep_Asset plugin = new Mapping_ovcSapAsstAddressRep_Asset();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        Asset target = new Asset();
        target.Name = 'a';
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        sobject[] inserted = new List<sobject>{ target };
        Database.SaveResult failed1 = (Database.SaveResult) JSON.deserialize(
            '{"success":false,"errors":[{"message":"Inserted bad data","statusCode":"FIELD_CUSTOM_VALIDATION_EXCEPTION","fields":["Name"]}]}',
            Database.SaveResult.class
        );
        plugin.afterUpdate(inserted, new List<Database.SaveResult>{ failed1 });
        plugin.m_logger.commitToDatabase();
        list<overcast__Log__c> logs = [
            SELECT Id, overcast__Message__c
            FROM overcast__Log__c
            WHERE overcast__LogLevel__c = 'ERROR'
            ORDER BY CreatedDate ASC
        ];
        system.assert(logs.size() >= 2);

        system.assertEquals(
            '[Mapping_ovcSapAsstAddressRep_Asset] Failed to save record [ID=null, Message=FIELD_CUSTOM_VALIDATION_EXCEPTION:Inserted bad data, Name=a]',
            logs[0].overcast__Message__c
        );
    }

    private static overcast__Run__c getExecution() {
        overcast__Scenario__c scen = overcast.TestingUtilities.SetupTestEnvironment('ovcSapAssetAddressRep');
        scen.overcast__LogLevel__c = 'INFO';
        update scen;
        overcast__Run__c r = new overcast__Run__c(
            overcast__Scenario__c = scen.Id,
            overcast__Input__c = 'A',
            overcast__Mode__c = 'Run',
            overcast__Operation__c = 'Read'
        );
        insert r;
        return r;
    }
}