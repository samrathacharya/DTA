global class PostalCodeTransportZoneRT extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Runnable {
/* 
 * Generated by Overcast UTC 2022-01-31 07:40:12Z.
 * This class belongs to the PostalCodeTransportZoneRT Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class PostalCodeTransportZoneRTException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global PostalCodeTransportZoneRT() {
        this.ZSD_GET_TRANSPORT_ZONE = new PostalCodeTransportZoneRT.ZSD_GET_TRANSPORT_ZONE();
        this.ES_RETURN = new PostalCodeTransportZoneRT.ES_RETURN();
    }

    public class ZSD_GET_TRANSPORT_ZONE {
        @AuraEnabled public String EV_LZONE { get; set; }
        @AuraEnabled public String IV_CTRY { get; set; }
        @AuraEnabled public String IV_POST_CODE { get; set; }

        public ZSD_GET_TRANSPORT_ZONE() {}

        public ZSD_GET_TRANSPORT_ZONE(String pEV_LZONE, String pIV_CTRY, String pIV_POST_CODE) {
            this.EV_LZONE = pEV_LZONE;
            this.IV_CTRY = pIV_CTRY;
            this.IV_POST_CODE = pIV_POST_CODE;
        }
    }

    public class ES_RETURN {
        @AuraEnabled public String TYPE_x { get; set; }
        @AuraEnabled public String ID { get; set; }
        @AuraEnabled public String NUMBER_x { get; set; }
        @AuraEnabled public String MESSAGE { get; set; }
        @AuraEnabled public String LOG_NO { get; set; }
        @AuraEnabled public String LOG_MSG_NO { get; set; }
        @AuraEnabled public String MESSAGE_V1 { get; set; }
        @AuraEnabled public String MESSAGE_V2 { get; set; }
        @AuraEnabled public String MESSAGE_V3 { get; set; }
        @AuraEnabled public String MESSAGE_V4 { get; set; }
        @AuraEnabled public String PARAMETER { get; set; }
        @AuraEnabled public Integer ROW { get; set; }
        @AuraEnabled public String FIELD { get; set; }
        @AuraEnabled public String SYSTEM_x { get; set; }

        public ES_RETURN() {}

        public ES_RETURN(String pTYPE_x, String pID, String pNUMBER_x, String pMESSAGE, String pLOG_NO, String pLOG_MSG_NO, String pMESSAGE_V1, String pMESSAGE_V2, String pMESSAGE_V3, String pMESSAGE_V4, String pPARAMETER, Integer pROW, String pFIELD, String pSYSTEM_x) {
            this.TYPE_x = pTYPE_x;
            this.ID = pID;
            this.NUMBER_x = pNUMBER_x;
            this.MESSAGE = pMESSAGE;
            this.LOG_NO = pLOG_NO;
            this.LOG_MSG_NO = pLOG_MSG_NO;
            this.MESSAGE_V1 = pMESSAGE_V1;
            this.MESSAGE_V2 = pMESSAGE_V2;
            this.MESSAGE_V3 = pMESSAGE_V3;
            this.MESSAGE_V4 = pMESSAGE_V4;
            this.PARAMETER = pPARAMETER;
            this.ROW = pROW;
            this.FIELD = pFIELD;
            this.SYSTEM_x = pSYSTEM_x;
        }
    }

    @AuraEnabled public PostalCodeTransportZoneRT.ZSD_GET_TRANSPORT_ZONE ZSD_GET_TRANSPORT_ZONE { get; set; }
    @AuraEnabled public PostalCodeTransportZoneRT.ES_RETURN ES_RETURN { get; set; }

    public string inputSetName { get; set; }

    public PostalCodeTransportZoneRT run() {
        overcast.Logger logger1 = createLogger();
        try {
            PostalCodeTransportZoneRT response = this.run(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public PostalCodeTransportZoneRT run(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return PostalCodeTransportZoneRT.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);
        
        return PostalCodeTransportZoneRT.deserialize(sh.Response);
    }

    public string runAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }

    public static PostalCodeTransportZoneRT handleAsyncResponse(HttpResponse resp) {
        return PostalCodeTransportZoneRT.deserialize(resp.getBody());
    }

    public static PostalCodeTransportZoneRT getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return handleAsyncResponse(response);
    }

    private overcast.SynchronousHandler setup(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('PostalCodeTransportZoneRT');
        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }

        return sh;
    }

    private static overcast.Logger createLogger() {
        return new overcast.Logger('PostalCodeTransportZoneRT');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static PostalCodeTransportZoneRT deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            PostalCodeTransportZoneRT obj = new PostalCodeTransportZoneRT();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new PostalCodeTransportZoneRT();
        }
        PostalCodeTransportZoneRT obj = (PostalCodeTransportZoneRT)JSON.deserialize(outputData, PostalCodeTransportZoneRT.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new PostalCodeTransportZoneRTException('Response null for PostalCodeTransportZoneRT request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                PostalCodeTransportZoneRTException ex = new PostalCodeTransportZoneRTException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new PostalCodeTransportZoneRTException('Malformed response for PostalCodeTransportZoneRT request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new PostalCodeTransportZoneRTException('Response null for PostalCodeTransportZoneRT request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new PostalCodeTransportZoneRTException(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'ZSD_GET_TRANSPORT_ZONE';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(PostalCodeTransportZoneRTMeta0.metadata);
        }
        return metadata;
    }

}