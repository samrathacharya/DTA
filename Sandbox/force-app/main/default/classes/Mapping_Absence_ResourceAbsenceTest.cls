// This code was generated by Overcast for running the outbound mappings. 2022-01-16 21:09:27Z
//
// Update this test class to correspond to your updates to Mapping_Absence_ResourceAbsence.
@istest
private class Mapping_Absence_ResourceAbsenceTest {
    
    // Assert in code that your mapping configuration is correct
    @istest
    private static void testObjectMapping() {
        overcast__Run__c r = getExecution();
        
        overcast__IntegrationFieldMap__c mapping = new overcast__IntegrationFieldMap__c(overcast__Active__c=true, overcast__Direction__c='Inbound');
        mapping.overcast__ApexClass__c = 'Mapping_Absence_ResourceAbsence';
        mapping.overcast__ScenarioName__c = 'SageAbsences';
        mapping.overcast__Target__c = 'ResourceAbsence';
        mapping.overcast__TargetObjectName__c = 'ResourceAbsence';
        mapping.overcast__Source__c = 'SageAbsences_fHCM2_Absence__c';
        mapping.overcast__SourceObjectName__c = 'SageAbsences_fHCM2_Absence__c';
        // Query your actual mapping records and add the field data here
        // mapping.overcast__Joins__c = '';
        // mapping.overcast__Map__c = '';
        
        // set the input record fields and assert that output record matches your mapping.
        SageAbsences_fHCM2_Absence__c input = new SageAbsences_fHCM2_Absence__c();
        
        Mapping_Absence_ResourceAbsence plugin = new Mapping_Absence_ResourceAbsence();
        
        Test.startTest();
        
        plugin.execute(r, new List<SageAbsences_fHCM2_Absence__c>{ input });
        
        Test.stoptest();
        
        List<ResourceAbsence> output = [SELECT Id FROM ResourceAbsence LIMIT 1];
        // Add your assertions about your mapping configuration here.
        system.assert(true);
    }
    
    @istest
    private static void testBeforeUpsert() {
        Mapping_Absence_ResourceAbsence plugin = new Mapping_Absence_ResourceAbsence();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        SageAbsences_fHCM2_Absence__c source = new SageAbsences_fHCM2_Absence__c();
        ResourceAbsence target = new ResourceAbsence();
        Formula.recalculateFormulas(new List<SageAbsences_fHCM2_Absence__c>{ source });
        boolean response = plugin.beforeUpsert(source, target);
        
        // Assert any transformations on the target record you perform in beforeUpsert()
        system.assertEquals(false, response);
    }
    
    @istest
    private static void testAfterInsert() {
        Mapping_Absence_ResourceAbsence plugin = new Mapping_Absence_ResourceAbsence();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        ResourceAbsence target = new ResourceAbsence(Type='a',Start=Datetime.newInstance(2000,1,1),End=Datetime.newInstance(2000,1,1));
        
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        List<sObject> inserted = new List<sObject>{ target };
        List<Database.SaveResult> saveResults = (List<Database.SaveResult>)JSON.deserialize('[{"id":"a006F00000000xx","success":true,"errors":[]}]', List<Database.SaveResult>.class);
        plugin.afterInsert(inserted, saveResults);
        
        // afterInsert allows for post-processing and may not require any assertions.
        system.assert(true);
    }
    
    @istest
    private static void testAfterUpdate() {
        Mapping_Absence_ResourceAbsence plugin = new Mapping_Absence_ResourceAbsence();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        ResourceAbsence target = new ResourceAbsence(Type='a',Start=Datetime.newInstance(2000,1,1),End=Datetime.newInstance(2000,1,1));
        
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        List<sObject> updated = new List<sObject>{ target };
        List<Database.SaveResult> saveResults = (List<Database.SaveResult>)JSON.deserialize('[{"id":"a006F00000000xx","success":true,"errors":[]}]', List<Database.SaveResult>.class);
        plugin.afterUpdate(updated, saveResults);
        
        // afterUpdate allows for post-processing and may not require any assertions.
        system.assert(true);
    }
    
    @istest
    private static void testLogging() {
        overcast__Run__c r = getExecution();
        Mapping_Absence_ResourceAbsence plugin = new Mapping_Absence_ResourceAbsence();
        plugin.m_logger = new overcast.Logger(r.Id);
        
        plugin.logInfo('MESSAGE');
        plugin.logWarning('WARNING');
        plugin.setStatusToWarning();
        plugin.logError('ERROR');
        plugin.logDEBUG('DEBUG');
        plugin.setStatusToError();
        plugin.saveLogs();
        
        overcast__Log__c[] logs = [SELECT Id, overcast__LogLevel__c, overcast__Message__c FROM overcast__Log__c];
        system.assert(logs.size() >= 3);
        for (overcast__Log__c l : logs) {
            if (l.overcast__LogLevel__c == 'DEBUG') {
                system.assert(false, 'DEBUG message not filtered out');
            }
        }
        system.assertEquals(400, plugin.m_logger.getStatusCode());
        overcast__Run__c r2 = [SELECT overcast__StatusCode__c FROM overcast__Run__c WHERE Id = :r.Id];
        system.assertEquals(400, r2.overcast__StatusCode__c);
    }

    @istest
    private static void testFailure() {
        Mapping_Absence_ResourceAbsence plugin = new Mapping_Absence_ResourceAbsence();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        ResourceAbsence target = new ResourceAbsence();
        target.Type = 'a';
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        List<sObject> inserted = new List<sObject>{ target };
        Database.SaveResult failed1 = (Database.SaveResult)JSON.deserialize('{"success":false,"errors":[{"message":"Running unit test.","statusCode":"MAPPING_UNIT_TEST_CHECK","fields":["Type"]}]}', Database.SaveResult.class);
        plugin.afterUpdate(inserted, new List<Database.SaveResult>{ failed1 });
        plugin.m_logger.commitToDatabase();
        list<overcast__Log__c> logs = [SELECT Id, overcast__Message__c FROM overcast__Log__c WHERE overcast__LogLevel__c = 'ERROR' ORDER BY CreatedDate ASC];
        system.assert(logs.size() >= 2);
        string expected = '[Mapping_Absence_ResourceAbsence] Failed to save record [ID=null, Message=MAPPING_UNIT_TEST_CHECK:Running unit test.';
        system.assertNotEquals(null, logs[0].overcast__Message__c);
        system.assert(logs[0].overcast__Message__c.startsWith(expected));
        system.assert(logs[0].overcast__Message__c.contains('Type'));
    }

    private static overcast__Run__c getExecution() {
        overcast__Scenario__c scen = overcast.TestingUtilities.SetupTestEnvironment('SageAbsences');
        scen.overcast__LogLevel__c = 'INFO';
        update scen;
        overcast__Run__c r = new overcast__Run__c(overcast__Scenario__c=scen.Id, overcast__Input__c='A', overcast__Mode__c='Run', overcast__Operation__c='Read');
        insert r;
        return r;
    }
}