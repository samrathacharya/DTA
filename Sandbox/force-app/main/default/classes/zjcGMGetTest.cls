/* 
 * Generated by Overcast UTC 2022-02-07 17:16:10Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjcGMGetTest {
    @istest
    private static void testzjcGMGet() {
        zjcGMGet actual = new zjcGMGet();
        system.assertNotEquals(null, actual.BAPI_GOODSMVT_GETITEMS);
        system.assertNotEquals(null, actual.BATCH_RA);
        system.assertNotEquals(null, actual.GOODSMVT_HEADER);
        system.assertNotEquals(null, actual.GOODSMVT_ITEMS);
        system.assertNotEquals(null, actual.GOODSMVT_ITEMS_CWM);
        system.assertNotEquals(null, actual.MATERIAL_RA);
        system.assertNotEquals(null, actual.MOVE_TYPE_RA);
        system.assertNotEquals(null, actual.PLANT_RA);
        system.assertNotEquals(null, actual.PSTNG_DATE_RA);
        system.assertNotEquals(null, actual.PURCH_DOC_RA);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.SPEC_STOCK_RA);
        system.assertNotEquals(null, actual.STGE_LOC_RA);
        system.assertNotEquals(null, actual.TR_EV_TYPE_RA);
        system.assertNotEquals(null, actual.USERNAME_RA);
        system.assertNotEquals(null, actual.VENDOR_RA);
    }

    @istest
    private static void testBAPI_GOODSMVT_GETITEMS() {
        zjcGMGet.BAPI_GOODSMVT_GETITEMS actual = new zjcGMGet.BAPI_GOODSMVT_GETITEMS();


        zjcGMGet.BAPI_GOODSMVT_GETITEMS actual0 = new zjcGMGet.BAPI_GOODSMVT_GETITEMS();
    }
    @istest
    private static void testBATCH_RA() {
        zjcGMGet.BATCH_RA actual = new zjcGMGet.BATCH_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.BATCH_RA actual0 = new zjcGMGet.BATCH_RA();
    }
    @istest
    private static void testGOODSMVT_HEADER() {
        zjcGMGet.GOODSMVT_HEADER actual = new zjcGMGet.GOODSMVT_HEADER('a','a','a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),Date.newInstance(2000,1,1),'a','a','a','a','a','a','a');

        system.assertEquals('a', actual.MAT_DOC);
        system.assertEquals('a', actual.DOC_YEAR);
        system.assertEquals('a', actual.TR_EV_TYPE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DOC_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.PSTNG_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ENTRY_DATE);
        system.assertEquals('a', actual.ENTRY_TIME);
        system.assertEquals('a', actual.USERNAME);
        system.assertEquals('a', actual.VER_GR_GI_SLIP);
        system.assertEquals('a', actual.EXPIMP_NO);
        system.assertEquals('a', actual.REF_DOC_NO);
        system.assertEquals('a', actual.HEADER_TXT);
        system.assertEquals('a', actual.REF_DOC_NO_LONG);

        zjcGMGet.GOODSMVT_HEADER actual0 = new zjcGMGet.GOODSMVT_HEADER();
    }
    @istest
    private static void testGOODSMVT_ITEMS() {
        zjcGMGet.GOODSMVT_ITEMS actual = new zjcGMGet.GOODSMVT_ITEMS('a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',0,'a','a',0,'a','a','a','a','a','a','a','a','a','a','a','a');

        actual.ORDER_ITNO = 'a';
        actual.CALC_MOTIVE = 'a';
        actual.ASSET_NO = 'a';
        actual.SUB_NUMBER = 'a';
        actual.RESERV_NO = 'a';
        actual.RES_ITEM = 'a';
        actual.RES_TYPE = 'a';
        actual.WITHDRAWN = 'a';
        actual.MOVE_MAT = 'a';
        actual.MOVE_PLANT = 'a';
        actual.MOVE_STLOC = 'a';
        actual.MOVE_BATCH = 'a';
        actual.MOVE_VAL_TYPE = 'a';
        actual.MVT_IND = 'a';
        actual.MOVE_REAS = 'a';
        actual.RL_EST_KEY = 'a';
        actual.REF_DATE = Date.newInstance(2000,1,1);
        actual.COST_OBJ = 'a';
        actual.PROFIT_SEGM_NO = 'a';
        actual.PROFIT_CTR = 'a';
        actual.WBS_ELEM = 'a';
        actual.NETWORK = 'a';
        actual.ACTIVITY = 'a';
        actual.PART_ACCT = 'a';
        actual.AMOUNT_LC = 0;
        actual.AMOUNT_SV = 0;
        actual.CURRENCY_x = 'a';
        actual.CURRENCY_ISO = 'a';
        actual.REF_DOC_YR = 'a';
        actual.REF_DOC = 'a';
        actual.REF_DOC_IT = 'a';
        actual.EXPIRYDATE = Date.newInstance(2000,1,1);
        actual.PROD_DATE = Date.newInstance(2000,1,1);
        actual.FUND = 'a';
        actual.FUNDS_CTR = 'a';
        actual.CMMT_ITEM = 'a';
        actual.VAL_SALES_ORD = 'a';
        actual.VAL_S_ORD_ITEM = 'a';
        actual.VAL_WBS_ELEM = 'a';
        actual.CO_BUSPROC = 'a';
        actual.ACTTYPE = 'a';
        actual.SUPPL_VEND = 'a';
        actual.X_AUTO_CRE = 'a';
        actual.MATERIAL_EXTERNAL = 'a';
        actual.MATERIAL_GUID = 'a';
        actual.MATERIAL_VERSION = 'a';
        actual.MOVE_MAT_EXTERNAL = 'a';
        actual.MOVE_MAT_GUID = 'a';
        actual.MOVE_MAT_VERSION = 'a';
        actual.GRANT_NBR = 'a';
        actual.CMMT_ITEM_LONG = 'a';
        actual.FUNC_AREA_LONG = 'a';
        actual.LINE_ID = 'a';
        actual.PARENT_ID = 'a';
        actual.LINE_DEPTH = 'a';
        actual.BUDGET_PERIOD = 'a';
        actual.EARMARKED_NUMBER = 'a';
        actual.EARMARKED_ITEM = 'a';
        actual.STK_SEGMENT = 'a';
        actual.MATERIAL_LONG = 'a';
        actual.MOVE_MAT_LONG = 'a';
        actual.STK_SEG_LONG = 'a';
        system.assertEquals('a', actual.MAT_DOC);
        system.assertEquals('a', actual.DOC_YEAR);
        system.assertEquals('a', actual.MATDOC_ITM);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.STGE_LOC);
        system.assertEquals('a', actual.BATCH);
        system.assertEquals('a', actual.MOVE_TYPE);
        system.assertEquals('a', actual.STCK_TYPE);
        system.assertEquals('a', actual.SPEC_STOCK);
        system.assertEquals('a', actual.VENDOR);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.SALES_ORD);
        system.assertEquals('a', actual.S_ORD_ITEM);
        system.assertEquals('a', actual.SCHED_LINE);
        system.assertEquals('a', actual.VAL_TYPE);
        system.assertEquals(0, actual.ENTRY_QNT);
        system.assertEquals('a', actual.ENTRY_UOM);
        system.assertEquals('a', actual.ENTRY_UOM_ISO);
        system.assertEquals(0, actual.PO_PR_QNT);
        system.assertEquals('a', actual.ORDERPR_UN);
        system.assertEquals('a', actual.ORDERPR_UN_ISO);
        system.assertEquals('a', actual.PO_NUMBER);
        system.assertEquals('a', actual.PO_ITEM);
        system.assertEquals('a', actual.SHIPPING);
        system.assertEquals('a', actual.COMP_SHIP);
        system.assertEquals('a', actual.NO_MORE_GR);
        system.assertEquals('a', actual.ITEM_TEXT);
        system.assertEquals('a', actual.GR_RCPT);
        system.assertEquals('a', actual.UNLOAD_PT);
        system.assertEquals('a', actual.COSTCENTER);
        system.assertEquals('a', actual.ORDERID);
        system.assertEquals('a', actual.ORDER_ITNO);
        system.assertEquals('a', actual.CALC_MOTIVE);
        system.assertEquals('a', actual.ASSET_NO);
        system.assertEquals('a', actual.SUB_NUMBER);
        system.assertEquals('a', actual.RESERV_NO);
        system.assertEquals('a', actual.RES_ITEM);
        system.assertEquals('a', actual.RES_TYPE);
        system.assertEquals('a', actual.WITHDRAWN);
        system.assertEquals('a', actual.MOVE_MAT);
        system.assertEquals('a', actual.MOVE_PLANT);
        system.assertEquals('a', actual.MOVE_STLOC);
        system.assertEquals('a', actual.MOVE_BATCH);
        system.assertEquals('a', actual.MOVE_VAL_TYPE);
        system.assertEquals('a', actual.MVT_IND);
        system.assertEquals('a', actual.MOVE_REAS);
        system.assertEquals('a', actual.RL_EST_KEY);
        system.assertEquals(Date.newInstance(2000,1,1), actual.REF_DATE);
        system.assertEquals('a', actual.COST_OBJ);
        system.assertEquals('a', actual.PROFIT_SEGM_NO);
        system.assertEquals('a', actual.PROFIT_CTR);
        system.assertEquals('a', actual.WBS_ELEM);
        system.assertEquals('a', actual.NETWORK);
        system.assertEquals('a', actual.ACTIVITY);
        system.assertEquals('a', actual.PART_ACCT);
        system.assertEquals(0, actual.AMOUNT_LC);
        system.assertEquals(0, actual.AMOUNT_SV);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.CURRENCY_ISO);
        system.assertEquals('a', actual.REF_DOC_YR);
        system.assertEquals('a', actual.REF_DOC);
        system.assertEquals('a', actual.REF_DOC_IT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.EXPIRYDATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.PROD_DATE);
        system.assertEquals('a', actual.FUND);
        system.assertEquals('a', actual.FUNDS_CTR);
        system.assertEquals('a', actual.CMMT_ITEM);
        system.assertEquals('a', actual.VAL_SALES_ORD);
        system.assertEquals('a', actual.VAL_S_ORD_ITEM);
        system.assertEquals('a', actual.VAL_WBS_ELEM);
        system.assertEquals('a', actual.CO_BUSPROC);
        system.assertEquals('a', actual.ACTTYPE);
        system.assertEquals('a', actual.SUPPL_VEND);
        system.assertEquals('a', actual.X_AUTO_CRE);
        system.assertEquals('a', actual.MATERIAL_EXTERNAL);
        system.assertEquals('a', actual.MATERIAL_GUID);
        system.assertEquals('a', actual.MATERIAL_VERSION);
        system.assertEquals('a', actual.MOVE_MAT_EXTERNAL);
        system.assertEquals('a', actual.MOVE_MAT_GUID);
        system.assertEquals('a', actual.MOVE_MAT_VERSION);
        system.assertEquals('a', actual.GRANT_NBR);
        system.assertEquals('a', actual.CMMT_ITEM_LONG);
        system.assertEquals('a', actual.FUNC_AREA_LONG);
        system.assertEquals('a', actual.LINE_ID);
        system.assertEquals('a', actual.PARENT_ID);
        system.assertEquals('a', actual.LINE_DEPTH);
        system.assertEquals('a', actual.BUDGET_PERIOD);
        system.assertEquals('a', actual.EARMARKED_NUMBER);
        system.assertEquals('a', actual.EARMARKED_ITEM);
        system.assertEquals('a', actual.STK_SEGMENT);
        system.assertEquals('a', actual.MATERIAL_LONG);
        system.assertEquals('a', actual.MOVE_MAT_LONG);
        system.assertEquals('a', actual.STK_SEG_LONG);

        zjcGMGet.GOODSMVT_ITEMS actual0 = new zjcGMGet.GOODSMVT_ITEMS();
    }
    @istest
    private static void testGOODSMVT_ITEMS_CWM() {
        zjcGMGet.GOODSMVT_ITEMS_CWM actual = new zjcGMGet.GOODSMVT_ITEMS_CWM('a','a','a',0,'a',0,'a');

        system.assertEquals('a', actual.MAT_DOC);
        system.assertEquals('a', actual.DOC_YEAR);
        system.assertEquals('a', actual.MATDOC_ITM);
        system.assertEquals(0, actual.QUANTITY_PME);
        system.assertEquals('a', actual.BASE_UOM_PME);
        system.assertEquals(0, actual.ENTRY_QNT_PME);
        system.assertEquals('a', actual.ENTRY_UOM_PME);

        zjcGMGet.GOODSMVT_ITEMS_CWM actual0 = new zjcGMGet.GOODSMVT_ITEMS_CWM();
    }
    @istest
    private static void testMATERIAL_RA() {
        zjcGMGet.MATERIAL_RA actual = new zjcGMGet.MATERIAL_RA('a','a','a','a','a','a','a','a','a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);
        system.assertEquals('a', actual.HIGH_EXTERNAL);
        system.assertEquals('a', actual.HIGH_GUID);
        system.assertEquals('a', actual.HIGH_VERSION);
        system.assertEquals('a', actual.LOW_EXTERNAL);
        system.assertEquals('a', actual.LOW_GUID);
        system.assertEquals('a', actual.LOW_VERSION);
        system.assertEquals('a', actual.LOW_LONG);
        system.assertEquals('a', actual.HIGH_LONG);

        zjcGMGet.MATERIAL_RA actual0 = new zjcGMGet.MATERIAL_RA();
    }
    @istest
    private static void testMOVE_TYPE_RA() {
        zjcGMGet.MOVE_TYPE_RA actual = new zjcGMGet.MOVE_TYPE_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.MOVE_TYPE_RA actual0 = new zjcGMGet.MOVE_TYPE_RA();
    }
    @istest
    private static void testPLANT_RA() {
        zjcGMGet.PLANT_RA actual = new zjcGMGet.PLANT_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.PLANT_RA actual0 = new zjcGMGet.PLANT_RA();
    }
    @istest
    private static void testPSTNG_DATE_RA() {
        zjcGMGet.PSTNG_DATE_RA actual = new zjcGMGet.PSTNG_DATE_RA('a','a',Date.newInstance(2000,1,1),Date.newInstance(2000,1,1));

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LOW);
        system.assertEquals(Date.newInstance(2000,1,1), actual.HIGH);

        zjcGMGet.PSTNG_DATE_RA actual0 = new zjcGMGet.PSTNG_DATE_RA();
    }
    @istest
    private static void testPURCH_DOC_RA() {
        zjcGMGet.PURCH_DOC_RA actual = new zjcGMGet.PURCH_DOC_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.PURCH_DOC_RA actual0 = new zjcGMGet.PURCH_DOC_RA();
    }
    @istest
    private static void testRETURN_x() {
        zjcGMGet.RETURN_x actual = new zjcGMGet.RETURN_x('a','a','a','a','a','a','a','a','a','a','a',0,'a','a');

        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);

        zjcGMGet.RETURN_x actual0 = new zjcGMGet.RETURN_x();
    }
    @istest
    private static void testSPEC_STOCK_RA() {
        zjcGMGet.SPEC_STOCK_RA actual = new zjcGMGet.SPEC_STOCK_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.SPEC_STOCK_RA actual0 = new zjcGMGet.SPEC_STOCK_RA();
    }
    @istest
    private static void testSTGE_LOC_RA() {
        zjcGMGet.STGE_LOC_RA actual = new zjcGMGet.STGE_LOC_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.STGE_LOC_RA actual0 = new zjcGMGet.STGE_LOC_RA();
    }
    @istest
    private static void testTR_EV_TYPE_RA() {
        zjcGMGet.TR_EV_TYPE_RA actual = new zjcGMGet.TR_EV_TYPE_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.TR_EV_TYPE_RA actual0 = new zjcGMGet.TR_EV_TYPE_RA();
    }
    @istest
    private static void testUSERNAME_RA() {
        zjcGMGet.USERNAME_RA actual = new zjcGMGet.USERNAME_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.USERNAME_RA actual0 = new zjcGMGet.USERNAME_RA();
    }
    @istest
    private static void testVENDOR_RA() {
        zjcGMGet.VENDOR_RA actual = new zjcGMGet.VENDOR_RA('a','a','a','a');

        system.assertEquals('a', actual.SIGN);
        system.assertEquals('a', actual.OPTION);
        system.assertEquals('a', actual.LOW);
        system.assertEquals('a', actual.HIGH);

        zjcGMGet.VENDOR_RA actual0 = new zjcGMGet.VENDOR_RA();
    }

    @istest
    private static void testRun() {
        zjcGMGet request = testSetup();
        zjcGMGet response = request.run();
        system.assertEquals('a', response.BATCH_RA[0].SIGN);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static zjcGMGet testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjcGMGet');
        zjcGMGet request = new zjcGMGet();
        zjcGMGet.BATCH_RA value1 = new zjcGMGet.BATCH_RA();
        value1.SIGN = 'a';
        request.BATCH_RA.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjcGMGet input = new zjcGMGet();
        zjcGMGet.BATCH_RA value1 = new zjcGMGet.BATCH_RA();
        value1.SIGN = 'a';
        input.BATCH_RA.add(value1);
        zjcGMGet actual = (zjcGMGet)JSON.deserialize(input.serialize(), zjcGMGet.class);
        system.assertEquals('a', actual.BATCH_RA[0].SIGN);
    }

    @istest
    private static void testDeserialize() {
        zjcGMGet output = new zjcGMGet();
        zjcGMGet.BATCH_RA value1 = new zjcGMGet.BATCH_RA();
        value1.SIGN = 'a';
        output.BATCH_RA.add(value1);

        string s = output.serialize();
        zjcGMGet actual = zjcGMGet.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BATCH_RA[0].SIGN);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjcGMGet actual = zjcGMGet.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjcGMGet.zjcGMGetException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjcGMGet output = new zjcGMGet();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjcGMGet output = new zjcGMGet();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjcGMGet output2 = new zjcGMGet();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjcGMGet output = new zjcGMGet();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_GOODSMVT_GETITEMS'));
        system.assert(keys.contains('BATCH_RA'));
        system.assert(keys.contains('GOODSMVT_HEADER'));
        system.assert(keys.contains('GOODSMVT_ITEMS'));
        system.assert(keys.contains('GOODSMVT_ITEMS_CWM'));
        system.assert(keys.contains('MATERIAL_RA'));
        system.assert(keys.contains('MOVE_TYPE_RA'));
        system.assert(keys.contains('PLANT_RA'));
        system.assert(keys.contains('PSTNG_DATE_RA'));
        system.assert(keys.contains('PURCH_DOC_RA'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('SPEC_STOCK_RA'));
        system.assert(keys.contains('STGE_LOC_RA'));
        system.assert(keys.contains('TR_EV_TYPE_RA'));
        system.assert(keys.contains('USERNAME_RA'));
        system.assert(keys.contains('VENDOR_RA'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_GOODSMVT_GETITEMS', first.name);
    }

}