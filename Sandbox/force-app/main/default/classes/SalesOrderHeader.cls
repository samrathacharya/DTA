global class SalesOrderHeader extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Updatable {
/* 
 * Generated by Overcast UTC 2022-02-08 03:06:29Z.
 * This class belongs to the SalesOrderHeader Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
    public class SalesOrderHeaderException extends Exception {
        private List<String> messages;
        public List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }
    }
    global SalesOrderHeader() {
        this.A_SalesOrder = new list<SalesOrderHeader.A_SalesOrder>();
    }

    public class A_SalesOrder {
        @AuraEnabled public String SalesOrder { get; set; }
        @AuraEnabled public String SalesOrderType { get; set; }
        @AuraEnabled public String SalesOrganization { get; set; }
        @AuraEnabled public String DistributionChannel { get; set; }
        @AuraEnabled public String OrganizationDivision { get; set; }
        @AuraEnabled public String SalesGroup { get; set; }
        @AuraEnabled public String SalesOffice { get; set; }
        @AuraEnabled public String SalesDistrict { get; set; }
        @AuraEnabled public String SoldToParty { get; set; }
        @AuraEnabled public Datetime CreationDate { get; set; }
        @AuraEnabled public String CreatedByUser { get; set; }
        @AuraEnabled public Datetime LastChangeDate { get; set; }
        @AuraEnabled public String SenderBusinessSystemName { get; set; }
        @AuraEnabled public String ExternalDocumentID { get; set; }
        @AuraEnabled public Datetime LastChangeDateTime { get; set; }
        @AuraEnabled public String PurchaseOrderByCustomer { get; set; }
        @AuraEnabled public String PurchaseOrderByShipToParty { get; set; }
        @AuraEnabled public String CustomerPurchaseOrderType { get; set; }
        @AuraEnabled public Datetime CustomerPurchaseOrderDate { get; set; }
        @AuraEnabled public Datetime SalesOrderDate { get; set; }
        @AuraEnabled public Decimal TotalNetAmount { get; set; }
        @AuraEnabled public String TransactionCurrency { get; set; }
        @AuraEnabled public String SDDocumentReason { get; set; }
        @AuraEnabled public Datetime PricingDate { get; set; }
        @AuraEnabled public Datetime RequestedDeliveryDate { get; set; }
        @AuraEnabled public String ShippingCondition { get; set; }
        @AuraEnabled public Boolean CompleteDeliveryIsDefined { get; set; }
        @AuraEnabled public String ShippingType { get; set; }
        @AuraEnabled public String HeaderBillingBlockReason { get; set; }
        @AuraEnabled public String DeliveryBlockReason { get; set; }
        @AuraEnabled public String DeliveryDateTypeRule { get; set; }
        @AuraEnabled public String IncotermsClassification { get; set; }
        @AuraEnabled public String IncotermsTransferLocation { get; set; }
        @AuraEnabled public String IncotermsLocation1 { get; set; }
        @AuraEnabled public String IncotermsLocation2 { get; set; }
        @AuraEnabled public String IncotermsVersion { get; set; }
        @AuraEnabled public String CustomerPriceGroup { get; set; }
        @AuraEnabled public String PriceListType { get; set; }
        @AuraEnabled public String CustomerPaymentTerms { get; set; }
        @AuraEnabled public String PaymentMethod { get; set; }
        @AuraEnabled public String AssignmentReference { get; set; }
        @AuraEnabled public String ReferenceSDDocument { get; set; }
        @AuraEnabled public String ReferenceSDDocumentCategory { get; set; }
        @AuraEnabled public String AccountingDocExternalReference { get; set; }
        @AuraEnabled public String CustomerAccountAssignmentGroup { get; set; }
        @AuraEnabled public Decimal AccountingExchangeRate { get; set; }
        @AuraEnabled public String CustomerGroup { get; set; }
        @AuraEnabled public String AdditionalCustomerGroup1 { get; set; }
        @AuraEnabled public String AdditionalCustomerGroup2 { get; set; }
        @AuraEnabled public String AdditionalCustomerGroup3 { get; set; }
        @AuraEnabled public String AdditionalCustomerGroup4 { get; set; }
        @AuraEnabled public String AdditionalCustomerGroup5 { get; set; }
        @AuraEnabled public Boolean SlsDocIsRlvtForProofOfDeliv { get; set; }
        @AuraEnabled public String CustomerTaxClassification1 { get; set; }
        @AuraEnabled public String CustomerTaxClassification2 { get; set; }
        @AuraEnabled public String CustomerTaxClassification3 { get; set; }
        @AuraEnabled public String CustomerTaxClassification4 { get; set; }
        @AuraEnabled public String CustomerTaxClassification5 { get; set; }
        @AuraEnabled public String CustomerTaxClassification6 { get; set; }
        @AuraEnabled public String CustomerTaxClassification7 { get; set; }
        @AuraEnabled public String CustomerTaxClassification8 { get; set; }
        @AuraEnabled public String CustomerTaxClassification9 { get; set; }
        @AuraEnabled public String TaxDepartureCountry { get; set; }
        @AuraEnabled public String VATRegistrationCountry { get; set; }
        @AuraEnabled public String SalesOrderApprovalReason { get; set; }
        @AuraEnabled public String SalesDocApprovalStatus { get; set; }
        @AuraEnabled public String OverallSDProcessStatus { get; set; }
        @AuraEnabled public String TotalCreditCheckStatus { get; set; }
        @AuraEnabled public String OverallTotalDeliveryStatus { get; set; }
        @AuraEnabled public String OverallSDDocumentRejectionSts { get; set; }

        public A_SalesOrder() {}

        public A_SalesOrder(String pSalesOrder, String pSalesOrderType, String pSalesOrganization, String pDistributionChannel, String pOrganizationDivision, String pSalesGroup, String pSalesOffice, String pSalesDistrict, String pSoldToParty, Datetime pCreationDate, String pCreatedByUser, Datetime pLastChangeDate, String pSenderBusinessSystemName, String pExternalDocumentID, Datetime pLastChangeDateTime, String pPurchaseOrderByCustomer, String pPurchaseOrderByShipToParty, String pCustomerPurchaseOrderType, Datetime pCustomerPurchaseOrderDate, Datetime pSalesOrderDate, Decimal pTotalNetAmount, String pTransactionCurrency, String pSDDocumentReason, Datetime pPricingDate, Datetime pRequestedDeliveryDate, String pShippingCondition, Boolean pCompleteDeliveryIsDefined, String pShippingType, String pHeaderBillingBlockReason, String pDeliveryBlockReason, String pDeliveryDateTypeRule, String pIncotermsClassification) {
            this.SalesOrder = pSalesOrder;
            this.SalesOrderType = pSalesOrderType;
            this.SalesOrganization = pSalesOrganization;
            this.DistributionChannel = pDistributionChannel;
            this.OrganizationDivision = pOrganizationDivision;
            this.SalesGroup = pSalesGroup;
            this.SalesOffice = pSalesOffice;
            this.SalesDistrict = pSalesDistrict;
            this.SoldToParty = pSoldToParty;
            this.CreationDate = pCreationDate;
            this.CreatedByUser = pCreatedByUser;
            this.LastChangeDate = pLastChangeDate;
            this.SenderBusinessSystemName = pSenderBusinessSystemName;
            this.ExternalDocumentID = pExternalDocumentID;
            this.LastChangeDateTime = pLastChangeDateTime;
            this.PurchaseOrderByCustomer = pPurchaseOrderByCustomer;
            this.PurchaseOrderByShipToParty = pPurchaseOrderByShipToParty;
            this.CustomerPurchaseOrderType = pCustomerPurchaseOrderType;
            this.CustomerPurchaseOrderDate = pCustomerPurchaseOrderDate;
            this.SalesOrderDate = pSalesOrderDate;
            this.TotalNetAmount = pTotalNetAmount;
            this.TransactionCurrency = pTransactionCurrency;
            this.SDDocumentReason = pSDDocumentReason;
            this.PricingDate = pPricingDate;
            this.RequestedDeliveryDate = pRequestedDeliveryDate;
            this.ShippingCondition = pShippingCondition;
            this.CompleteDeliveryIsDefined = pCompleteDeliveryIsDefined;
            this.ShippingType = pShippingType;
            this.HeaderBillingBlockReason = pHeaderBillingBlockReason;
            this.DeliveryBlockReason = pDeliveryBlockReason;
            this.DeliveryDateTypeRule = pDeliveryDateTypeRule;
            this.IncotermsClassification = pIncotermsClassification;
        }
    }

    @AuraEnabled public list<SalesOrderHeader.A_SalesOrder> A_SalesOrder { get; set; }

    public string inputSetName { get; set; }

    public SalesOrderHeader runQuery(overcast.Query query) {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderHeader response = this.runQuery(query, logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public SalesOrderHeader runQuery(overcast.Query query, overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential);
    }

    public string runQueryAsync(overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwSelect, query, logger, namedCredential, con);
    }

    public SalesOrderHeader runInsert() {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderHeader response = this.runInsert(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public SalesOrderHeader runInsert(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwCreate, null, logger, namedCredential);
    }
    
    public string runInsertAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwCreate, null, logger, namedCredential, con);
    }

    public SalesOrderHeader runUpdate() {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderHeader response = this.runUpdate(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }

    public SalesOrderHeader runUpdate(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwUpdate, null, logger, namedCredential);
    }
    
    public string runUpdateAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwUpdate, null, logger, namedCredential, con);
    }

    public SalesOrderHeader runDelete() {
        overcast.Logger logger1 = createLogger();
        try {
            SalesOrderHeader response = this.runDelete(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public SalesOrderHeader runDelete(overcast.Logger logger, string namedCredential) {
        return run(overcast.SynchronousHandler.OperationType.EpgwDelete, null, logger, namedCredential);
    }
    
    public string runDeleteAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        return runAsync(overcast.SynchronousHandler.OperationType.EpgwDelete, null, logger, namedCredential, con);
    }

    public static SalesOrderHeader getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return SalesOrderHeader.deserialize(response.getBody());
    }

    private overcast.SynchronousHandler setup(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('SalesOrderHeader');
        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
        sh.Operation = operation;

        if (query != null) {
            sh.Condition = query.where_x;
            sh.OrderBy = query.orderBy;
            sh.Fields = query.fields;
            sh.Limit_x = query.limit_x;
            sh.Offset = query.offset;
        }
        return sh;
    }
    
    private SalesOrderHeader run(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return SalesOrderHeader.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return SalesOrderHeader.deserialize(sh.Response);
    }

    private string runAsync(overcast.SynchronousHandler.OperationType operation, overcast.Query query, overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(operation, query, logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();

        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }
        

    private static overcast.Logger createLogger() {
        return new overcast.Logger('SalesOrderHeader');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }
    
    public static SalesOrderHeader deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            SalesOrderHeader obj = new SalesOrderHeader();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        map<string, string> m = getOutputData(responsedata);
        string outputData = m.get('output');
        string backendMessage = m.get('backendMessage');
        if (outputData == null) {
            return new SalesOrderHeader();
        }
        SalesOrderHeader obj = (SalesOrderHeader)JSON.deserialize(outputData, SalesOrderHeader.class);
        obj.outputData = outputData;
        obj.backendMessage = backendMessage;

        return obj;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new SalesOrderHeaderException('Response null for SalesOrderHeader request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                string[] errors = (string[])jresponse.readValueAs(list<string>.class);
                SalesOrderHeaderException ex = new SalesOrderHeaderException(string.join(errors, ';'));
                ex.setMessages(errors);
                throw ex;
            }
        }
        if (!hasOutput) {
            throw new SalesOrderHeaderException('Malformed response for SalesOrderHeader request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new SalesOrderHeaderException('Response null for SalesOrderHeader request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                object[] errors = (object[])responseObj.get('error');
                throw new SalesOrderHeaderException(string.join(errors, ';'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'A_SalesOrder';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(SalesOrderHeaderMeta0.metadata);
        }
        return metadata;
    }

}