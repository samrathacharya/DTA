/* 
 * Generated by Overcast UTC 2021-11-25 10:19:20Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjb_MARAVTest {
    @istest
    private static void testzjb_MARAV() {
        zjb_MARAV actual = new zjb_MARAV();
        system.assertNotEquals(null, actual.MARAV);
    }

    @istest
    private static void testMARAV() {
        zjb_MARAV.MARAV actual = new zjb_MARAV.MARAV('a','a','a',Date.newInstance(2000,1,1),'a',Date.newInstance(2000,1,1),'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',0,0);

        actual.GEWEI = 'a';
        actual.VOLUM = 0;
        actual.VOLEH = 'a';
        actual.BEHVO = 'a';
        actual.RAUBE = 'a';
        actual.TEMPB = 'a';
        actual.DISST = 'a';
        actual.TRAGR = 'a';
        actual.STOFF = 'a';
        actual.SPART = 'a';
        actual.EAN11 = 'a';
        actual.NUMTP = 'a';
        actual.LAENG = 0;
        actual.BREIT = 0;
        actual.HOEHE = 0;
        actual.MEABM = 'a';
        actual.PRDHA = 'a';
        actual.KUNNR = 'a';
        actual.AEKLK = 'a';
        actual.CADKZ = 'a';
        actual.QMPUR = 'a';
        actual.ETIFO = 'a';
        actual.ETIAR = 'a';
        actual.ERGEW = 0;
        actual.ERGEI = 'a';
        actual.ERVOL = 0;
        actual.ERVOE = 'a';
        actual.GEWTO = 0;
        actual.VOLTO = 0;
        actual.VABME = 'a';
        actual.MAKTX = 'a';
        actual.MAKTG = 'a';
        actual.KZREV = 'a';
        actual.KZKFG = 'a';
        actual.XCHPF = 'a';
        actual.VHART = 'a';
        actual.FUELG = 0;
        actual.STFAK = 0;
        actual.MAGRV = 'a';
        actual.BEGRU = 'a';
        actual.MLGUT = 'a';
        actual.KZKUP = 'a';
        actual.KZNFM = 'a';
        actual.TAKLV = 'a';
        actual.RBNRM = 'a';
        actual.MHDRZ = 0;
        actual.MHDHB = 0;
        actual.MHDLP = 0;
        actual.DATAB = Date.newInstance(2000,1,1);
        actual.LIQDT = Date.newInstance(2000,1,1);
        actual.SAISJ = 'a';
        actual.PLGTP = 'a';
        actual.EXTWG = 'a';
        actual.SATNR = 'a';
        actual.ATTYP = 'a';
        actual.PMATA = 'a';
        actual.MSTAE = 'a';
        actual.MSTAV = 'a';
        actual.MSTDE = Date.newInstance(2000,1,1);
        actual.MSTDV = Date.newInstance(2000,1,1);
        actual.INHME = 'a';
        actual.INHAL = 0;
        actual.VPREH = 0;
        actual.ETIAG = 'a';
        actual.INHBR = 0;
        actual.BWSCL = 'a';
        actual.KZUMW = 'a';
        actual.KOSCH = 'a';
        actual.CUOBF = 'a';
        actual.SPROF = 'a';
        actual.NRFHG = 'a';
        actual.MFRPN = 'a';
        actual.MFRNR = 'a';
        actual.BMATN = 'a';
        actual.MPROF = 'a';
        actual.KZWSM = 'a';
        actual.SAITY = 'a';
        actual.PROFL = 'a';
        actual.IHIVI = 'a';
        actual.ILOOS = 'a';
        actual.SERLV = 'a';
        actual.KZGVH = 'a';
        actual.XGCHP = 'a';
        actual.KZEFF = 'a';
        actual.COMPL = 'a';
        actual.IPRKZ = 'a';
        actual.RDMHD = 'a';
        actual.PRZUS = 'a';
        actual.MTPOS_MARA = 'a';
        actual.BFLME = 'a';
        actual.MATFI = 'a';
        actual.CMREL = 'a';
        actual.SLED_BBD = 'a';
        actual.GTIN_VARIANT = 'a';
        actual.GENNR = 'a';
        actual.RMATP = 'a';
        actual.GDS_RELEVANT = 'a';
        actual.MCOND = 'a';
        actual.RETDELC = 'a';
        actual.LOGLEV_RETO = 'a';
        actual.NSNID = 'a';
        actual.WEORA = 'a';
        actual.IPMIPPRODUCT = 'a';
        actual.MEDIUM = 'a';
        actual.COMMODITY = 'a';
        actual.SGT_CSGR = 'a';
        actual.SGT_COVSA = 'a';
        actual.SGT_REL = 'a';
        actual.x_CWM_XCWMAT = 'a';
        actual.x_CWM_VALUM = 'a';
        actual.x_CWM_TOLGR = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERSDA);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LAEDA);
        system.assertEquals('a', actual.AENAM);
        system.assertEquals('a', actual.VPSTA);
        system.assertEquals('a', actual.PSTAT);
        system.assertEquals('a', actual.LVORM);
        system.assertEquals('a', actual.MTART);
        system.assertEquals('a', actual.MBRSH);
        system.assertEquals('a', actual.MATKL);
        system.assertEquals('a', actual.BISMT);
        system.assertEquals('a', actual.MEINS);
        system.assertEquals('a', actual.BSTME);
        system.assertEquals('a', actual.ZEINR);
        system.assertEquals('a', actual.ZEIAR);
        system.assertEquals('a', actual.ZEIVR);
        system.assertEquals('a', actual.ZEIFO);
        system.assertEquals('a', actual.AESZN);
        system.assertEquals('a', actual.BLATT);
        system.assertEquals('a', actual.BLANZ);
        system.assertEquals('a', actual.FERTH);
        system.assertEquals('a', actual.FORMT);
        system.assertEquals('a', actual.GROES);
        system.assertEquals('a', actual.WRKST);
        system.assertEquals('a', actual.NORMT);
        system.assertEquals('a', actual.LABOR);
        system.assertEquals('a', actual.EKWSL);
        system.assertEquals(0, actual.BRGEW);
        system.assertEquals(0, actual.NTGEW);
        system.assertEquals('a', actual.GEWEI);
        system.assertEquals(0, actual.VOLUM);
        system.assertEquals('a', actual.VOLEH);
        system.assertEquals('a', actual.BEHVO);
        system.assertEquals('a', actual.RAUBE);
        system.assertEquals('a', actual.TEMPB);
        system.assertEquals('a', actual.DISST);
        system.assertEquals('a', actual.TRAGR);
        system.assertEquals('a', actual.STOFF);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.EAN11);
        system.assertEquals('a', actual.NUMTP);
        system.assertEquals(0, actual.LAENG);
        system.assertEquals(0, actual.BREIT);
        system.assertEquals(0, actual.HOEHE);
        system.assertEquals('a', actual.MEABM);
        system.assertEquals('a', actual.PRDHA);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.AEKLK);
        system.assertEquals('a', actual.CADKZ);
        system.assertEquals('a', actual.QMPUR);
        system.assertEquals('a', actual.ETIFO);
        system.assertEquals('a', actual.ETIAR);
        system.assertEquals(0, actual.ERGEW);
        system.assertEquals('a', actual.ERGEI);
        system.assertEquals(0, actual.ERVOL);
        system.assertEquals('a', actual.ERVOE);
        system.assertEquals(0, actual.GEWTO);
        system.assertEquals(0, actual.VOLTO);
        system.assertEquals('a', actual.VABME);
        system.assertEquals('a', actual.MAKTX);
        system.assertEquals('a', actual.MAKTG);
        system.assertEquals('a', actual.KZREV);
        system.assertEquals('a', actual.KZKFG);
        system.assertEquals('a', actual.XCHPF);
        system.assertEquals('a', actual.VHART);
        system.assertEquals(0, actual.FUELG);
        system.assertEquals(0, actual.STFAK);
        system.assertEquals('a', actual.MAGRV);
        system.assertEquals('a', actual.BEGRU);
        system.assertEquals('a', actual.MLGUT);
        system.assertEquals('a', actual.KZKUP);
        system.assertEquals('a', actual.KZNFM);
        system.assertEquals('a', actual.TAKLV);
        system.assertEquals('a', actual.RBNRM);
        system.assertEquals(0, actual.MHDRZ);
        system.assertEquals(0, actual.MHDHB);
        system.assertEquals(0, actual.MHDLP);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DATAB);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LIQDT);
        system.assertEquals('a', actual.SAISJ);
        system.assertEquals('a', actual.PLGTP);
        system.assertEquals('a', actual.EXTWG);
        system.assertEquals('a', actual.SATNR);
        system.assertEquals('a', actual.ATTYP);
        system.assertEquals('a', actual.PMATA);
        system.assertEquals('a', actual.MSTAE);
        system.assertEquals('a', actual.MSTAV);
        system.assertEquals(Date.newInstance(2000,1,1), actual.MSTDE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.MSTDV);
        system.assertEquals('a', actual.INHME);
        system.assertEquals(0, actual.INHAL);
        system.assertEquals(0, actual.VPREH);
        system.assertEquals('a', actual.ETIAG);
        system.assertEquals(0, actual.INHBR);
        system.assertEquals('a', actual.BWSCL);
        system.assertEquals('a', actual.KZUMW);
        system.assertEquals('a', actual.KOSCH);
        system.assertEquals('a', actual.CUOBF);
        system.assertEquals('a', actual.SPROF);
        system.assertEquals('a', actual.NRFHG);
        system.assertEquals('a', actual.MFRPN);
        system.assertEquals('a', actual.MFRNR);
        system.assertEquals('a', actual.BMATN);
        system.assertEquals('a', actual.MPROF);
        system.assertEquals('a', actual.KZWSM);
        system.assertEquals('a', actual.SAITY);
        system.assertEquals('a', actual.PROFL);
        system.assertEquals('a', actual.IHIVI);
        system.assertEquals('a', actual.ILOOS);
        system.assertEquals('a', actual.SERLV);
        system.assertEquals('a', actual.KZGVH);
        system.assertEquals('a', actual.XGCHP);
        system.assertEquals('a', actual.KZEFF);
        system.assertEquals('a', actual.COMPL);
        system.assertEquals('a', actual.IPRKZ);
        system.assertEquals('a', actual.RDMHD);
        system.assertEquals('a', actual.PRZUS);
        system.assertEquals('a', actual.MTPOS_MARA);
        system.assertEquals('a', actual.BFLME);
        system.assertEquals('a', actual.MATFI);
        system.assertEquals('a', actual.CMREL);
        system.assertEquals('a', actual.SLED_BBD);
        system.assertEquals('a', actual.GTIN_VARIANT);
        system.assertEquals('a', actual.GENNR);
        system.assertEquals('a', actual.RMATP);
        system.assertEquals('a', actual.GDS_RELEVANT);
        system.assertEquals('a', actual.MCOND);
        system.assertEquals('a', actual.RETDELC);
        system.assertEquals('a', actual.LOGLEV_RETO);
        system.assertEquals('a', actual.NSNID);
        system.assertEquals('a', actual.WEORA);
        system.assertEquals('a', actual.IPMIPPRODUCT);
        system.assertEquals('a', actual.MEDIUM);
        system.assertEquals('a', actual.COMMODITY);
        system.assertEquals('a', actual.SGT_CSGR);
        system.assertEquals('a', actual.SGT_COVSA);
        system.assertEquals('a', actual.SGT_REL);
        system.assertEquals('a', actual.x_CWM_XCWMAT);
        system.assertEquals('a', actual.x_CWM_VALUM);
        system.assertEquals('a', actual.x_CWM_TOLGR);

        zjb_MARAV.MARAV actual0 = new zjb_MARAV.MARAV();
    }
    @istest
    private static void testrunQuery() {
        zjb_MARAV request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjb_MARAV response = request.runQuery(query1);
        system.assertEquals('a', response.MARAV[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjb_MARAV testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjb_MARAV');
        zjb_MARAV request = new zjb_MARAV();
        zjb_MARAV.MARAV value1 = new zjb_MARAV.MARAV();
        value1.MANDT = 'a';
        request.MARAV.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjb_MARAV input = new zjb_MARAV();
        zjb_MARAV.MARAV value1 = new zjb_MARAV.MARAV();
        value1.MANDT = 'a';
        input.MARAV.add(value1);
        zjb_MARAV actual = (zjb_MARAV)JSON.deserialize(input.serialize(), zjb_MARAV.class);
        system.assertEquals('a', actual.MARAV[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        zjb_MARAV output = new zjb_MARAV();
        zjb_MARAV.MARAV value1 = new zjb_MARAV.MARAV();
        value1.MANDT = 'a';
        output.MARAV.add(value1);

        string s = output.serialize();
        zjb_MARAV actual = zjb_MARAV.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.MARAV[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjb_MARAV actual = zjb_MARAV.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (zjb_MARAV.zjb_MARAVException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        zjb_MARAV output = new zjb_MARAV();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjb_MARAV output = new zjb_MARAV();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjb_MARAV output2 = new zjb_MARAV();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjb_MARAV output = new zjb_MARAV();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('MARAV'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('MARAV', first.name);
    }

}