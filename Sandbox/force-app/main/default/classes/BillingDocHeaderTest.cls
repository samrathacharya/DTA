/* 
 * Generated by Overcast UTC 2022-03-08 04:28:56Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class BillingDocHeaderTest {
    @istest
    private static void testBillingDocHeader() {
        BillingDocHeader actual = new BillingDocHeader();
        system.assertNotEquals(null, actual.VBRK);
    }

    @istest
    private static void testVBRK() {
        BillingDocHeaderVBRK actual = new BillingDocHeaderVBRK();

        actual.VBELN = 'a';
        actual.FKART = 'a';
        actual.WAERK = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.KUNRG = 'a';
        actual.KUNAG = 'a';
        actual.SPART = 'a';
        actual.KUNWE = 'a';
        system.assertEquals('a', actual.VBELN);
        system.assertEquals('a', actual.FKART);
        system.assertEquals('a', actual.WAERK);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.KUNRG);
        system.assertEquals('a', actual.KUNAG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.KUNWE);
    }
    @istest
    private static void testrunQuery() {
        BillingDocHeader request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        BillingDocHeader response = request.runQuery(query1);
        system.assertEquals('a', response.VBRK[0].VBELN);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static BillingDocHeader testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('BillingDocHeader');
        BillingDocHeader request = new BillingDocHeader();
        BillingDocHeaderVBRK value1 = new BillingDocHeaderVBRK();
        value1.VBELN = 'a';
        request.VBRK.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        BillingDocHeader input = new BillingDocHeader();
        BillingDocHeaderVBRK value1 = new BillingDocHeaderVBRK();
        value1.VBELN = 'a';
        input.VBRK.add(value1);
        BillingDocHeader actual = (BillingDocHeader)JSON.deserialize(input.serialize(), BillingDocHeader.class);
        system.assertEquals('a', actual.VBRK[0].VBELN);
    }

    @istest
    private static void testDeserialize() {
        BillingDocHeader output = new BillingDocHeader();
        BillingDocHeaderVBRK value1 = new BillingDocHeaderVBRK();
        value1.VBELN = 'a';
        output.VBRK.add(value1);

        string s = output.serialize();
        BillingDocHeader actual = BillingDocHeader.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.VBRK[0].VBELN);
    }

    @istest
    private static void testDeserializeError() {
        try {
            BillingDocHeader actual = BillingDocHeader.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        }
        catch (BillingDocHeader.BillingDocHeaderException e) {
            system.assertEquals('A test error', e.getMessage());
        }
    }

    @istest
    private static void testGetterSetter() {
        BillingDocHeader output = new BillingDocHeader();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        BillingDocHeader output = new BillingDocHeader();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        BillingDocHeader output2 = new BillingDocHeader();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        BillingDocHeader output = new BillingDocHeader();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('VBRK'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('VBRK', first.name);
    }

    @istest
    private static void testException() {
        BillingDocHeader.BillingDocHeaderException e = new BillingDocHeader.BillingDocHeaderException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {       
        try {
            BillingDocHeader.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (BillingDocHeader.BillingDocHeaderException e) {
            System.assert(true);
        }
        
		try {
            BillingDocHeader output = new BillingDocHeader();
        	output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (BillingDocHeader.BillingDocHeaderException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
		try {
        	BillingDocHeader output = new BillingDocHeader();
        	output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (BillingDocHeader.BillingDocHeaderException e) {
            System.assert(true);
        }
        
        overcast.Globals.IsOCF = true;
        
        try {
            BillingDocHeader.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (BillingDocHeader.BillingDocHeaderException e) {
            System.assert(true);
        }
        
		try {
            BillingDocHeader.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (BillingDocHeader.BillingDocHeaderException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
        }
    }

    @istest
    private static void testGetBackendMessage() {
        BillingDocHeader output = new BillingDocHeader();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('BillingDocHeader');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        BillingDocHeader.Parameters params = new BillingDocHeader.Parameters();
        params.flowInterviewGuid = 'X';
        params.query = new overcast.Query();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new BillingDocHeader()) + '}';
        List<BillingDocHeader.Parameters> paramList = new List<BillingDocHeader.Parameters>{ params };

        Test.startTest();
        List<BillingDocHeader.Result> results = BillingDocHeader.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}